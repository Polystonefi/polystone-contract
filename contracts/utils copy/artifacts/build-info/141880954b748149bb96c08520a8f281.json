{
	"id": "141880954b748149bb96c08520a8f281",
	"_format": "hh-sol-build-info-1",
	"solcVersion": "0.6.12",
	"solcLongVersion": "0.6.12+commit.27d51765",
	"input": {
		"language": "Solidity",
		"sources": {
			"contracts/utils/Epoch.sol": {
				"content": "// SPDX-License-Identifier: MIT\r\n\r\npragma solidity >=0.6.0 <0.8.0;\r\n\r\nimport \"@openzeppelin/contracts/utils/math/SafeMath.sol\";\r\nimport \"../owner/Operator.sol\";\r\n\r\ncontract Epoch is Operator {\r\n    using SafeMath for uint256;\r\n\r\n    uint256 private period;\r\n    uint256 private startTime;\r\n    uint256 private lastEpochTime;\r\n    uint256 private epoch;\r\n\r\n    /* ========== CONSTRUCTOR ========== */\r\n\r\n    constructor(\r\n        uint256 _period,\r\n        uint256 _startTime,\r\n        uint256 _startEpoch\r\n    ) public {\r\n        period = _period;\r\n        startTime = _startTime;\r\n        epoch = _startEpoch;\r\n        lastEpochTime = startTime.sub(period);\r\n    }\r\n\r\n    /* ========== Modifier ========== */\r\n\r\n    modifier checkStartTime {\r\n        require(block.timestamp >= startTime, 'Epoch: not started yet');\r\n\r\n        _;\r\n    }\r\n\r\n    modifier checkEpoch {\r\n        uint256 _nextEpochPoint = nextEpochPoint();\r\n        if (block.timestamp < _nextEpochPoint) {\r\n            require(msg.sender == operator(), 'Epoch: only operator allowed for pre-epoch');\r\n            _;\r\n        } else {\r\n            _;\r\n\r\n            for (;;) {\r\n                lastEpochTime = _nextEpochPoint;\r\n                ++epoch;\r\n                _nextEpochPoint = nextEpochPoint();\r\n                if (block.timestamp < _nextEpochPoint) break;\r\n            }\r\n        }\r\n    }\r\n\r\n    /* ========== VIEW FUNCTIONS ========== */\r\n\r\n    function getCurrentEpoch() public view returns (uint256) {\r\n        return epoch;\r\n    }\r\n\r\n    function getPeriod() public view returns (uint256) {\r\n        return period;\r\n    }\r\n\r\n    function getStartTime() public view returns (uint256) {\r\n        return startTime;\r\n    }\r\n\r\n    function getLastEpochTime() public view returns (uint256) {\r\n        return lastEpochTime;\r\n    }\r\n\r\n    function nextEpochPoint() public view returns (uint256) {\r\n        return lastEpochTime.add(period);\r\n    }\r\n\r\n    /* ========== GOVERNANCE ========== */\r\n\r\n    function setPeriod(uint256 _period) external onlyOperator {\r\n        require(_period >= 1 hours && _period <= 48 hours, '_period: out of range');\r\n        period = _period;\r\n    }\r\n\r\n    function setEpoch(uint256 _epoch) external onlyOperator {\r\n        epoch = _epoch;\r\n    }\r\n}\r\n"
			},
			"contracts/owner/Operator.sol": {
				"content": "// SPDX-License-Identifier: MIT\r\n\r\npragma solidity >=0.6.0 <0.8.0;\r\n\r\nimport \"@openzeppelin/contracts/access/Ownable.sol\";\r\nimport \"@openzeppelin/contracts/utils/Context.sol\";\r\n\r\nabstract contract Operator is Context, Ownable {\r\n    address private _operator;\r\n\r\n    event OperatorTransferred(\r\n        address indexed previousOperator,\r\n        address indexed newOperator\r\n    );\r\n\r\n    constructor() internal {\r\n        _operator = _msgSender();\r\n        emit OperatorTransferred(address(0), _operator);\r\n    }\r\n\r\n    function operator() public view returns (address) {\r\n        return _operator;\r\n    }\r\n\r\n    modifier onlyOperator() {\r\n        require(\r\n            _operator == msg.sender,\r\n            \"operator: caller is not the operator\"\r\n        );\r\n        _;\r\n    }\r\n\r\n    function isOperator() public view returns (bool) {\r\n        return _msgSender() == _operator;\r\n    }\r\n\r\n    function transferOperator(address newOperator_) public onlyOwner {\r\n        _transferOperator(newOperator_);\r\n    }\r\n\r\n    function _transferOperator(address newOperator_) internal {\r\n        require(\r\n            newOperator_ != address(0),\r\n            \"operator: zero address given for new operator\"\r\n        );\r\n        emit OperatorTransferred(address(0), newOperator_);\r\n        Ownable.transferOwnership(newOperator_);\r\n        _operator = newOperator_;\r\n    }\r\n}\r\n"
			},
			"@openzeppelin/contracts/utils/math/SafeMath.sol": {
				"content": "// SPDX-License-Identifier: MIT\n\npragma solidity >=0.6.0 <0.8.0;\n\n/**\n * @dev Wrappers over Solidity's arithmetic operations with added overflow\n * checks.\n *\n * Arithmetic operations in Solidity wrap on overflow. This can easily result\n * in bugs, because programmers usually assume that an overflow raises an\n * error, which is the standard behavior in high level programming languages.\n * `SafeMath` restores this intuition by reverting the transaction when an\n * operation overflows.\n *\n * Using this library instead of the unchecked operations eliminates an entire\n * class of bugs, so it's recommended to use it always.\n */\nlibrary SafeMath {\n    /**\n     * @dev Returns the addition of two unsigned integers, with an overflow flag.\n     *\n     * _Available since v3.4._\n     */\n    function tryAdd(uint256 a, uint256 b) internal pure returns (bool, uint256) {\n        uint256 c = a + b;\n        if (c < a) return (false, 0);\n        return (true, c);\n    }\n\n    /**\n     * @dev Returns the substraction of two unsigned integers, with an overflow flag.\n     *\n     * _Available since v3.4._\n     */\n    function trySub(uint256 a, uint256 b) internal pure returns (bool, uint256) {\n        if (b > a) return (false, 0);\n        return (true, a - b);\n    }\n\n    /**\n     * @dev Returns the multiplication of two unsigned integers, with an overflow flag.\n     *\n     * _Available since v3.4._\n     */\n    function tryMul(uint256 a, uint256 b) internal pure returns (bool, uint256) {\n        // Gas optimization: this is cheaper than requiring 'a' not being zero, but the\n        // benefit is lost if 'b' is also tested.\n        // See: https://github.com/OpenZeppelin/openzeppelin-contracts/pull/522\n        if (a == 0) return (true, 0);\n        uint256 c = a * b;\n        if (c / a != b) return (false, 0);\n        return (true, c);\n    }\n\n    /**\n     * @dev Returns the division of two unsigned integers, with a division by zero flag.\n     *\n     * _Available since v3.4._\n     */\n    function tryDiv(uint256 a, uint256 b) internal pure returns (bool, uint256) {\n        if (b == 0) return (false, 0);\n        return (true, a / b);\n    }\n\n    /**\n     * @dev Returns the remainder of dividing two unsigned integers, with a division by zero flag.\n     *\n     * _Available since v3.4._\n     */\n    function tryMod(uint256 a, uint256 b) internal pure returns (bool, uint256) {\n        if (b == 0) return (false, 0);\n        return (true, a % b);\n    }\n\n    /**\n     * @dev Returns the addition of two unsigned integers, reverting on\n     * overflow.\n     *\n     * Counterpart to Solidity's `+` operator.\n     *\n     * Requirements:\n     *\n     * - Addition cannot overflow.\n     */\n    function add(uint256 a, uint256 b) internal pure returns (uint256) {\n        uint256 c = a + b;\n        require(c >= a, \"SafeMath: addition overflow\");\n        return c;\n    }\n\n    /**\n     * @dev Returns the subtraction of two unsigned integers, reverting on\n     * overflow (when the result is negative).\n     *\n     * Counterpart to Solidity's `-` operator.\n     *\n     * Requirements:\n     *\n     * - Subtraction cannot overflow.\n     */\n    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\n        require(b <= a, \"SafeMath: subtraction overflow\");\n        return a - b;\n    }\n\n    /**\n     * @dev Returns the multiplication of two unsigned integers, reverting on\n     * overflow.\n     *\n     * Counterpart to Solidity's `*` operator.\n     *\n     * Requirements:\n     *\n     * - Multiplication cannot overflow.\n     */\n    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\n        if (a == 0) return 0;\n        uint256 c = a * b;\n        require(c / a == b, \"SafeMath: multiplication overflow\");\n        return c;\n    }\n\n    /**\n     * @dev Returns the integer division of two unsigned integers, reverting on\n     * division by zero. The result is rounded towards zero.\n     *\n     * Counterpart to Solidity's `/` operator. Note: this function uses a\n     * `revert` opcode (which leaves remaining gas untouched) while Solidity\n     * uses an invalid opcode to revert (consuming all remaining gas).\n     *\n     * Requirements:\n     *\n     * - The divisor cannot be zero.\n     */\n    function div(uint256 a, uint256 b) internal pure returns (uint256) {\n        require(b > 0, \"SafeMath: division by zero\");\n        return a / b;\n    }\n\n    /**\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\n     * reverting when dividing by zero.\n     *\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\n     * invalid opcode to revert (consuming all remaining gas).\n     *\n     * Requirements:\n     *\n     * - The divisor cannot be zero.\n     */\n    function mod(uint256 a, uint256 b) internal pure returns (uint256) {\n        require(b > 0, \"SafeMath: modulo by zero\");\n        return a % b;\n    }\n\n    /**\n     * @dev Returns the subtraction of two unsigned integers, reverting with custom message on\n     * overflow (when the result is negative).\n     *\n     * CAUTION: This function is deprecated because it requires allocating memory for the error\n     * message unnecessarily. For custom revert reasons use {trySub}.\n     *\n     * Counterpart to Solidity's `-` operator.\n     *\n     * Requirements:\n     *\n     * - Subtraction cannot overflow.\n     */\n    function sub(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\n        require(b <= a, errorMessage);\n        return a - b;\n    }\n\n    function ceil(uint256 a, uint256 m) internal pure returns (uint256) {\n        uint256 c = add(a, m);\n        uint256 d = sub(c, 1);\n        return mul(div(d, m), m);\n    }\n\n    /**\n     * @dev Returns the integer division of two unsigned integers, reverting with custom message on\n     * division by zero. The result is rounded towards zero.\n     *\n     * CAUTION: This function is deprecated because it requires allocating memory for the error\n     * message unnecessarily. For custom revert reasons use {tryDiv}.\n     *\n     * Counterpart to Solidity's `/` operator. Note: this function uses a\n     * `revert` opcode (which leaves remaining gas untouched) while Solidity\n     * uses an invalid opcode to revert (consuming all remaining gas).\n     *\n     * Requirements:\n     *\n     * - The divisor cannot be zero.\n     */\n    function div(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\n        require(b > 0, errorMessage);\n        return a / b;\n    }\n\n    /**\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\n     * reverting with custom message when dividing by zero.\n     *\n     * CAUTION: This function is deprecated because it requires allocating memory for the error\n     * message unnecessarily. For custom revert reasons use {tryMod}.\n     *\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\n     * invalid opcode to revert (consuming all remaining gas).\n     *\n     * Requirements:\n     *\n     * - The divisor cannot be zero.\n     */\n    function mod(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\n        require(b > 0, errorMessage);\n        return a % b;\n    }\n}"
			},
			"@openzeppelin/contracts/utils/Context.sol": {
				"content": "// SPDX-License-Identifier: MIT\n\npragma solidity >=0.6.12 <0.8.0;\n\n/**\n * @dev Provides information about the current execution context, including the\n * sender of the transaction and its data. While these are generally available\n * via msg.sender and msg.data, they should not be accessed in such a direct\n * manner, since when dealing with meta-transactions the account sending and\n * paying for execution may not be the actual sender (as far as an application\n * is concerned).\n *\n * This contract is only required for intermediate, library-like contracts.\n */\nabstract contract Context {\n    function _msgSender() internal view virtual returns (address) {\n        return msg.sender;\n    }\n\n    function _msgData() internal view virtual returns (bytes calldata) {\n        return msg.data;\n    }\n}\n"
			},
			"@openzeppelin/contracts/access/Ownable.sol": {
				"content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts v4.4.1 (access/Ownable.sol)\n\npragma solidity >=0.6.0 <0.8.0;\n\nimport \"../utils/Context.sol\";\n/**\n * @dev Contract module which provides a basic access control mechanism, where\n * there is an account (an owner) that can be granted exclusive access to\n * specific functions.\n *\n * By default, the owner account will be the one that deploys the contract. This\n * can later be changed with {transferOwnership}.\n *\n * This module is used through inheritance. It will make available the modifier\n * `onlyOwner`, which can be applied to your functions to restrict their use to\n * the owner.\n */\nabstract contract Ownable is Context {\n    address private _owner;\n\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\n\n    /**\n     * @dev Initializes the contract setting the deployer as the initial owner.\n     */\n    constructor () internal {\n        address msgSender = _msgSender();\n        _owner = msgSender;\n        emit OwnershipTransferred(address(0), msgSender);\n    }\n\n    /**\n     * @dev Returns the address of the current owner.\n     */\n    function owner() public view virtual returns (address) {\n        return _owner;\n    }\n\n    /**\n     * @dev Throws if called by any account other than the owner.\n     */\n    modifier onlyOwner() {\n        require(owner() == _msgSender(), \"Ownable: caller is not the owner\");\n        _;\n    }\n\n    /**\n     * @dev Leaves the contract without owner. It will not be possible to call\n     * `onlyOwner` functions anymore. Can only be called by the current owner.\n     *\n     * NOTE: Renouncing ownership will leave the contract without an owner,\n     * thereby removing any functionality that is only available to the owner.\n     */\n    function renounceOwnership() public virtual onlyOwner {\n        emit OwnershipTransferred(_owner, address(0));\n        _owner = address(0);\n    }\n\n    /**\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\n     * Can only be called by the current owner.\n     */\n    function transferOwnership(address newOwner) public virtual onlyOwner {\n        require(newOwner != address(0), \"Ownable: new owner is the zero address\");\n        emit OwnershipTransferred(_owner, newOwner);\n        _owner = newOwner;\n    }\n}"
			}
		},
		"settings": {
			"optimizer": {
				"enabled": true,
				"runs": 200
			},
			"outputSelection": {
				"*": {
					"": [
						"ast"
					],
					"*": [
						"abi",
						"metadata",
						"devdoc",
						"userdoc",
						"storageLayout",
						"evm.legacyAssembly",
						"evm.bytecode",
						"evm.deployedBytecode",
						"evm.methodIdentifiers",
						"evm.gasEstimates",
						"evm.assembly"
					]
				}
			}
		}
	},
	"output": {
		"contracts": {
			"@openzeppelin/contracts/access/Ownable.sol": {
				"Ownable": {
					"abi": [
						{
							"anonymous": false,
							"inputs": [
								{
									"indexed": true,
									"internalType": "address",
									"name": "previousOwner",
									"type": "address"
								},
								{
									"indexed": true,
									"internalType": "address",
									"name": "newOwner",
									"type": "address"
								}
							],
							"name": "OwnershipTransferred",
							"type": "event"
						},
						{
							"inputs": [],
							"name": "owner",
							"outputs": [
								{
									"internalType": "address",
									"name": "",
									"type": "address"
								}
							],
							"stateMutability": "view",
							"type": "function"
						},
						{
							"inputs": [],
							"name": "renounceOwnership",
							"outputs": [],
							"stateMutability": "nonpayable",
							"type": "function"
						},
						{
							"inputs": [
								{
									"internalType": "address",
									"name": "newOwner",
									"type": "address"
								}
							],
							"name": "transferOwnership",
							"outputs": [],
							"stateMutability": "nonpayable",
							"type": "function"
						}
					],
					"devdoc": {
						"details": "Contract module which provides a basic access control mechanism, where there is an account (an owner) that can be granted exclusive access to specific functions. By default, the owner account will be the one that deploys the contract. This can later be changed with {transferOwnership}. This module is used through inheritance. It will make available the modifier `onlyOwner`, which can be applied to your functions to restrict their use to the owner.",
						"kind": "dev",
						"methods": {
							"constructor": {
								"details": "Initializes the contract setting the deployer as the initial owner."
							},
							"owner()": {
								"details": "Returns the address of the current owner."
							},
							"renounceOwnership()": {
								"details": "Leaves the contract without owner. It will not be possible to call `onlyOwner` functions anymore. Can only be called by the current owner. NOTE: Renouncing ownership will leave the contract without an owner, thereby removing any functionality that is only available to the owner."
							},
							"transferOwnership(address)": {
								"details": "Transfers ownership of the contract to a new account (`newOwner`). Can only be called by the current owner."
							}
						},
						"version": 1
					},
					"evm": {
						"assembly": "",
						"bytecode": {
							"linkReferences": {},
							"object": "",
							"opcodes": "",
							"sourceMap": ""
						},
						"deployedBytecode": {
							"immutableReferences": {},
							"linkReferences": {},
							"object": "",
							"opcodes": "",
							"sourceMap": ""
						},
						"gasEstimates": null,
						"legacyAssembly": null,
						"methodIdentifiers": {
							"owner()": "8da5cb5b",
							"renounceOwnership()": "715018a6",
							"transferOwnership(address)": "f2fde38b"
						}
					},
					"metadata": "{\"compiler\":{\"version\":\"0.6.12+commit.27d51765\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}],\"devdoc\":{\"details\":\"Contract module which provides a basic access control mechanism, where there is an account (an owner) that can be granted exclusive access to specific functions. By default, the owner account will be the one that deploys the contract. This can later be changed with {transferOwnership}. This module is used through inheritance. It will make available the modifier `onlyOwner`, which can be applied to your functions to restrict their use to the owner.\",\"kind\":\"dev\",\"methods\":{\"constructor\":{\"details\":\"Initializes the contract setting the deployer as the initial owner.\"},\"owner()\":{\"details\":\"Returns the address of the current owner.\"},\"renounceOwnership()\":{\"details\":\"Leaves the contract without owner. It will not be possible to call `onlyOwner` functions anymore. Can only be called by the current owner. NOTE: Renouncing ownership will leave the contract without an owner, thereby removing any functionality that is only available to the owner.\"},\"transferOwnership(address)\":{\"details\":\"Transfers ownership of the contract to a new account (`newOwner`). Can only be called by the current owner.\"}},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"@openzeppelin/contracts/access/Ownable.sol\":\"Ownable\"},\"evmVersion\":\"istanbul\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\"},\"optimizer\":{\"enabled\":true,\"runs\":200},\"remappings\":[]},\"sources\":{\"@openzeppelin/contracts/access/Ownable.sol\":{\"keccak256\":\"0x58edc78e5f20b754362ecaac32003e6461a67019985e513c5b0f75d252a866ee\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://5c8e7676e6fdfc7b2af63e85e2190716cafc9fa6eb17a310a7c049b7176a79f9\",\"dweb:/ipfs/QmPthc9W2xTrA3QBQMQu3mqfH22WGx8eW3uKfiC5LYxZYF\"]},\"@openzeppelin/contracts/utils/Context.sol\":{\"keccak256\":\"0x7edbc679249d31c4ee2205417fc929f8bfabb9ed68eb59dfd3be1f8005bff9a6\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://5ab93b0420d7df250f88a163fdff222060623e7eae18d873165d9f5f92f74492\",\"dweb:/ipfs/QmRQZ3bP5XPRH3FFGA3iDWpYh81z2wSPBBR76frtH3kx33\"]}},\"version\":1}",
					"storageLayout": {
						"storage": [
							{
								"astId": 7,
								"contract": "@openzeppelin/contracts/access/Ownable.sol:Ownable",
								"label": "_owner",
								"offset": 0,
								"slot": "0",
								"type": "t_address"
							}
						],
						"types": {
							"t_address": {
								"encoding": "inplace",
								"label": "address",
								"numberOfBytes": "20"
							}
						}
					},
					"userdoc": {
						"kind": "user",
						"methods": {},
						"version": 1
					}
				}
			},
			"@openzeppelin/contracts/utils/Context.sol": {
				"Context": {
					"abi": [],
					"devdoc": {
						"details": "Provides information about the current execution context, including the sender of the transaction and its data. While these are generally available via msg.sender and msg.data, they should not be accessed in such a direct manner, since when dealing with meta-transactions the account sending and paying for execution may not be the actual sender (as far as an application is concerned). This contract is only required for intermediate, library-like contracts.",
						"kind": "dev",
						"methods": {},
						"version": 1
					},
					"evm": {
						"assembly": "",
						"bytecode": {
							"linkReferences": {},
							"object": "",
							"opcodes": "",
							"sourceMap": ""
						},
						"deployedBytecode": {
							"immutableReferences": {},
							"linkReferences": {},
							"object": "",
							"opcodes": "",
							"sourceMap": ""
						},
						"gasEstimates": null,
						"legacyAssembly": null,
						"methodIdentifiers": {}
					},
					"metadata": "{\"compiler\":{\"version\":\"0.6.12+commit.27d51765\"},\"language\":\"Solidity\",\"output\":{\"abi\":[],\"devdoc\":{\"details\":\"Provides information about the current execution context, including the sender of the transaction and its data. While these are generally available via msg.sender and msg.data, they should not be accessed in such a direct manner, since when dealing with meta-transactions the account sending and paying for execution may not be the actual sender (as far as an application is concerned). This contract is only required for intermediate, library-like contracts.\",\"kind\":\"dev\",\"methods\":{},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"@openzeppelin/contracts/utils/Context.sol\":\"Context\"},\"evmVersion\":\"istanbul\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\"},\"optimizer\":{\"enabled\":true,\"runs\":200},\"remappings\":[]},\"sources\":{\"@openzeppelin/contracts/utils/Context.sol\":{\"keccak256\":\"0x7edbc679249d31c4ee2205417fc929f8bfabb9ed68eb59dfd3be1f8005bff9a6\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://5ab93b0420d7df250f88a163fdff222060623e7eae18d873165d9f5f92f74492\",\"dweb:/ipfs/QmRQZ3bP5XPRH3FFGA3iDWpYh81z2wSPBBR76frtH3kx33\"]}},\"version\":1}",
					"storageLayout": {
						"storage": [],
						"types": null
					},
					"userdoc": {
						"kind": "user",
						"methods": {},
						"version": 1
					}
				}
			},
			"@openzeppelin/contracts/utils/math/SafeMath.sol": {
				"SafeMath": {
					"abi": [],
					"devdoc": {
						"details": "Wrappers over Solidity's arithmetic operations with added overflow checks. Arithmetic operations in Solidity wrap on overflow. This can easily result in bugs, because programmers usually assume that an overflow raises an error, which is the standard behavior in high level programming languages. `SafeMath` restores this intuition by reverting the transaction when an operation overflows. Using this library instead of the unchecked operations eliminates an entire class of bugs, so it's recommended to use it always.",
						"kind": "dev",
						"methods": {},
						"version": 1
					},
					"evm": {
						"assembly": "    /* \"@openzeppelin/contracts/utils/math/SafeMath.sol\":630:7401  library SafeMath {... */\n  dataSize(sub_0)\n  dataOffset(sub_0)\n  0x0b\n  dup3\n  dup3\n  dup3\n  codecopy\n  dup1\n  mload\n  0x00\n  byte\n  0x73\n  eq\n  tag_1\n  jumpi\n  invalid\ntag_1:\n  mstore(0x00, address)\n  0x73\n  dup2\n  mstore8\n  dup3\n  dup2\n  return\nstop\n\nsub_0: assembly {\n        /* \"@openzeppelin/contracts/utils/math/SafeMath.sol\":630:7401  library SafeMath {... */\n      eq(address, deployTimeAddress())\n      mstore(0x40, 0x80)\n      0x00\n      dup1\n      revert\n\n    auxdata: 0xa2646970667358221220e29a4c2f81d95a0236af165504cd53791bfc1a980edfdde07af9b47a60c47e0964736f6c634300060c0033\n}\n",
						"bytecode": {
							"linkReferences": {},
							"object": "60566023600b82828239805160001a607314601657fe5b30600052607381538281f3fe73000000000000000000000000000000000000000030146080604052600080fdfea2646970667358221220e29a4c2f81d95a0236af165504cd53791bfc1a980edfdde07af9b47a60c47e0964736f6c634300060c0033",
							"opcodes": "PUSH1 0x56 PUSH1 0x23 PUSH1 0xB DUP3 DUP3 DUP3 CODECOPY DUP1 MLOAD PUSH1 0x0 BYTE PUSH1 0x73 EQ PUSH1 0x16 JUMPI INVALID JUMPDEST ADDRESS PUSH1 0x0 MSTORE PUSH1 0x73 DUP2 MSTORE8 DUP3 DUP2 RETURN INVALID PUSH20 0x0 ADDRESS EQ PUSH1 0x80 PUSH1 0x40 MSTORE PUSH1 0x0 DUP1 REVERT INVALID LOG2 PUSH5 0x6970667358 0x22 SLT KECCAK256 0xE2 SWAP11 0x4C 0x2F DUP2 0xD9 GAS MUL CALLDATASIZE 0xAF AND SSTORE DIV 0xCD MSTORE8 PUSH26 0x1BFC1A980EDFDDE07AF9B47A60C47E0964736F6C634300060C00 CALLER ",
							"sourceMap": "630:6771:2:-:0;;;;;;;;;;;;;;;;;;;;;;;;;"
						},
						"deployedBytecode": {
							"immutableReferences": {},
							"linkReferences": {},
							"object": "73000000000000000000000000000000000000000030146080604052600080fdfea2646970667358221220e29a4c2f81d95a0236af165504cd53791bfc1a980edfdde07af9b47a60c47e0964736f6c634300060c0033",
							"opcodes": "PUSH20 0x0 ADDRESS EQ PUSH1 0x80 PUSH1 0x40 MSTORE PUSH1 0x0 DUP1 REVERT INVALID LOG2 PUSH5 0x6970667358 0x22 SLT KECCAK256 0xE2 SWAP11 0x4C 0x2F DUP2 0xD9 GAS MUL CALLDATASIZE 0xAF AND SSTORE DIV 0xCD MSTORE8 PUSH26 0x1BFC1A980EDFDDE07AF9B47A60C47E0964736F6C634300060C00 CALLER ",
							"sourceMap": "630:6771:2:-:0;;;;;;;;"
						},
						"gasEstimates": {
							"creation": {
								"codeDepositCost": "17200",
								"executionCost": "97",
								"totalCost": "17297"
							},
							"internal": {
								"add(uint256,uint256)": "infinite",
								"ceil(uint256,uint256)": "infinite",
								"div(uint256,uint256)": "infinite",
								"div(uint256,uint256,string memory)": "infinite",
								"mod(uint256,uint256)": "infinite",
								"mod(uint256,uint256,string memory)": "infinite",
								"mul(uint256,uint256)": "infinite",
								"sub(uint256,uint256)": "infinite",
								"sub(uint256,uint256,string memory)": "infinite",
								"tryAdd(uint256,uint256)": "infinite",
								"tryDiv(uint256,uint256)": "infinite",
								"tryMod(uint256,uint256)": "infinite",
								"tryMul(uint256,uint256)": "infinite",
								"trySub(uint256,uint256)": "infinite"
							}
						},
						"legacyAssembly": {
							".code": [
								{
									"begin": 630,
									"end": 7401,
									"name": "PUSH #[$]",
									"source": 2,
									"value": "0000000000000000000000000000000000000000000000000000000000000000"
								},
								{
									"begin": 630,
									"end": 7401,
									"name": "PUSH [$]",
									"source": 2,
									"value": "0000000000000000000000000000000000000000000000000000000000000000"
								},
								{
									"begin": 630,
									"end": 7401,
									"name": "PUSH",
									"source": 2,
									"value": "B"
								},
								{
									"begin": 630,
									"end": 7401,
									"name": "DUP3",
									"source": 2
								},
								{
									"begin": 630,
									"end": 7401,
									"name": "DUP3",
									"source": 2
								},
								{
									"begin": 630,
									"end": 7401,
									"name": "DUP3",
									"source": 2
								},
								{
									"begin": 630,
									"end": 7401,
									"name": "CODECOPY",
									"source": 2
								},
								{
									"begin": 630,
									"end": 7401,
									"name": "DUP1",
									"source": 2
								},
								{
									"begin": 630,
									"end": 7401,
									"name": "MLOAD",
									"source": 2
								},
								{
									"begin": 630,
									"end": 7401,
									"name": "PUSH",
									"source": 2,
									"value": "0"
								},
								{
									"begin": 630,
									"end": 7401,
									"name": "BYTE",
									"source": 2
								},
								{
									"begin": 630,
									"end": 7401,
									"name": "PUSH",
									"source": 2,
									"value": "73"
								},
								{
									"begin": 630,
									"end": 7401,
									"name": "EQ",
									"source": 2
								},
								{
									"begin": 630,
									"end": 7401,
									"name": "PUSH [tag]",
									"source": 2,
									"value": "1"
								},
								{
									"begin": 630,
									"end": 7401,
									"name": "JUMPI",
									"source": 2
								},
								{
									"begin": 630,
									"end": 7401,
									"name": "INVALID",
									"source": 2
								},
								{
									"begin": 630,
									"end": 7401,
									"name": "tag",
									"source": 2,
									"value": "1"
								},
								{
									"begin": 630,
									"end": 7401,
									"name": "JUMPDEST",
									"source": 2
								},
								{
									"begin": 630,
									"end": 7401,
									"name": "ADDRESS",
									"source": 2
								},
								{
									"begin": 630,
									"end": 7401,
									"name": "PUSH",
									"source": 2,
									"value": "0"
								},
								{
									"begin": 630,
									"end": 7401,
									"name": "MSTORE",
									"source": 2
								},
								{
									"begin": 630,
									"end": 7401,
									"name": "PUSH",
									"source": 2,
									"value": "73"
								},
								{
									"begin": 630,
									"end": 7401,
									"name": "DUP2",
									"source": 2
								},
								{
									"begin": 630,
									"end": 7401,
									"name": "MSTORE8",
									"source": 2
								},
								{
									"begin": 630,
									"end": 7401,
									"name": "DUP3",
									"source": 2
								},
								{
									"begin": 630,
									"end": 7401,
									"name": "DUP2",
									"source": 2
								},
								{
									"begin": 630,
									"end": 7401,
									"name": "RETURN",
									"source": 2
								}
							],
							".data": {
								"0": {
									".auxdata": "a2646970667358221220e29a4c2f81d95a0236af165504cd53791bfc1a980edfdde07af9b47a60c47e0964736f6c634300060c0033",
									".code": [
										{
											"begin": 630,
											"end": 7401,
											"name": "PUSHDEPLOYADDRESS",
											"source": 2
										},
										{
											"begin": 630,
											"end": 7401,
											"name": "ADDRESS",
											"source": 2
										},
										{
											"begin": 630,
											"end": 7401,
											"name": "EQ",
											"source": 2
										},
										{
											"begin": 630,
											"end": 7401,
											"name": "PUSH",
											"source": 2,
											"value": "80"
										},
										{
											"begin": 630,
											"end": 7401,
											"name": "PUSH",
											"source": 2,
											"value": "40"
										},
										{
											"begin": 630,
											"end": 7401,
											"name": "MSTORE",
											"source": 2
										},
										{
											"begin": 630,
											"end": 7401,
											"name": "PUSH",
											"source": 2,
											"value": "0"
										},
										{
											"begin": 630,
											"end": 7401,
											"name": "DUP1",
											"source": 2
										},
										{
											"begin": 630,
											"end": 7401,
											"name": "REVERT",
											"source": 2
										}
									]
								}
							}
						},
						"methodIdentifiers": {}
					},
					"metadata": "{\"compiler\":{\"version\":\"0.6.12+commit.27d51765\"},\"language\":\"Solidity\",\"output\":{\"abi\":[],\"devdoc\":{\"details\":\"Wrappers over Solidity's arithmetic operations with added overflow checks. Arithmetic operations in Solidity wrap on overflow. This can easily result in bugs, because programmers usually assume that an overflow raises an error, which is the standard behavior in high level programming languages. `SafeMath` restores this intuition by reverting the transaction when an operation overflows. Using this library instead of the unchecked operations eliminates an entire class of bugs, so it's recommended to use it always.\",\"kind\":\"dev\",\"methods\":{},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"@openzeppelin/contracts/utils/math/SafeMath.sol\":\"SafeMath\"},\"evmVersion\":\"istanbul\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\"},\"optimizer\":{\"enabled\":true,\"runs\":200},\"remappings\":[]},\"sources\":{\"@openzeppelin/contracts/utils/math/SafeMath.sol\":{\"keccak256\":\"0xd2b581fa833d3b2ac16dde253bca297b5c9f112536ae70b06436b6299445110c\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://2c8ce112a134d2409b1320939e6eb24f33659dec4904c77e9ee0e412f76229b2\",\"dweb:/ipfs/Qmath4xcbFW6VFFJkXeMGa151ZBCipXopKrN1RTD87i8jh\"]}},\"version\":1}",
					"storageLayout": {
						"storage": [],
						"types": null
					},
					"userdoc": {
						"kind": "user",
						"methods": {},
						"version": 1
					}
				}
			},
			"contracts/owner/Operator.sol": {
				"Operator": {
					"abi": [
						{
							"anonymous": false,
							"inputs": [
								{
									"indexed": true,
									"internalType": "address",
									"name": "previousOperator",
									"type": "address"
								},
								{
									"indexed": true,
									"internalType": "address",
									"name": "newOperator",
									"type": "address"
								}
							],
							"name": "OperatorTransferred",
							"type": "event"
						},
						{
							"anonymous": false,
							"inputs": [
								{
									"indexed": true,
									"internalType": "address",
									"name": "previousOwner",
									"type": "address"
								},
								{
									"indexed": true,
									"internalType": "address",
									"name": "newOwner",
									"type": "address"
								}
							],
							"name": "OwnershipTransferred",
							"type": "event"
						},
						{
							"inputs": [],
							"name": "isOperator",
							"outputs": [
								{
									"internalType": "bool",
									"name": "",
									"type": "bool"
								}
							],
							"stateMutability": "view",
							"type": "function"
						},
						{
							"inputs": [],
							"name": "operator",
							"outputs": [
								{
									"internalType": "address",
									"name": "",
									"type": "address"
								}
							],
							"stateMutability": "view",
							"type": "function"
						},
						{
							"inputs": [],
							"name": "owner",
							"outputs": [
								{
									"internalType": "address",
									"name": "",
									"type": "address"
								}
							],
							"stateMutability": "view",
							"type": "function"
						},
						{
							"inputs": [],
							"name": "renounceOwnership",
							"outputs": [],
							"stateMutability": "nonpayable",
							"type": "function"
						},
						{
							"inputs": [
								{
									"internalType": "address",
									"name": "newOperator_",
									"type": "address"
								}
							],
							"name": "transferOperator",
							"outputs": [],
							"stateMutability": "nonpayable",
							"type": "function"
						},
						{
							"inputs": [
								{
									"internalType": "address",
									"name": "newOwner",
									"type": "address"
								}
							],
							"name": "transferOwnership",
							"outputs": [],
							"stateMutability": "nonpayable",
							"type": "function"
						}
					],
					"devdoc": {
						"kind": "dev",
						"methods": {
							"owner()": {
								"details": "Returns the address of the current owner."
							},
							"renounceOwnership()": {
								"details": "Leaves the contract without owner. It will not be possible to call `onlyOwner` functions anymore. Can only be called by the current owner. NOTE: Renouncing ownership will leave the contract without an owner, thereby removing any functionality that is only available to the owner."
							},
							"transferOwnership(address)": {
								"details": "Transfers ownership of the contract to a new account (`newOwner`). Can only be called by the current owner."
							}
						},
						"version": 1
					},
					"evm": {
						"assembly": "",
						"bytecode": {
							"linkReferences": {},
							"object": "",
							"opcodes": "",
							"sourceMap": ""
						},
						"deployedBytecode": {
							"immutableReferences": {},
							"linkReferences": {},
							"object": "",
							"opcodes": "",
							"sourceMap": ""
						},
						"gasEstimates": null,
						"legacyAssembly": null,
						"methodIdentifiers": {
							"isOperator()": "4456eda2",
							"operator()": "570ca735",
							"owner()": "8da5cb5b",
							"renounceOwnership()": "715018a6",
							"transferOperator(address)": "29605e77",
							"transferOwnership(address)": "f2fde38b"
						}
					},
					"metadata": "{\"compiler\":{\"version\":\"0.6.12+commit.27d51765\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOperator\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOperator\",\"type\":\"address\"}],\"name\":\"OperatorTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"isOperator\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"operator\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOperator_\",\"type\":\"address\"}],\"name\":\"transferOperator\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}],\"devdoc\":{\"kind\":\"dev\",\"methods\":{\"owner()\":{\"details\":\"Returns the address of the current owner.\"},\"renounceOwnership()\":{\"details\":\"Leaves the contract without owner. It will not be possible to call `onlyOwner` functions anymore. Can only be called by the current owner. NOTE: Renouncing ownership will leave the contract without an owner, thereby removing any functionality that is only available to the owner.\"},\"transferOwnership(address)\":{\"details\":\"Transfers ownership of the contract to a new account (`newOwner`). Can only be called by the current owner.\"}},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/owner/Operator.sol\":\"Operator\"},\"evmVersion\":\"istanbul\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\"},\"optimizer\":{\"enabled\":true,\"runs\":200},\"remappings\":[]},\"sources\":{\"@openzeppelin/contracts/access/Ownable.sol\":{\"keccak256\":\"0x58edc78e5f20b754362ecaac32003e6461a67019985e513c5b0f75d252a866ee\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://5c8e7676e6fdfc7b2af63e85e2190716cafc9fa6eb17a310a7c049b7176a79f9\",\"dweb:/ipfs/QmPthc9W2xTrA3QBQMQu3mqfH22WGx8eW3uKfiC5LYxZYF\"]},\"@openzeppelin/contracts/utils/Context.sol\":{\"keccak256\":\"0x7edbc679249d31c4ee2205417fc929f8bfabb9ed68eb59dfd3be1f8005bff9a6\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://5ab93b0420d7df250f88a163fdff222060623e7eae18d873165d9f5f92f74492\",\"dweb:/ipfs/QmRQZ3bP5XPRH3FFGA3iDWpYh81z2wSPBBR76frtH3kx33\"]},\"contracts/owner/Operator.sol\":{\"keccak256\":\"0x7d353d9d35813ff7fc6ec81cae80d0a0e1bb18285cf3e683fbbb227a827ab5f3\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://edc3c18720665592f22904ffa2bbc5b22afa2892e209bac0d570bbc3fe2b9300\",\"dweb:/ipfs/QmUD5Fyi7vWUqsJrcQ11SLzk9eVBcH6CSenj688QhkALpS\"]}},\"version\":1}",
					"storageLayout": {
						"storage": [
							{
								"astId": 7,
								"contract": "contracts/owner/Operator.sol:Operator",
								"label": "_owner",
								"offset": 0,
								"slot": "0",
								"type": "t_address"
							},
							{
								"astId": 528,
								"contract": "contracts/owner/Operator.sol:Operator",
								"label": "_operator",
								"offset": 0,
								"slot": "1",
								"type": "t_address"
							}
						],
						"types": {
							"t_address": {
								"encoding": "inplace",
								"label": "address",
								"numberOfBytes": "20"
							}
						}
					},
					"userdoc": {
						"kind": "user",
						"methods": {},
						"version": 1
					}
				}
			},
			"contracts/utils/Epoch.sol": {
				"Epoch": {
					"abi": [
						{
							"inputs": [
								{
									"internalType": "uint256",
									"name": "_period",
									"type": "uint256"
								},
								{
									"internalType": "uint256",
									"name": "_startTime",
									"type": "uint256"
								},
								{
									"internalType": "uint256",
									"name": "_startEpoch",
									"type": "uint256"
								}
							],
							"stateMutability": "nonpayable",
							"type": "constructor"
						},
						{
							"anonymous": false,
							"inputs": [
								{
									"indexed": true,
									"internalType": "address",
									"name": "previousOperator",
									"type": "address"
								},
								{
									"indexed": true,
									"internalType": "address",
									"name": "newOperator",
									"type": "address"
								}
							],
							"name": "OperatorTransferred",
							"type": "event"
						},
						{
							"anonymous": false,
							"inputs": [
								{
									"indexed": true,
									"internalType": "address",
									"name": "previousOwner",
									"type": "address"
								},
								{
									"indexed": true,
									"internalType": "address",
									"name": "newOwner",
									"type": "address"
								}
							],
							"name": "OwnershipTransferred",
							"type": "event"
						},
						{
							"inputs": [],
							"name": "getCurrentEpoch",
							"outputs": [
								{
									"internalType": "uint256",
									"name": "",
									"type": "uint256"
								}
							],
							"stateMutability": "view",
							"type": "function"
						},
						{
							"inputs": [],
							"name": "getLastEpochTime",
							"outputs": [
								{
									"internalType": "uint256",
									"name": "",
									"type": "uint256"
								}
							],
							"stateMutability": "view",
							"type": "function"
						},
						{
							"inputs": [],
							"name": "getPeriod",
							"outputs": [
								{
									"internalType": "uint256",
									"name": "",
									"type": "uint256"
								}
							],
							"stateMutability": "view",
							"type": "function"
						},
						{
							"inputs": [],
							"name": "getStartTime",
							"outputs": [
								{
									"internalType": "uint256",
									"name": "",
									"type": "uint256"
								}
							],
							"stateMutability": "view",
							"type": "function"
						},
						{
							"inputs": [],
							"name": "isOperator",
							"outputs": [
								{
									"internalType": "bool",
									"name": "",
									"type": "bool"
								}
							],
							"stateMutability": "view",
							"type": "function"
						},
						{
							"inputs": [],
							"name": "nextEpochPoint",
							"outputs": [
								{
									"internalType": "uint256",
									"name": "",
									"type": "uint256"
								}
							],
							"stateMutability": "view",
							"type": "function"
						},
						{
							"inputs": [],
							"name": "operator",
							"outputs": [
								{
									"internalType": "address",
									"name": "",
									"type": "address"
								}
							],
							"stateMutability": "view",
							"type": "function"
						},
						{
							"inputs": [],
							"name": "owner",
							"outputs": [
								{
									"internalType": "address",
									"name": "",
									"type": "address"
								}
							],
							"stateMutability": "view",
							"type": "function"
						},
						{
							"inputs": [],
							"name": "renounceOwnership",
							"outputs": [],
							"stateMutability": "nonpayable",
							"type": "function"
						},
						{
							"inputs": [
								{
									"internalType": "uint256",
									"name": "_epoch",
									"type": "uint256"
								}
							],
							"name": "setEpoch",
							"outputs": [],
							"stateMutability": "nonpayable",
							"type": "function"
						},
						{
							"inputs": [
								{
									"internalType": "uint256",
									"name": "_period",
									"type": "uint256"
								}
							],
							"name": "setPeriod",
							"outputs": [],
							"stateMutability": "nonpayable",
							"type": "function"
						},
						{
							"inputs": [
								{
									"internalType": "address",
									"name": "newOperator_",
									"type": "address"
								}
							],
							"name": "transferOperator",
							"outputs": [],
							"stateMutability": "nonpayable",
							"type": "function"
						},
						{
							"inputs": [
								{
									"internalType": "address",
									"name": "newOwner",
									"type": "address"
								}
							],
							"name": "transferOwnership",
							"outputs": [],
							"stateMutability": "nonpayable",
							"type": "function"
						}
					],
					"devdoc": {
						"kind": "dev",
						"methods": {
							"owner()": {
								"details": "Returns the address of the current owner."
							},
							"renounceOwnership()": {
								"details": "Leaves the contract without owner. It will not be possible to call `onlyOwner` functions anymore. Can only be called by the current owner. NOTE: Renouncing ownership will leave the contract without an owner, thereby removing any functionality that is only available to the owner."
							},
							"transferOwnership(address)": {
								"details": "Transfers ownership of the contract to a new account (`newOwner`). Can only be called by the current owner."
							}
						},
						"version": 1
					},
					"evm": {
						"assembly": "    /* \"contracts/utils/Epoch.sol\":164:2250  contract Epoch is Operator {\r... */\n  mstore(0x40, 0x80)\n    /* \"contracts/utils/Epoch.sol\":407:664  constructor(\r... */\n  callvalue\n  dup1\n  iszero\n  tag_1\n  jumpi\n  0x00\n  dup1\n  revert\ntag_1:\n  pop\n  mload(0x40)\n  sub(codesize, bytecodeSize)\n  dup1\n  bytecodeSize\n  dup4\n  codecopy\n  dup2\n  dup2\n  add\n  0x40\n  mstore\n  0x60\n  dup2\n  lt\n  iszero\n  tag_2\n  jumpi\n  0x00\n  dup1\n  revert\ntag_2:\n  pop\n  dup1\n  mload\n  0x20\n  dup3\n  add\n  mload\n  0x40\n  swap1\n  swap3\n  add\n  mload\n  swap1\n  swap2\n  swap1\n    /* \"@openzeppelin/contracts/access/Ownable.sol\":938:955  address msgSender */\n  0x00\n    /* \"@openzeppelin/contracts/access/Ownable.sol\":958:970  _msgSender() */\n  tag_7\n    /* \"@openzeppelin/contracts/access/Ownable.sol\":958:968  _msgSender */\n  tag_8\n    /* \"@openzeppelin/contracts/access/Ownable.sol\":958:970  _msgSender() */\n  jump\t// in\ntag_7:\n    /* \"@openzeppelin/contracts/access/Ownable.sol\":980:986  _owner */\n  0x00\n    /* \"@openzeppelin/contracts/access/Ownable.sol\":980:998  _owner = msgSender */\n  dup1\n  sload\n  not(sub(shl(0xa0, 0x01), 0x01))\n  and\n  sub(shl(0xa0, 0x01), 0x01)\n  dup4\n  and\n  swap1\n  dup2\n  or\n  dup3\n  sstore\n    /* \"@openzeppelin/contracts/access/Ownable.sol\":1013:1056  OwnershipTransferred(address(0), msgSender) */\n  mload(0x40)\n    /* \"@openzeppelin/contracts/access/Ownable.sol\":980:998  _owner = msgSender */\n  swap3\n  swap4\n  pop\n  swap2\n    /* \"@openzeppelin/contracts/access/Ownable.sol\":1013:1056  OwnershipTransferred(address(0), msgSender) */\n  0x8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e0\n  swap1\n    /* \"@openzeppelin/contracts/access/Ownable.sol\":980:986  _owner */\n  dup3\n  swap1\n    /* \"@openzeppelin/contracts/access/Ownable.sol\":1013:1056  OwnershipTransferred(address(0), msgSender) */\n  log3\n  pop\n    /* \"contracts/owner/Operator.sol\":435:447  _msgSender() */\n  tag_10\n    /* \"contracts/owner/Operator.sol\":435:445  _msgSender */\n  tag_8\n    /* \"contracts/owner/Operator.sol\":435:447  _msgSender() */\n  jump\t// in\ntag_10:\n    /* \"contracts/owner/Operator.sol\":423:432  _operator */\n  0x01\n    /* \"contracts/owner/Operator.sol\":423:447  _operator = _msgSender() */\n  dup1\n  sload\n  not(sub(shl(0xa0, 0x01), 0x01))\n  and\n  sub(shl(0xa0, 0x01), 0x01)\n  swap3\n  dup4\n  and\n  or\n  swap1\n  dup2\n  swap1\n  sstore\n    /* \"contracts/owner/Operator.sol\":463:505  OperatorTransferred(address(0), _operator) */\n  mload(0x40)\n    /* \"contracts/owner/Operator.sol\":495:504  _operator */\n  swap2\n  and\n  swap1\n  0x00\n  swap1\n    /* \"contracts/owner/Operator.sol\":463:505  OperatorTransferred(address(0), _operator) */\n  0x74da04524d50c64947f5dd5381ef1a4dca5cba8ed1d816243f9e48aa0b5617ed\n  swap1\n  dup3\n  swap1\n  log3\n    /* \"contracts/utils/Epoch.sol\":529:535  period */\n  0x02\n    /* \"contracts/utils/Epoch.sol\":529:545  period = _period */\n  dup4\n  swap1\n  sstore\n    /* \"contracts/utils/Epoch.sol\":556:565  startTime */\n  0x03\n    /* \"contracts/utils/Epoch.sol\":556:578  startTime = _startTime */\n  dup3\n  swap1\n  sstore\n    /* \"contracts/utils/Epoch.sol\":589:594  epoch */\n  0x05\n    /* \"contracts/utils/Epoch.sol\":589:608  epoch = _startEpoch */\n  dup2\n  swap1\n  sstore\n    /* \"contracts/utils/Epoch.sol\":635:656  startTime.sub(period) */\n  tag_12\n    /* \"contracts/utils/Epoch.sol\":556:578  startTime = _startTime */\n  dup3\n    /* \"contracts/utils/Epoch.sol\":529:545  period = _period */\n  dup5\n    /* \"contracts/utils/Epoch.sol\":635:648  startTime.sub */\n  tag_13\n  0x20\n  swap1\n  dup2\n  shl\n  tag_0_48\n  or\n    /* \"contracts/utils/Epoch.sol\":635:656  startTime.sub(period) */\n  swap1\n  shr\n  jump\t// in\ntag_12:\n    /* \"contracts/utils/Epoch.sol\":619:632  lastEpochTime */\n  0x04\n    /* \"contracts/utils/Epoch.sol\":619:656  lastEpochTime = startTime.sub(period) */\n  sstore\n  pop\n    /* \"contracts/utils/Epoch.sol\":164:2250  contract Epoch is Operator {\r... */\n  tag_14\n  swap2\n  pop\n  pop\n  jump\n    /* \"@openzeppelin/contracts/utils/Context.sol\":596:692  function _msgSender() internal view virtual returns (address) {... */\ntag_8:\n    /* \"@openzeppelin/contracts/utils/Context.sol\":675:685  msg.sender */\n  caller\n    /* \"@openzeppelin/contracts/utils/Context.sol\":596:692  function _msgSender() internal view virtual returns (address) {... */\n  swap1\n  jump\t// out\n    /* \"@openzeppelin/contracts/utils/math/SafeMath.sol\":3136:3291  function sub(uint256 a, uint256 b) internal pure returns (uint256) {... */\ntag_13:\n    /* \"@openzeppelin/contracts/utils/math/SafeMath.sol\":3194:3201  uint256 */\n  0x00\n    /* \"@openzeppelin/contracts/utils/math/SafeMath.sol\":3226:3227  a */\n  dup3\n    /* \"@openzeppelin/contracts/utils/math/SafeMath.sol\":3221:3222  b */\n  dup3\n    /* \"@openzeppelin/contracts/utils/math/SafeMath.sol\":3221:3227  b <= a */\n  gt\n  iszero\n    /* \"@openzeppelin/contracts/utils/math/SafeMath.sol\":3213:3262  require(b <= a, \"SafeMath: subtraction overflow\") */\n  tag_17\n  jumpi\n  0x40\n  dup1\n  mload\n  shl(0xe5, 0x461bcd)\n  dup2\n  mstore\n  0x20\n  0x04\n  dup3\n  add\n  mstore\n  0x1e\n  0x24\n  dup3\n  add\n  mstore\n  0x536166654d6174683a207375627472616374696f6e206f766572666c6f770000\n  0x44\n  dup3\n  add\n  mstore\n  swap1\n  mload\n  swap1\n  dup2\n  swap1\n  sub\n  0x64\n  add\n  swap1\n  revert\ntag_17:\n  pop\n    /* \"@openzeppelin/contracts/utils/math/SafeMath.sol\":3279:3284  a - b */\n  swap1\n  sub\n  swap1\n    /* \"@openzeppelin/contracts/utils/math/SafeMath.sol\":3136:3291  function sub(uint256 a, uint256 b) internal pure returns (uint256) {... */\n  jump\t// out\n    /* \"contracts/utils/Epoch.sol\":164:2250  contract Epoch is Operator {\r... */\ntag_14:\n  dataSize(sub_0)\n  dup1\n  dataOffset(sub_0)\n  0x00\n  codecopy\n  0x00\n  return\nstop\n\nsub_0: assembly {\n        /* \"contracts/utils/Epoch.sol\":164:2250  contract Epoch is Operator {\r... */\n      mstore(0x40, 0x80)\n      callvalue\n      dup1\n      iszero\n      tag_1\n      jumpi\n      0x00\n      dup1\n      revert\n    tag_1:\n      pop\n      jumpi(tag_2, lt(calldatasize, 0x04))\n      shr(0xe0, calldataload(0x00))\n      dup1\n      0x715018a6\n      gt\n      tag_16\n      jumpi\n      dup1\n      0xba522458\n      gt\n      tag_17\n      jumpi\n      dup1\n      0xba522458\n      eq\n      tag_12\n      jumpi\n      dup1\n      0xc5967c26\n      eq\n      tag_13\n      jumpi\n      dup1\n      0xc828371e\n      eq\n      tag_14\n      jumpi\n      dup1\n      0xf2fde38b\n      eq\n      tag_15\n      jumpi\n      jump(tag_2)\n    tag_17:\n      dup1\n      0x715018a6\n      eq\n      tag_9\n      jumpi\n      dup1\n      0x8da5cb5b\n      eq\n      tag_10\n      jumpi\n      dup1\n      0xb97dd9e2\n      eq\n      tag_11\n      jumpi\n      jump(tag_2)\n    tag_16:\n      dup1\n      0x0ceb2cef\n      eq\n      tag_3\n      jumpi\n      dup1\n      0x0f3a9f65\n      eq\n      tag_4\n      jumpi\n      dup1\n      0x1ed24195\n      eq\n      tag_5\n      jumpi\n      dup1\n      0x29605e77\n      eq\n      tag_6\n      jumpi\n      dup1\n      0x4456eda2\n      eq\n      tag_7\n      jumpi\n      dup1\n      0x570ca735\n      eq\n      tag_8\n      jumpi\n    tag_2:\n      0x00\n      dup1\n      revert\n        /* \"contracts/utils/Epoch.sol\":2158:2247  function setEpoch(uint256 _epoch) external onlyOperator {\r... */\n    tag_3:\n      tag_18\n      0x04\n      dup1\n      calldatasize\n      sub\n      0x20\n      dup2\n      lt\n      iszero\n      tag_19\n      jumpi\n      0x00\n      dup1\n      revert\n    tag_19:\n      pop\n      calldataload\n      tag_20\n      jump\t// in\n    tag_18:\n      stop\n        /* \"contracts/utils/Epoch.sol\":1971:2150  function setPeriod(uint256 _period) external onlyOperator {\r... */\n    tag_4:\n      tag_18\n      0x04\n      dup1\n      calldatasize\n      sub\n      0x20\n      dup2\n      lt\n      iszero\n      tag_22\n      jumpi\n      0x00\n      dup1\n      revert\n    tag_22:\n      pop\n      calldataload\n      tag_23\n      jump\t// in\n        /* \"contracts/utils/Epoch.sol\":1517:1600  function getPeriod() public view returns (uint256) {\r... */\n    tag_5:\n      tag_24\n      tag_25\n      jump\t// in\n    tag_24:\n      0x40\n      dup1\n      mload\n      swap2\n      dup3\n      mstore\n      mload\n      swap1\n      dup2\n      swap1\n      sub\n      0x20\n      add\n      swap1\n      return\n        /* \"contracts/owner/Operator.sol\":894:1009  function transferOperator(address newOperator_) public onlyOwner {\r... */\n    tag_6:\n      tag_18\n      0x04\n      dup1\n      calldatasize\n      sub\n      0x20\n      dup2\n      lt\n      iszero\n      tag_27\n      jumpi\n      0x00\n      dup1\n      revert\n    tag_27:\n      pop\n      calldataload\n      sub(shl(0xa0, 0x01), 0x01)\n      and\n      tag_28\n      jump\t// in\n        /* \"contracts/owner/Operator.sol\":786:886  function isOperator() public view returns (bool) {\r... */\n    tag_7:\n      tag_29\n      tag_30\n      jump\t// in\n    tag_29:\n      0x40\n      dup1\n      mload\n      swap2\n      iszero\n      iszero\n      dup3\n      mstore\n      mload\n      swap1\n      dup2\n      swap1\n      sub\n      0x20\n      add\n      swap1\n      return\n        /* \"contracts/owner/Operator.sol\":521:606  function operator() public view returns (address) {\r... */\n    tag_8:\n      tag_31\n      tag_32\n      jump\t// in\n    tag_31:\n      0x40\n      dup1\n      mload\n      sub(shl(0xa0, 0x01), 0x01)\n      swap1\n      swap3\n      and\n      dup3\n      mstore\n      mload\n      swap1\n      dup2\n      swap1\n      sub\n      0x20\n      add\n      swap1\n      return\n        /* \"@openzeppelin/contracts/access/Ownable.sol\":1771:1916  function renounceOwnership() public virtual onlyOwner {... */\n    tag_9:\n      tag_18\n      tag_34\n      jump\t// in\n        /* \"@openzeppelin/contracts/access/Ownable.sol\":1139:1224  function owner() public view virtual returns (address) {... */\n    tag_10:\n      tag_31\n      tag_36\n      jump\t// in\n        /* \"contracts/utils/Epoch.sol\":1421:1509  function getCurrentEpoch() public view returns (uint256) {\r... */\n    tag_11:\n      tag_24\n      tag_38\n      jump\t// in\n        /* \"contracts/utils/Epoch.sol\":1705:1802  function getLastEpochTime() public view returns (uint256) {\r... */\n    tag_12:\n      tag_24\n      tag_40\n      jump\t// in\n        /* \"contracts/utils/Epoch.sol\":1810:1917  function nextEpochPoint() public view returns (uint256) {\r... */\n    tag_13:\n      tag_24\n      tag_42\n      jump\t// in\n        /* \"contracts/utils/Epoch.sol\":1608:1697  function getStartTime() public view returns (uint256) {\r... */\n    tag_14:\n      tag_24\n      tag_44\n      jump\t// in\n        /* \"@openzeppelin/contracts/access/Ownable.sol\":2065:2305  function transferOwnership(address newOwner) public virtual onlyOwner {... */\n    tag_15:\n      tag_18\n      0x04\n      dup1\n      calldatasize\n      sub\n      0x20\n      dup2\n      lt\n      iszero\n      tag_46\n      jumpi\n      0x00\n      dup1\n      revert\n    tag_46:\n      pop\n      calldataload\n      sub(shl(0xa0, 0x01), 0x01)\n      and\n      tag_47\n      jump\t// in\n        /* \"contracts/utils/Epoch.sol\":2158:2247  function setEpoch(uint256 _epoch) external onlyOperator {\r... */\n    tag_20:\n        /* \"contracts/owner/Operator.sol\":671:680  _operator */\n      and(sub(shl(0xa0, 0x01), 0x01), sload(0x01))\n        /* \"contracts/owner/Operator.sol\":684:694  msg.sender */\n      caller\n        /* \"contracts/owner/Operator.sol\":671:694  _operator == msg.sender */\n      eq\n        /* \"contracts/owner/Operator.sol\":649:758  require(\r... */\n      tag_50\n      jumpi\n      mload(0x40)\n      shl(0xe5, 0x461bcd)\n      dup2\n      mstore\n      0x04\n      add\n      dup1\n      dup1\n      0x20\n      add\n      dup3\n      dup2\n      sub\n      dup3\n      mstore\n      0x24\n      dup2\n      mstore\n      0x20\n      add\n      dup1\n      data_a62bfdba5053072911b63b0f6325b0e83fcd28b5a847d97efdd966feb4daaafb\n      0x24\n      swap2\n      codecopy\n      0x40\n      add\n      swap2\n      pop\n      pop\n      mload(0x40)\n      dup1\n      swap2\n      sub\n      swap1\n      revert\n    tag_50:\n        /* \"contracts/utils/Epoch.sol\":2225:2230  epoch */\n      0x05\n        /* \"contracts/utils/Epoch.sol\":2225:2239  epoch = _epoch */\n      sstore\n        /* \"contracts/utils/Epoch.sol\":2158:2247  function setEpoch(uint256 _epoch) external onlyOperator {\r... */\n      jump\t// out\n        /* \"contracts/utils/Epoch.sol\":1971:2150  function setPeriod(uint256 _period) external onlyOperator {\r... */\n    tag_23:\n        /* \"contracts/owner/Operator.sol\":671:680  _operator */\n      and(sub(shl(0xa0, 0x01), 0x01), sload(0x01))\n        /* \"contracts/owner/Operator.sol\":684:694  msg.sender */\n      caller\n        /* \"contracts/owner/Operator.sol\":671:694  _operator == msg.sender */\n      eq\n        /* \"contracts/owner/Operator.sol\":649:758  require(\r... */\n      tag_53\n      jumpi\n      mload(0x40)\n      shl(0xe5, 0x461bcd)\n      dup2\n      mstore\n      0x04\n      add\n      dup1\n      dup1\n      0x20\n      add\n      dup3\n      dup2\n      sub\n      dup3\n      mstore\n      0x24\n      dup2\n      mstore\n      0x20\n      add\n      dup1\n      data_a62bfdba5053072911b63b0f6325b0e83fcd28b5a847d97efdd966feb4daaafb\n      0x24\n      swap2\n      codecopy\n      0x40\n      add\n      swap2\n      pop\n      pop\n      mload(0x40)\n      dup1\n      swap2\n      sub\n      swap1\n      revert\n    tag_53:\n        /* \"contracts/utils/Epoch.sol\":2059:2066  1 hours */\n      0x0e10\n        /* \"contracts/utils/Epoch.sol\":2048:2055  _period */\n      dup2\n        /* \"contracts/utils/Epoch.sol\":2048:2066  _period >= 1 hours */\n      lt\n      iszero\n        /* \"contracts/utils/Epoch.sol\":2048:2089  _period >= 1 hours && _period <= 48 hours */\n      dup1\n      iszero\n      tag_55\n      jumpi\n      pop\n        /* \"contracts/utils/Epoch.sol\":2081:2089  48 hours */\n      0x02a300\n        /* \"contracts/utils/Epoch.sol\":2070:2077  _period */\n      dup2\n        /* \"contracts/utils/Epoch.sol\":2070:2089  _period <= 48 hours */\n      gt\n      iszero\n        /* \"contracts/utils/Epoch.sol\":2048:2089  _period >= 1 hours && _period <= 48 hours */\n    tag_55:\n        /* \"contracts/utils/Epoch.sol\":2040:2115  require(_period >= 1 hours && _period <= 48 hours, '_period: out of range') */\n      tag_56\n      jumpi\n      0x40\n      dup1\n      mload\n      shl(0xe5, 0x461bcd)\n      dup2\n      mstore\n      0x20\n      0x04\n      dup3\n      add\n      mstore\n      0x15\n      0x24\n      dup3\n      add\n      mstore\n      shl(0x58, 0x5f706572696f643a206f7574206f662072616e6765)\n      0x44\n      dup3\n      add\n      mstore\n      swap1\n      mload\n      swap1\n      dup2\n      swap1\n      sub\n      0x64\n      add\n      swap1\n      revert\n    tag_56:\n        /* \"contracts/utils/Epoch.sol\":2126:2132  period */\n      0x02\n        /* \"contracts/utils/Epoch.sol\":2126:2142  period = _period */\n      sstore\n        /* \"contracts/utils/Epoch.sol\":1971:2150  function setPeriod(uint256 _period) external onlyOperator {\r... */\n      jump\t// out\n        /* \"contracts/utils/Epoch.sol\":1517:1600  function getPeriod() public view returns (uint256) {\r... */\n    tag_25:\n        /* \"contracts/utils/Epoch.sol\":1586:1592  period */\n      sload(0x02)\n        /* \"contracts/utils/Epoch.sol\":1517:1600  function getPeriod() public view returns (uint256) {\r... */\n      swap1\n      jump\t// out\n        /* \"contracts/owner/Operator.sol\":894:1009  function transferOperator(address newOperator_) public onlyOwner {\r... */\n    tag_28:\n        /* \"@openzeppelin/contracts/access/Ownable.sol\":1362:1374  _msgSender() */\n      tag_59\n        /* \"@openzeppelin/contracts/access/Ownable.sol\":1362:1372  _msgSender */\n      tag_60\n        /* \"@openzeppelin/contracts/access/Ownable.sol\":1362:1374  _msgSender() */\n      jump\t// in\n    tag_59:\n      sub(shl(0xa0, 0x01), 0x01)\n        /* \"@openzeppelin/contracts/access/Ownable.sol\":1351:1374  owner() == _msgSender() */\n      and\n        /* \"@openzeppelin/contracts/access/Ownable.sol\":1351:1358  owner() */\n      tag_61\n        /* \"@openzeppelin/contracts/access/Ownable.sol\":1351:1356  owner */\n      tag_36\n        /* \"@openzeppelin/contracts/access/Ownable.sol\":1351:1358  owner() */\n      jump\t// in\n    tag_61:\n      sub(shl(0xa0, 0x01), 0x01)\n        /* \"@openzeppelin/contracts/access/Ownable.sol\":1351:1374  owner() == _msgSender() */\n      and\n      eq\n        /* \"@openzeppelin/contracts/access/Ownable.sol\":1343:1411  require(owner() == _msgSender(), \"Ownable: caller is not the owner\") */\n      tag_62\n      jumpi\n      0x40\n      dup1\n      mload\n      shl(0xe5, 0x461bcd)\n      dup2\n      mstore\n      0x20\n      0x04\n      dup3\n      add\n      dup2\n      swap1\n      mstore\n      0x24\n      dup3\n      add\n      mstore\n      0x4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e6572\n      0x44\n      dup3\n      add\n      mstore\n      swap1\n      mload\n      swap1\n      dup2\n      swap1\n      sub\n      0x64\n      add\n      swap1\n      revert\n    tag_62:\n        /* \"contracts/owner/Operator.sol\":970:1001  _transferOperator(newOperator_) */\n      tag_64\n        /* \"contracts/owner/Operator.sol\":988:1000  newOperator_ */\n      dup2\n        /* \"contracts/owner/Operator.sol\":970:987  _transferOperator */\n      tag_65\n        /* \"contracts/owner/Operator.sol\":970:1001  _transferOperator(newOperator_) */\n      jump\t// in\n    tag_64:\n        /* \"contracts/owner/Operator.sol\":894:1009  function transferOperator(address newOperator_) public onlyOwner {\r... */\n      pop\n      jump\t// out\n        /* \"contracts/owner/Operator.sol\":786:886  function isOperator() public view returns (bool) {\r... */\n    tag_30:\n        /* \"contracts/owner/Operator.sol\":869:878  _operator */\n      sload(0x01)\n        /* \"contracts/owner/Operator.sol\":829:833  bool */\n      0x00\n      swap1\n      sub(shl(0xa0, 0x01), 0x01)\n        /* \"contracts/owner/Operator.sol\":869:878  _operator */\n      and\n        /* \"contracts/owner/Operator.sol\":853:865  _msgSender() */\n      tag_67\n        /* \"contracts/owner/Operator.sol\":853:863  _msgSender */\n      tag_60\n        /* \"contracts/owner/Operator.sol\":853:865  _msgSender() */\n      jump\t// in\n    tag_67:\n      sub(shl(0xa0, 0x01), 0x01)\n        /* \"contracts/owner/Operator.sol\":853:878  _msgSender() == _operator */\n      and\n      eq\n        /* \"contracts/owner/Operator.sol\":846:878  return _msgSender() == _operator */\n      swap1\n      pop\n        /* \"contracts/owner/Operator.sol\":786:886  function isOperator() public view returns (bool) {\r... */\n      swap1\n      jump\t// out\n        /* \"contracts/owner/Operator.sol\":521:606  function operator() public view returns (address) {\r... */\n    tag_32:\n        /* \"contracts/owner/Operator.sol\":589:598  _operator */\n      and(sub(shl(0xa0, 0x01), 0x01), sload(0x01))\n        /* \"contracts/owner/Operator.sol\":521:606  function operator() public view returns (address) {\r... */\n      swap1\n      jump\t// out\n        /* \"@openzeppelin/contracts/access/Ownable.sol\":1771:1916  function renounceOwnership() public virtual onlyOwner {... */\n    tag_34:\n        /* \"@openzeppelin/contracts/access/Ownable.sol\":1362:1374  _msgSender() */\n      tag_70\n        /* \"@openzeppelin/contracts/access/Ownable.sol\":1362:1372  _msgSender */\n      tag_60\n        /* \"@openzeppelin/contracts/access/Ownable.sol\":1362:1374  _msgSender() */\n      jump\t// in\n    tag_70:\n      sub(shl(0xa0, 0x01), 0x01)\n        /* \"@openzeppelin/contracts/access/Ownable.sol\":1351:1374  owner() == _msgSender() */\n      and\n        /* \"@openzeppelin/contracts/access/Ownable.sol\":1351:1358  owner() */\n      tag_71\n        /* \"@openzeppelin/contracts/access/Ownable.sol\":1351:1356  owner */\n      tag_36\n        /* \"@openzeppelin/contracts/access/Ownable.sol\":1351:1358  owner() */\n      jump\t// in\n    tag_71:\n      sub(shl(0xa0, 0x01), 0x01)\n        /* \"@openzeppelin/contracts/access/Ownable.sol\":1351:1374  owner() == _msgSender() */\n      and\n      eq\n        /* \"@openzeppelin/contracts/access/Ownable.sol\":1343:1411  require(owner() == _msgSender(), \"Ownable: caller is not the owner\") */\n      tag_72\n      jumpi\n      0x40\n      dup1\n      mload\n      shl(0xe5, 0x461bcd)\n      dup2\n      mstore\n      0x20\n      0x04\n      dup3\n      add\n      dup2\n      swap1\n      mstore\n      0x24\n      dup3\n      add\n      mstore\n      0x4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e6572\n      0x44\n      dup3\n      add\n      mstore\n      swap1\n      mload\n      swap1\n      dup2\n      swap1\n      sub\n      0x64\n      add\n      swap1\n      revert\n    tag_72:\n        /* \"@openzeppelin/contracts/access/Ownable.sol\":1877:1878  0 */\n      0x00\n        /* \"@openzeppelin/contracts/access/Ownable.sol\":1861:1867  _owner */\n      dup1\n      sload\n        /* \"@openzeppelin/contracts/access/Ownable.sol\":1840:1880  OwnershipTransferred(_owner, address(0)) */\n      mload(0x40)\n      sub(shl(0xa0, 0x01), 0x01)\n        /* \"@openzeppelin/contracts/access/Ownable.sol\":1861:1867  _owner */\n      swap1\n      swap2\n      and\n      swap1\n        /* \"@openzeppelin/contracts/access/Ownable.sol\":1840:1880  OwnershipTransferred(_owner, address(0)) */\n      0x8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e0\n      swap1\n        /* \"@openzeppelin/contracts/access/Ownable.sol\":1877:1878  0 */\n      dup4\n      swap1\n        /* \"@openzeppelin/contracts/access/Ownable.sol\":1840:1880  OwnershipTransferred(_owner, address(0)) */\n      log3\n        /* \"@openzeppelin/contracts/access/Ownable.sol\":1907:1908  0 */\n      0x00\n        /* \"@openzeppelin/contracts/access/Ownable.sol\":1890:1909  _owner = address(0) */\n      dup1\n      sload\n      not(sub(shl(0xa0, 0x01), 0x01))\n      and\n      swap1\n      sstore\n        /* \"@openzeppelin/contracts/access/Ownable.sol\":1771:1916  function renounceOwnership() public virtual onlyOwner {... */\n      jump\t// out\n        /* \"@openzeppelin/contracts/access/Ownable.sol\":1139:1224  function owner() public view virtual returns (address) {... */\n    tag_36:\n        /* \"@openzeppelin/contracts/access/Ownable.sol\":1185:1192  address */\n      0x00\n        /* \"@openzeppelin/contracts/access/Ownable.sol\":1211:1217  _owner */\n      sload\n      sub(shl(0xa0, 0x01), 0x01)\n      and\n        /* \"@openzeppelin/contracts/access/Ownable.sol\":1139:1224  function owner() public view virtual returns (address) {... */\n      swap1\n      jump\t// out\n        /* \"contracts/utils/Epoch.sol\":1421:1509  function getCurrentEpoch() public view returns (uint256) {\r... */\n    tag_38:\n        /* \"contracts/utils/Epoch.sol\":1496:1501  epoch */\n      sload(0x05)\n        /* \"contracts/utils/Epoch.sol\":1421:1509  function getCurrentEpoch() public view returns (uint256) {\r... */\n      swap1\n      jump\t// out\n        /* \"contracts/utils/Epoch.sol\":1705:1802  function getLastEpochTime() public view returns (uint256) {\r... */\n    tag_40:\n        /* \"contracts/utils/Epoch.sol\":1781:1794  lastEpochTime */\n      sload(0x04)\n        /* \"contracts/utils/Epoch.sol\":1705:1802  function getLastEpochTime() public view returns (uint256) {\r... */\n      swap1\n      jump\t// out\n        /* \"contracts/utils/Epoch.sol\":1810:1917  function nextEpochPoint() public view returns (uint256) {\r... */\n    tag_42:\n        /* \"contracts/utils/Epoch.sol\":1857:1864  uint256 */\n      0x00\n        /* \"contracts/utils/Epoch.sol\":1884:1909  lastEpochTime.add(period) */\n      tag_78\n        /* \"contracts/utils/Epoch.sol\":1902:1908  period */\n      sload(0x02)\n        /* \"contracts/utils/Epoch.sol\":1884:1897  lastEpochTime */\n      sload(0x04)\n        /* \"contracts/utils/Epoch.sol\":1884:1901  lastEpochTime.add */\n      tag_79\n      swap1\n        /* \"contracts/utils/Epoch.sol\":1884:1909  lastEpochTime.add(period) */\n      swap2\n      swap1\n      0xffffffff\n      and\n      jump\t// in\n    tag_78:\n        /* \"contracts/utils/Epoch.sol\":1877:1909  return lastEpochTime.add(period) */\n      swap1\n      pop\n        /* \"contracts/utils/Epoch.sol\":1810:1917  function nextEpochPoint() public view returns (uint256) {\r... */\n      swap1\n      jump\t// out\n        /* \"contracts/utils/Epoch.sol\":1608:1697  function getStartTime() public view returns (uint256) {\r... */\n    tag_44:\n        /* \"contracts/utils/Epoch.sol\":1680:1689  startTime */\n      sload(0x03)\n        /* \"contracts/utils/Epoch.sol\":1608:1697  function getStartTime() public view returns (uint256) {\r... */\n      swap1\n      jump\t// out\n        /* \"@openzeppelin/contracts/access/Ownable.sol\":2065:2305  function transferOwnership(address newOwner) public virtual onlyOwner {... */\n    tag_47:\n        /* \"@openzeppelin/contracts/access/Ownable.sol\":1362:1374  _msgSender() */\n      tag_82\n        /* \"@openzeppelin/contracts/access/Ownable.sol\":1362:1372  _msgSender */\n      tag_60\n        /* \"@openzeppelin/contracts/access/Ownable.sol\":1362:1374  _msgSender() */\n      jump\t// in\n    tag_82:\n      sub(shl(0xa0, 0x01), 0x01)\n        /* \"@openzeppelin/contracts/access/Ownable.sol\":1351:1374  owner() == _msgSender() */\n      and\n        /* \"@openzeppelin/contracts/access/Ownable.sol\":1351:1358  owner() */\n      tag_83\n        /* \"@openzeppelin/contracts/access/Ownable.sol\":1351:1356  owner */\n      tag_36\n        /* \"@openzeppelin/contracts/access/Ownable.sol\":1351:1358  owner() */\n      jump\t// in\n    tag_83:\n      sub(shl(0xa0, 0x01), 0x01)\n        /* \"@openzeppelin/contracts/access/Ownable.sol\":1351:1374  owner() == _msgSender() */\n      and\n      eq\n        /* \"@openzeppelin/contracts/access/Ownable.sol\":1343:1411  require(owner() == _msgSender(), \"Ownable: caller is not the owner\") */\n      tag_84\n      jumpi\n      0x40\n      dup1\n      mload\n      shl(0xe5, 0x461bcd)\n      dup2\n      mstore\n      0x20\n      0x04\n      dup3\n      add\n      dup2\n      swap1\n      mstore\n      0x24\n      dup3\n      add\n      mstore\n      0x4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e6572\n      0x44\n      dup3\n      add\n      mstore\n      swap1\n      mload\n      swap1\n      dup2\n      swap1\n      sub\n      0x64\n      add\n      swap1\n      revert\n    tag_84:\n      sub(shl(0xa0, 0x01), 0x01)\n        /* \"@openzeppelin/contracts/access/Ownable.sol\":2153:2175  newOwner != address(0) */\n      dup2\n      and\n        /* \"@openzeppelin/contracts/access/Ownable.sol\":2145:2218  require(newOwner != address(0), \"Ownable: new owner is the zero address\") */\n      tag_86\n      jumpi\n      mload(0x40)\n      shl(0xe5, 0x461bcd)\n      dup2\n      mstore\n      0x04\n      add\n      dup1\n      dup1\n      0x20\n      add\n      dup3\n      dup2\n      sub\n      dup3\n      mstore\n      0x26\n      dup2\n      mstore\n      0x20\n      add\n      dup1\n      data_245f15ff17f551913a7a18385165551503906a406f905ac1c2437281a7cd0cfe\n      0x26\n      swap2\n      codecopy\n      0x40\n      add\n      swap2\n      pop\n      pop\n      mload(0x40)\n      dup1\n      swap2\n      sub\n      swap1\n      revert\n    tag_86:\n        /* \"@openzeppelin/contracts/access/Ownable.sol\":2254:2260  _owner */\n      0x00\n      dup1\n      sload\n        /* \"@openzeppelin/contracts/access/Ownable.sol\":2233:2271  OwnershipTransferred(_owner, newOwner) */\n      mload(0x40)\n      sub(shl(0xa0, 0x01), 0x01)\n      dup1\n      dup6\n      and\n      swap4\n        /* \"@openzeppelin/contracts/access/Ownable.sol\":2254:2260  _owner */\n      swap3\n      and\n      swap2\n        /* \"@openzeppelin/contracts/access/Ownable.sol\":2233:2271  OwnershipTransferred(_owner, newOwner) */\n      0x8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e0\n      swap2\n      log3\n        /* \"@openzeppelin/contracts/access/Ownable.sol\":2281:2287  _owner */\n      0x00\n        /* \"@openzeppelin/contracts/access/Ownable.sol\":2281:2298  _owner = newOwner */\n      dup1\n      sload\n      not(sub(shl(0xa0, 0x01), 0x01))\n      and\n      sub(shl(0xa0, 0x01), 0x01)\n      swap3\n      swap1\n      swap3\n      and\n      swap2\n      swap1\n      swap2\n      or\n      swap1\n      sstore\n        /* \"@openzeppelin/contracts/access/Ownable.sol\":2065:2305  function transferOwnership(address newOwner) public virtual onlyOwner {... */\n      jump\t// out\n        /* \"@openzeppelin/contracts/utils/math/SafeMath.sol\":3136:3291  function sub(uint256 a, uint256 b) internal pure returns (uint256) {... */\n    tag_48:\n        /* \"@openzeppelin/contracts/utils/math/SafeMath.sol\":3194:3201  uint256 */\n      0x00\n        /* \"@openzeppelin/contracts/utils/math/SafeMath.sol\":3226:3227  a */\n      dup3\n        /* \"@openzeppelin/contracts/utils/math/SafeMath.sol\":3221:3222  b */\n      dup3\n        /* \"@openzeppelin/contracts/utils/math/SafeMath.sol\":3221:3227  b <= a */\n      gt\n      iszero\n        /* \"@openzeppelin/contracts/utils/math/SafeMath.sol\":3213:3262  require(b <= a, \"SafeMath: subtraction overflow\") */\n      tag_88\n      jumpi\n      0x40\n      dup1\n      mload\n      shl(0xe5, 0x461bcd)\n      dup2\n      mstore\n      0x20\n      0x04\n      dup3\n      add\n      mstore\n      0x1e\n      0x24\n      dup3\n      add\n      mstore\n      0x536166654d6174683a207375627472616374696f6e206f766572666c6f770000\n      0x44\n      dup3\n      add\n      mstore\n      swap1\n      mload\n      swap1\n      dup2\n      swap1\n      sub\n      0x64\n      add\n      swap1\n      revert\n    tag_88:\n      pop\n        /* \"@openzeppelin/contracts/utils/math/SafeMath.sol\":3279:3284  a - b */\n      swap1\n      sub\n      swap1\n        /* \"@openzeppelin/contracts/utils/math/SafeMath.sol\":3136:3291  function sub(uint256 a, uint256 b) internal pure returns (uint256) {... */\n      jump\t// out\n        /* \"@openzeppelin/contracts/utils/Context.sol\":596:692  function _msgSender() internal view virtual returns (address) {... */\n    tag_60:\n        /* \"@openzeppelin/contracts/utils/Context.sol\":675:685  msg.sender */\n      caller\n        /* \"@openzeppelin/contracts/utils/Context.sol\":596:692  function _msgSender() internal view virtual returns (address) {... */\n      swap1\n      jump\t// out\n        /* \"contracts/owner/Operator.sol\":1017:1361  function _transferOperator(address newOperator_) internal {\r... */\n    tag_65:\n      sub(shl(0xa0, 0x01), 0x01)\n        /* \"contracts/owner/Operator.sol\":1108:1134  newOperator_ != address(0) */\n      dup2\n      and\n        /* \"contracts/owner/Operator.sol\":1086:1207  require(\r... */\n      tag_91\n      jumpi\n      mload(0x40)\n      shl(0xe5, 0x461bcd)\n      dup2\n      mstore\n      0x04\n      add\n      dup1\n      dup1\n      0x20\n      add\n      dup3\n      dup2\n      sub\n      dup3\n      mstore\n      0x2d\n      dup2\n      mstore\n      0x20\n      add\n      dup1\n      data_756508c1c0554725dd91ce0028667672a5318d736a5e4bcd98b6bc8fe98c3dc7\n      0x2d\n      swap2\n      codecopy\n      0x40\n      add\n      swap2\n      pop\n      pop\n      mload(0x40)\n      dup1\n      swap2\n      sub\n      swap1\n      revert\n    tag_91:\n        /* \"contracts/owner/Operator.sol\":1223:1268  OperatorTransferred(address(0), newOperator_) */\n      mload(0x40)\n      sub(shl(0xa0, 0x01), 0x01)\n      dup3\n      and\n      swap1\n        /* \"contracts/owner/Operator.sol\":1251:1252  0 */\n      0x00\n      swap1\n        /* \"contracts/owner/Operator.sol\":1223:1268  OperatorTransferred(address(0), newOperator_) */\n      0x74da04524d50c64947f5dd5381ef1a4dca5cba8ed1d816243f9e48aa0b5617ed\n      swap1\n        /* \"contracts/owner/Operator.sol\":1251:1252  0 */\n      dup3\n      swap1\n        /* \"contracts/owner/Operator.sol\":1223:1268  OperatorTransferred(address(0), newOperator_) */\n      log3\n        /* \"contracts/owner/Operator.sol\":1279:1318  Ownable.transferOwnership(newOperator_) */\n      tag_92\n        /* \"contracts/owner/Operator.sol\":1305:1317  newOperator_ */\n      dup2\n        /* \"contracts/owner/Operator.sol\":1279:1304  Ownable.transferOwnership */\n      tag_47\n        /* \"contracts/owner/Operator.sol\":1279:1318  Ownable.transferOwnership(newOperator_) */\n      jump\t// in\n    tag_92:\n        /* \"contracts/owner/Operator.sol\":1329:1338  _operator */\n      0x01\n        /* \"contracts/owner/Operator.sol\":1329:1353  _operator = newOperator_ */\n      dup1\n      sload\n      not(sub(shl(0xa0, 0x01), 0x01))\n      and\n      sub(shl(0xa0, 0x01), 0x01)\n      swap3\n      swap1\n      swap3\n      and\n      swap2\n      swap1\n      swap2\n      or\n      swap1\n      sstore\n        /* \"contracts/owner/Operator.sol\":1017:1361  function _transferOperator(address newOperator_) internal {\r... */\n      jump\t// out\n        /* \"@openzeppelin/contracts/utils/math/SafeMath.sol\":2690:2865  function add(uint256 a, uint256 b) internal pure returns (uint256) {... */\n    tag_79:\n        /* \"@openzeppelin/contracts/utils/math/SafeMath.sol\":2748:2755  uint256 */\n      0x00\n        /* \"@openzeppelin/contracts/utils/math/SafeMath.sol\":2779:2784  a + b */\n      dup3\n      dup3\n      add\n        /* \"@openzeppelin/contracts/utils/math/SafeMath.sol\":2802:2808  c >= a */\n      dup4\n      dup2\n      lt\n      iszero\n        /* \"@openzeppelin/contracts/utils/math/SafeMath.sol\":2794:2840  require(c >= a, \"SafeMath: addition overflow\") */\n      tag_94\n      jumpi\n      0x40\n      dup1\n      mload\n      shl(0xe5, 0x461bcd)\n      dup2\n      mstore\n      0x20\n      0x04\n      dup3\n      add\n      mstore\n      0x1b\n      0x24\n      dup3\n      add\n      mstore\n      0x536166654d6174683a206164646974696f6e206f766572666c6f770000000000\n      0x44\n      dup3\n      add\n      mstore\n      swap1\n      mload\n      swap1\n      dup2\n      swap1\n      sub\n      0x64\n      add\n      swap1\n      revert\n    tag_94:\n        /* \"@openzeppelin/contracts/utils/math/SafeMath.sol\":2857:2858  c */\n      swap4\n        /* \"@openzeppelin/contracts/utils/math/SafeMath.sol\":2690:2865  function add(uint256 a, uint256 b) internal pure returns (uint256) {... */\n      swap3\n      pop\n      pop\n      pop\n      jump\t// out\n    stop\n    data_245f15ff17f551913a7a18385165551503906a406f905ac1c2437281a7cd0cfe 4f776e61626c653a206e6577206f776e657220697320746865207a65726f2061646472657373\n    data_756508c1c0554725dd91ce0028667672a5318d736a5e4bcd98b6bc8fe98c3dc7 6f70657261746f723a207a65726f206164647265737320676976656e20666f72206e6577206f70657261746f72\n    data_a62bfdba5053072911b63b0f6325b0e83fcd28b5a847d97efdd966feb4daaafb 6f70657261746f723a2063616c6c6572206973206e6f7420746865206f70657261746f72\n\n    auxdata: 0xa264697066735822122007f73a6c8ee5bf991d9fa5d5c701b7f1aa9b09aabad4ab10cbdb09897c7f2d1864736f6c634300060c0033\n}\n",
						"bytecode": {
							"linkReferences": {},
							"object": "608060405234801561001057600080fd5b5060405161094d38038061094d8339818101604052606081101561003357600080fd5b5080516020820151604090920151909190600061004e61011c565b600080546001600160a01b0319166001600160a01b0383169081178255604051929350917f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e0908290a3506100a061011c565b600180546001600160a01b0319166001600160a01b0392831617908190556040519116906000907f74da04524d50c64947f5dd5381ef1a4dca5cba8ed1d816243f9e48aa0b5617ed908290a36002839055600382905560058190556101108284610120602090811b6105ac17901c565b6004555061017d915050565b3390565b600082821115610177576040805162461bcd60e51b815260206004820152601e60248201527f536166654d6174683a207375627472616374696f6e206f766572666c6f770000604482015290519081900360640190fd5b50900390565b6107c18061018c6000396000f3fe608060405234801561001057600080fd5b50600436106100cf5760003560e01c8063715018a61161008c578063ba52245811610066578063ba522458146101a8578063c5967c26146101b0578063c828371e146101b8578063f2fde38b146101c0576100cf565b8063715018a6146101905780638da5cb5b14610198578063b97dd9e2146101a0576100cf565b80630ceb2cef146100d45780630f3a9f65146100f35780631ed241951461011057806329605e771461012a5780634456eda214610150578063570ca7351461016c575b600080fd5b6100f1600480360360208110156100ea57600080fd5b50356101e6565b005b6100f16004803603602081101561010957600080fd5b5035610234565b6101186102e0565b60408051918252519081900360200190f35b6100f16004803603602081101561014057600080fd5b50356001600160a01b03166102e6565b610158610366565b604080519115158252519081900360200190f35b61017461038c565b604080516001600160a01b039092168252519081900360200190f35b6100f161039b565b610174610459565b610118610468565b61011861046e565b610118610474565b610118610492565b6100f1600480360360208110156101d657600080fd5b50356001600160a01b0316610498565b6001546001600160a01b0316331461022f5760405162461bcd60e51b81526004018080602001828103825260248152602001806107686024913960400191505060405180910390fd5b600555565b6001546001600160a01b0316331461027d5760405162461bcd60e51b81526004018080602001828103825260248152602001806107686024913960400191505060405180910390fd5b610e10811015801561029257506202a3008111155b6102db576040805162461bcd60e51b81526020600482015260156024820152745f706572696f643a206f7574206f662072616e676560581b604482015290519081900360640190fd5b600255565b60025490565b6102ee610609565b6001600160a01b03166102ff610459565b6001600160a01b03161461035a576040805162461bcd60e51b815260206004820181905260248201527f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e6572604482015290519081900360640190fd5b6103638161060d565b50565b6001546000906001600160a01b031661037d610609565b6001600160a01b031614905090565b6001546001600160a01b031690565b6103a3610609565b6001600160a01b03166103b4610459565b6001600160a01b03161461040f576040805162461bcd60e51b815260206004820181905260248201527f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e6572604482015290519081900360640190fd5b600080546040516001600160a01b03909116907f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e0908390a3600080546001600160a01b0319169055565b6000546001600160a01b031690565b60055490565b60045490565b600061048d6002546004546106b390919063ffffffff16565b905090565b60035490565b6104a0610609565b6001600160a01b03166104b1610459565b6001600160a01b03161461050c576040805162461bcd60e51b815260206004820181905260248201527f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e6572604482015290519081900360640190fd5b6001600160a01b0381166105515760405162461bcd60e51b81526004018080602001828103825260268152602001806107156026913960400191505060405180910390fd5b600080546040516001600160a01b03808516939216917f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e091a3600080546001600160a01b0319166001600160a01b0392909216919091179055565b600082821115610603576040805162461bcd60e51b815260206004820152601e60248201527f536166654d6174683a207375627472616374696f6e206f766572666c6f770000604482015290519081900360640190fd5b50900390565b3390565b6001600160a01b0381166106525760405162461bcd60e51b815260040180806020018281038252602d81526020018061073b602d913960400191505060405180910390fd5b6040516001600160a01b038216906000907f74da04524d50c64947f5dd5381ef1a4dca5cba8ed1d816243f9e48aa0b5617ed908290a361069181610498565b600180546001600160a01b0319166001600160a01b0392909216919091179055565b60008282018381101561070d576040805162461bcd60e51b815260206004820152601b60248201527f536166654d6174683a206164646974696f6e206f766572666c6f770000000000604482015290519081900360640190fd5b939250505056fe4f776e61626c653a206e6577206f776e657220697320746865207a65726f20616464726573736f70657261746f723a207a65726f206164647265737320676976656e20666f72206e6577206f70657261746f726f70657261746f723a2063616c6c6572206973206e6f7420746865206f70657261746f72a264697066735822122007f73a6c8ee5bf991d9fa5d5c701b7f1aa9b09aabad4ab10cbdb09897c7f2d1864736f6c634300060c0033",
							"opcodes": "PUSH1 0x80 PUSH1 0x40 MSTORE CALLVALUE DUP1 ISZERO PUSH2 0x10 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH1 0x40 MLOAD PUSH2 0x94D CODESIZE SUB DUP1 PUSH2 0x94D DUP4 CODECOPY DUP2 DUP2 ADD PUSH1 0x40 MSTORE PUSH1 0x60 DUP2 LT ISZERO PUSH2 0x33 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP DUP1 MLOAD PUSH1 0x20 DUP3 ADD MLOAD PUSH1 0x40 SWAP1 SWAP3 ADD MLOAD SWAP1 SWAP2 SWAP1 PUSH1 0x0 PUSH2 0x4E PUSH2 0x11C JUMP JUMPDEST PUSH1 0x0 DUP1 SLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB NOT AND PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP4 AND SWAP1 DUP2 OR DUP3 SSTORE PUSH1 0x40 MLOAD SWAP3 SWAP4 POP SWAP2 PUSH32 0x8BE0079C531659141344CD1FD0A4F28419497F9722A3DAAFE3B4186F6B6457E0 SWAP1 DUP3 SWAP1 LOG3 POP PUSH2 0xA0 PUSH2 0x11C JUMP JUMPDEST PUSH1 0x1 DUP1 SLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB NOT AND PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB SWAP3 DUP4 AND OR SWAP1 DUP2 SWAP1 SSTORE PUSH1 0x40 MLOAD SWAP2 AND SWAP1 PUSH1 0x0 SWAP1 PUSH32 0x74DA04524D50C64947F5DD5381EF1A4DCA5CBA8ED1D816243F9E48AA0B5617ED SWAP1 DUP3 SWAP1 LOG3 PUSH1 0x2 DUP4 SWAP1 SSTORE PUSH1 0x3 DUP3 SWAP1 SSTORE PUSH1 0x5 DUP2 SWAP1 SSTORE PUSH2 0x110 DUP3 DUP5 PUSH2 0x120 PUSH1 0x20 SWAP1 DUP2 SHL PUSH2 0x5AC OR SWAP1 SHR JUMP JUMPDEST PUSH1 0x4 SSTORE POP PUSH2 0x17D SWAP2 POP POP JUMP JUMPDEST CALLER SWAP1 JUMP JUMPDEST PUSH1 0x0 DUP3 DUP3 GT ISZERO PUSH2 0x177 JUMPI PUSH1 0x40 DUP1 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x1E PUSH1 0x24 DUP3 ADD MSTORE PUSH32 0x536166654D6174683A207375627472616374696F6E206F766572666C6F770000 PUSH1 0x44 DUP3 ADD MSTORE SWAP1 MLOAD SWAP1 DUP2 SWAP1 SUB PUSH1 0x64 ADD SWAP1 REVERT JUMPDEST POP SWAP1 SUB SWAP1 JUMP JUMPDEST PUSH2 0x7C1 DUP1 PUSH2 0x18C PUSH1 0x0 CODECOPY PUSH1 0x0 RETURN INVALID PUSH1 0x80 PUSH1 0x40 MSTORE CALLVALUE DUP1 ISZERO PUSH2 0x10 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH1 0x4 CALLDATASIZE LT PUSH2 0xCF JUMPI PUSH1 0x0 CALLDATALOAD PUSH1 0xE0 SHR DUP1 PUSH4 0x715018A6 GT PUSH2 0x8C JUMPI DUP1 PUSH4 0xBA522458 GT PUSH2 0x66 JUMPI DUP1 PUSH4 0xBA522458 EQ PUSH2 0x1A8 JUMPI DUP1 PUSH4 0xC5967C26 EQ PUSH2 0x1B0 JUMPI DUP1 PUSH4 0xC828371E EQ PUSH2 0x1B8 JUMPI DUP1 PUSH4 0xF2FDE38B EQ PUSH2 0x1C0 JUMPI PUSH2 0xCF JUMP JUMPDEST DUP1 PUSH4 0x715018A6 EQ PUSH2 0x190 JUMPI DUP1 PUSH4 0x8DA5CB5B EQ PUSH2 0x198 JUMPI DUP1 PUSH4 0xB97DD9E2 EQ PUSH2 0x1A0 JUMPI PUSH2 0xCF JUMP JUMPDEST DUP1 PUSH4 0xCEB2CEF EQ PUSH2 0xD4 JUMPI DUP1 PUSH4 0xF3A9F65 EQ PUSH2 0xF3 JUMPI DUP1 PUSH4 0x1ED24195 EQ PUSH2 0x110 JUMPI DUP1 PUSH4 0x29605E77 EQ PUSH2 0x12A JUMPI DUP1 PUSH4 0x4456EDA2 EQ PUSH2 0x150 JUMPI DUP1 PUSH4 0x570CA735 EQ PUSH2 0x16C JUMPI JUMPDEST PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH2 0xF1 PUSH1 0x4 DUP1 CALLDATASIZE SUB PUSH1 0x20 DUP2 LT ISZERO PUSH2 0xEA JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP CALLDATALOAD PUSH2 0x1E6 JUMP JUMPDEST STOP JUMPDEST PUSH2 0xF1 PUSH1 0x4 DUP1 CALLDATASIZE SUB PUSH1 0x20 DUP2 LT ISZERO PUSH2 0x109 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP CALLDATALOAD PUSH2 0x234 JUMP JUMPDEST PUSH2 0x118 PUSH2 0x2E0 JUMP JUMPDEST PUSH1 0x40 DUP1 MLOAD SWAP2 DUP3 MSTORE MLOAD SWAP1 DUP2 SWAP1 SUB PUSH1 0x20 ADD SWAP1 RETURN JUMPDEST PUSH2 0xF1 PUSH1 0x4 DUP1 CALLDATASIZE SUB PUSH1 0x20 DUP2 LT ISZERO PUSH2 0x140 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP CALLDATALOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND PUSH2 0x2E6 JUMP JUMPDEST PUSH2 0x158 PUSH2 0x366 JUMP JUMPDEST PUSH1 0x40 DUP1 MLOAD SWAP2 ISZERO ISZERO DUP3 MSTORE MLOAD SWAP1 DUP2 SWAP1 SUB PUSH1 0x20 ADD SWAP1 RETURN JUMPDEST PUSH2 0x174 PUSH2 0x38C JUMP JUMPDEST PUSH1 0x40 DUP1 MLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB SWAP1 SWAP3 AND DUP3 MSTORE MLOAD SWAP1 DUP2 SWAP1 SUB PUSH1 0x20 ADD SWAP1 RETURN JUMPDEST PUSH2 0xF1 PUSH2 0x39B JUMP JUMPDEST PUSH2 0x174 PUSH2 0x459 JUMP JUMPDEST PUSH2 0x118 PUSH2 0x468 JUMP JUMPDEST PUSH2 0x118 PUSH2 0x46E JUMP JUMPDEST PUSH2 0x118 PUSH2 0x474 JUMP JUMPDEST PUSH2 0x118 PUSH2 0x492 JUMP JUMPDEST PUSH2 0xF1 PUSH1 0x4 DUP1 CALLDATASIZE SUB PUSH1 0x20 DUP2 LT ISZERO PUSH2 0x1D6 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP CALLDATALOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND PUSH2 0x498 JUMP JUMPDEST PUSH1 0x1 SLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND CALLER EQ PUSH2 0x22F JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x4 ADD DUP1 DUP1 PUSH1 0x20 ADD DUP3 DUP2 SUB DUP3 MSTORE PUSH1 0x24 DUP2 MSTORE PUSH1 0x20 ADD DUP1 PUSH2 0x768 PUSH1 0x24 SWAP2 CODECOPY PUSH1 0x40 ADD SWAP2 POP POP PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST PUSH1 0x5 SSTORE JUMP JUMPDEST PUSH1 0x1 SLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND CALLER EQ PUSH2 0x27D JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x4 ADD DUP1 DUP1 PUSH1 0x20 ADD DUP3 DUP2 SUB DUP3 MSTORE PUSH1 0x24 DUP2 MSTORE PUSH1 0x20 ADD DUP1 PUSH2 0x768 PUSH1 0x24 SWAP2 CODECOPY PUSH1 0x40 ADD SWAP2 POP POP PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST PUSH2 0xE10 DUP2 LT ISZERO DUP1 ISZERO PUSH2 0x292 JUMPI POP PUSH3 0x2A300 DUP2 GT ISZERO JUMPDEST PUSH2 0x2DB JUMPI PUSH1 0x40 DUP1 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x15 PUSH1 0x24 DUP3 ADD MSTORE PUSH21 0x5F706572696F643A206F7574206F662072616E6765 PUSH1 0x58 SHL PUSH1 0x44 DUP3 ADD MSTORE SWAP1 MLOAD SWAP1 DUP2 SWAP1 SUB PUSH1 0x64 ADD SWAP1 REVERT JUMPDEST PUSH1 0x2 SSTORE JUMP JUMPDEST PUSH1 0x2 SLOAD SWAP1 JUMP JUMPDEST PUSH2 0x2EE PUSH2 0x609 JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND PUSH2 0x2FF PUSH2 0x459 JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND EQ PUSH2 0x35A JUMPI PUSH1 0x40 DUP1 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD DUP2 SWAP1 MSTORE PUSH1 0x24 DUP3 ADD MSTORE PUSH32 0x4F776E61626C653A2063616C6C6572206973206E6F7420746865206F776E6572 PUSH1 0x44 DUP3 ADD MSTORE SWAP1 MLOAD SWAP1 DUP2 SWAP1 SUB PUSH1 0x64 ADD SWAP1 REVERT JUMPDEST PUSH2 0x363 DUP2 PUSH2 0x60D JUMP JUMPDEST POP JUMP JUMPDEST PUSH1 0x1 SLOAD PUSH1 0x0 SWAP1 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND PUSH2 0x37D PUSH2 0x609 JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND EQ SWAP1 POP SWAP1 JUMP JUMPDEST PUSH1 0x1 SLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND SWAP1 JUMP JUMPDEST PUSH2 0x3A3 PUSH2 0x609 JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND PUSH2 0x3B4 PUSH2 0x459 JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND EQ PUSH2 0x40F JUMPI PUSH1 0x40 DUP1 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD DUP2 SWAP1 MSTORE PUSH1 0x24 DUP3 ADD MSTORE PUSH32 0x4F776E61626C653A2063616C6C6572206973206E6F7420746865206F776E6572 PUSH1 0x44 DUP3 ADD MSTORE SWAP1 MLOAD SWAP1 DUP2 SWAP1 SUB PUSH1 0x64 ADD SWAP1 REVERT JUMPDEST PUSH1 0x0 DUP1 SLOAD PUSH1 0x40 MLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB SWAP1 SWAP2 AND SWAP1 PUSH32 0x8BE0079C531659141344CD1FD0A4F28419497F9722A3DAAFE3B4186F6B6457E0 SWAP1 DUP4 SWAP1 LOG3 PUSH1 0x0 DUP1 SLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB NOT AND SWAP1 SSTORE JUMP JUMPDEST PUSH1 0x0 SLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND SWAP1 JUMP JUMPDEST PUSH1 0x5 SLOAD SWAP1 JUMP JUMPDEST PUSH1 0x4 SLOAD SWAP1 JUMP JUMPDEST PUSH1 0x0 PUSH2 0x48D PUSH1 0x2 SLOAD PUSH1 0x4 SLOAD PUSH2 0x6B3 SWAP1 SWAP2 SWAP1 PUSH4 0xFFFFFFFF AND JUMP JUMPDEST SWAP1 POP SWAP1 JUMP JUMPDEST PUSH1 0x3 SLOAD SWAP1 JUMP JUMPDEST PUSH2 0x4A0 PUSH2 0x609 JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND PUSH2 0x4B1 PUSH2 0x459 JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND EQ PUSH2 0x50C JUMPI PUSH1 0x40 DUP1 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD DUP2 SWAP1 MSTORE PUSH1 0x24 DUP3 ADD MSTORE PUSH32 0x4F776E61626C653A2063616C6C6572206973206E6F7420746865206F776E6572 PUSH1 0x44 DUP3 ADD MSTORE SWAP1 MLOAD SWAP1 DUP2 SWAP1 SUB PUSH1 0x64 ADD SWAP1 REVERT JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP2 AND PUSH2 0x551 JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x4 ADD DUP1 DUP1 PUSH1 0x20 ADD DUP3 DUP2 SUB DUP3 MSTORE PUSH1 0x26 DUP2 MSTORE PUSH1 0x20 ADD DUP1 PUSH2 0x715 PUSH1 0x26 SWAP2 CODECOPY PUSH1 0x40 ADD SWAP2 POP POP PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST PUSH1 0x0 DUP1 SLOAD PUSH1 0x40 MLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP1 DUP6 AND SWAP4 SWAP3 AND SWAP2 PUSH32 0x8BE0079C531659141344CD1FD0A4F28419497F9722A3DAAFE3B4186F6B6457E0 SWAP2 LOG3 PUSH1 0x0 DUP1 SLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB NOT AND PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB SWAP3 SWAP1 SWAP3 AND SWAP2 SWAP1 SWAP2 OR SWAP1 SSTORE JUMP JUMPDEST PUSH1 0x0 DUP3 DUP3 GT ISZERO PUSH2 0x603 JUMPI PUSH1 0x40 DUP1 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x1E PUSH1 0x24 DUP3 ADD MSTORE PUSH32 0x536166654D6174683A207375627472616374696F6E206F766572666C6F770000 PUSH1 0x44 DUP3 ADD MSTORE SWAP1 MLOAD SWAP1 DUP2 SWAP1 SUB PUSH1 0x64 ADD SWAP1 REVERT JUMPDEST POP SWAP1 SUB SWAP1 JUMP JUMPDEST CALLER SWAP1 JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP2 AND PUSH2 0x652 JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x4 ADD DUP1 DUP1 PUSH1 0x20 ADD DUP3 DUP2 SUB DUP3 MSTORE PUSH1 0x2D DUP2 MSTORE PUSH1 0x20 ADD DUP1 PUSH2 0x73B PUSH1 0x2D SWAP2 CODECOPY PUSH1 0x40 ADD SWAP2 POP POP PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST PUSH1 0x40 MLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP3 AND SWAP1 PUSH1 0x0 SWAP1 PUSH32 0x74DA04524D50C64947F5DD5381EF1A4DCA5CBA8ED1D816243F9E48AA0B5617ED SWAP1 DUP3 SWAP1 LOG3 PUSH2 0x691 DUP2 PUSH2 0x498 JUMP JUMPDEST PUSH1 0x1 DUP1 SLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB NOT AND PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB SWAP3 SWAP1 SWAP3 AND SWAP2 SWAP1 SWAP2 OR SWAP1 SSTORE JUMP JUMPDEST PUSH1 0x0 DUP3 DUP3 ADD DUP4 DUP2 LT ISZERO PUSH2 0x70D JUMPI PUSH1 0x40 DUP1 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x1B PUSH1 0x24 DUP3 ADD MSTORE PUSH32 0x536166654D6174683A206164646974696F6E206F766572666C6F770000000000 PUSH1 0x44 DUP3 ADD MSTORE SWAP1 MLOAD SWAP1 DUP2 SWAP1 SUB PUSH1 0x64 ADD SWAP1 REVERT JUMPDEST SWAP4 SWAP3 POP POP POP JUMP INVALID 0x4F PUSH24 0x6E61626C653A206E6577206F776E65722069732074686520 PUSH27 0x65726F20616464726573736F70657261746F723A207A65726F2061 PUSH5 0x6472657373 KECCAK256 PUSH8 0x6976656E20666F72 KECCAK256 PUSH15 0x6577206F70657261746F726F706572 PUSH2 0x746F PUSH19 0x3A2063616C6C6572206973206E6F7420746865 KECCAK256 PUSH16 0x70657261746F72A26469706673582212 KECCAK256 SMOD 0xF7 GASPRICE PUSH13 0x8EE5BF991D9FA5D5C701B7F1AA SWAP12 MULMOD 0xAA 0xBA 0xD4 0xAB LT 0xCB 0xDB MULMOD DUP10 PUSH29 0x7F2D1864736F6C634300060C0033000000000000000000000000000000 ",
							"sourceMap": "164:2086:4:-:0;;;407:257;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;-1:-1:-1;407:257:4;;;;;;;;;;;;;;938:17:0;958:12;:10;:12::i;:::-;980:6;:18;;-1:-1:-1;;;;;;980:18:0;-1:-1:-1;;;;;980:18:0;;;;;;;1013:43;;980:18;;-1:-1:-1;980:18:0;1013:43;;980:6;;1013:43;-1:-1:-1;435:12:3;:10;:12::i;:::-;423:9;:24;;-1:-1:-1;;;;;;423:24:3;-1:-1:-1;;;;;423:24:3;;;;;;;;463:42;;495:9;;;-1:-1:-1;;463:42:3;;-1:-1:-1;;463:42:3;529:6:4;:16;;;556:9;:22;;;589:5;:19;;;635:21;556:22;529:16;635:13;;;;;;;:21;;:::i;:::-;619:13;:37;-1:-1:-1;164:2086:4;;-1:-1:-1;;164:2086:4;596:96:1;675:10;596:96;:::o;3136:155:2:-;3194:7;3226:1;3221;:6;;3213:49;;;;;-1:-1:-1;;;3213:49:2;;;;;;;;;;;;;;;;;;;;;;;;;;;;-1:-1:-1;3279:5:2;;;3136:155::o;164:2086:4:-;;;;;;;"
						},
						"deployedBytecode": {
							"immutableReferences": {},
							"linkReferences": {},
							"object": "608060405234801561001057600080fd5b50600436106100cf5760003560e01c8063715018a61161008c578063ba52245811610066578063ba522458146101a8578063c5967c26146101b0578063c828371e146101b8578063f2fde38b146101c0576100cf565b8063715018a6146101905780638da5cb5b14610198578063b97dd9e2146101a0576100cf565b80630ceb2cef146100d45780630f3a9f65146100f35780631ed241951461011057806329605e771461012a5780634456eda214610150578063570ca7351461016c575b600080fd5b6100f1600480360360208110156100ea57600080fd5b50356101e6565b005b6100f16004803603602081101561010957600080fd5b5035610234565b6101186102e0565b60408051918252519081900360200190f35b6100f16004803603602081101561014057600080fd5b50356001600160a01b03166102e6565b610158610366565b604080519115158252519081900360200190f35b61017461038c565b604080516001600160a01b039092168252519081900360200190f35b6100f161039b565b610174610459565b610118610468565b61011861046e565b610118610474565b610118610492565b6100f1600480360360208110156101d657600080fd5b50356001600160a01b0316610498565b6001546001600160a01b0316331461022f5760405162461bcd60e51b81526004018080602001828103825260248152602001806107686024913960400191505060405180910390fd5b600555565b6001546001600160a01b0316331461027d5760405162461bcd60e51b81526004018080602001828103825260248152602001806107686024913960400191505060405180910390fd5b610e10811015801561029257506202a3008111155b6102db576040805162461bcd60e51b81526020600482015260156024820152745f706572696f643a206f7574206f662072616e676560581b604482015290519081900360640190fd5b600255565b60025490565b6102ee610609565b6001600160a01b03166102ff610459565b6001600160a01b03161461035a576040805162461bcd60e51b815260206004820181905260248201527f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e6572604482015290519081900360640190fd5b6103638161060d565b50565b6001546000906001600160a01b031661037d610609565b6001600160a01b031614905090565b6001546001600160a01b031690565b6103a3610609565b6001600160a01b03166103b4610459565b6001600160a01b03161461040f576040805162461bcd60e51b815260206004820181905260248201527f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e6572604482015290519081900360640190fd5b600080546040516001600160a01b03909116907f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e0908390a3600080546001600160a01b0319169055565b6000546001600160a01b031690565b60055490565b60045490565b600061048d6002546004546106b390919063ffffffff16565b905090565b60035490565b6104a0610609565b6001600160a01b03166104b1610459565b6001600160a01b03161461050c576040805162461bcd60e51b815260206004820181905260248201527f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e6572604482015290519081900360640190fd5b6001600160a01b0381166105515760405162461bcd60e51b81526004018080602001828103825260268152602001806107156026913960400191505060405180910390fd5b600080546040516001600160a01b03808516939216917f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e091a3600080546001600160a01b0319166001600160a01b0392909216919091179055565b600082821115610603576040805162461bcd60e51b815260206004820152601e60248201527f536166654d6174683a207375627472616374696f6e206f766572666c6f770000604482015290519081900360640190fd5b50900390565b3390565b6001600160a01b0381166106525760405162461bcd60e51b815260040180806020018281038252602d81526020018061073b602d913960400191505060405180910390fd5b6040516001600160a01b038216906000907f74da04524d50c64947f5dd5381ef1a4dca5cba8ed1d816243f9e48aa0b5617ed908290a361069181610498565b600180546001600160a01b0319166001600160a01b0392909216919091179055565b60008282018381101561070d576040805162461bcd60e51b815260206004820152601b60248201527f536166654d6174683a206164646974696f6e206f766572666c6f770000000000604482015290519081900360640190fd5b939250505056fe4f776e61626c653a206e6577206f776e657220697320746865207a65726f20616464726573736f70657261746f723a207a65726f206164647265737320676976656e20666f72206e6577206f70657261746f726f70657261746f723a2063616c6c6572206973206e6f7420746865206f70657261746f72a264697066735822122007f73a6c8ee5bf991d9fa5d5c701b7f1aa9b09aabad4ab10cbdb09897c7f2d1864736f6c634300060c0033",
							"opcodes": "PUSH1 0x80 PUSH1 0x40 MSTORE CALLVALUE DUP1 ISZERO PUSH2 0x10 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH1 0x4 CALLDATASIZE LT PUSH2 0xCF JUMPI PUSH1 0x0 CALLDATALOAD PUSH1 0xE0 SHR DUP1 PUSH4 0x715018A6 GT PUSH2 0x8C JUMPI DUP1 PUSH4 0xBA522458 GT PUSH2 0x66 JUMPI DUP1 PUSH4 0xBA522458 EQ PUSH2 0x1A8 JUMPI DUP1 PUSH4 0xC5967C26 EQ PUSH2 0x1B0 JUMPI DUP1 PUSH4 0xC828371E EQ PUSH2 0x1B8 JUMPI DUP1 PUSH4 0xF2FDE38B EQ PUSH2 0x1C0 JUMPI PUSH2 0xCF JUMP JUMPDEST DUP1 PUSH4 0x715018A6 EQ PUSH2 0x190 JUMPI DUP1 PUSH4 0x8DA5CB5B EQ PUSH2 0x198 JUMPI DUP1 PUSH4 0xB97DD9E2 EQ PUSH2 0x1A0 JUMPI PUSH2 0xCF JUMP JUMPDEST DUP1 PUSH4 0xCEB2CEF EQ PUSH2 0xD4 JUMPI DUP1 PUSH4 0xF3A9F65 EQ PUSH2 0xF3 JUMPI DUP1 PUSH4 0x1ED24195 EQ PUSH2 0x110 JUMPI DUP1 PUSH4 0x29605E77 EQ PUSH2 0x12A JUMPI DUP1 PUSH4 0x4456EDA2 EQ PUSH2 0x150 JUMPI DUP1 PUSH4 0x570CA735 EQ PUSH2 0x16C JUMPI JUMPDEST PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH2 0xF1 PUSH1 0x4 DUP1 CALLDATASIZE SUB PUSH1 0x20 DUP2 LT ISZERO PUSH2 0xEA JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP CALLDATALOAD PUSH2 0x1E6 JUMP JUMPDEST STOP JUMPDEST PUSH2 0xF1 PUSH1 0x4 DUP1 CALLDATASIZE SUB PUSH1 0x20 DUP2 LT ISZERO PUSH2 0x109 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP CALLDATALOAD PUSH2 0x234 JUMP JUMPDEST PUSH2 0x118 PUSH2 0x2E0 JUMP JUMPDEST PUSH1 0x40 DUP1 MLOAD SWAP2 DUP3 MSTORE MLOAD SWAP1 DUP2 SWAP1 SUB PUSH1 0x20 ADD SWAP1 RETURN JUMPDEST PUSH2 0xF1 PUSH1 0x4 DUP1 CALLDATASIZE SUB PUSH1 0x20 DUP2 LT ISZERO PUSH2 0x140 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP CALLDATALOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND PUSH2 0x2E6 JUMP JUMPDEST PUSH2 0x158 PUSH2 0x366 JUMP JUMPDEST PUSH1 0x40 DUP1 MLOAD SWAP2 ISZERO ISZERO DUP3 MSTORE MLOAD SWAP1 DUP2 SWAP1 SUB PUSH1 0x20 ADD SWAP1 RETURN JUMPDEST PUSH2 0x174 PUSH2 0x38C JUMP JUMPDEST PUSH1 0x40 DUP1 MLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB SWAP1 SWAP3 AND DUP3 MSTORE MLOAD SWAP1 DUP2 SWAP1 SUB PUSH1 0x20 ADD SWAP1 RETURN JUMPDEST PUSH2 0xF1 PUSH2 0x39B JUMP JUMPDEST PUSH2 0x174 PUSH2 0x459 JUMP JUMPDEST PUSH2 0x118 PUSH2 0x468 JUMP JUMPDEST PUSH2 0x118 PUSH2 0x46E JUMP JUMPDEST PUSH2 0x118 PUSH2 0x474 JUMP JUMPDEST PUSH2 0x118 PUSH2 0x492 JUMP JUMPDEST PUSH2 0xF1 PUSH1 0x4 DUP1 CALLDATASIZE SUB PUSH1 0x20 DUP2 LT ISZERO PUSH2 0x1D6 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP CALLDATALOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND PUSH2 0x498 JUMP JUMPDEST PUSH1 0x1 SLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND CALLER EQ PUSH2 0x22F JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x4 ADD DUP1 DUP1 PUSH1 0x20 ADD DUP3 DUP2 SUB DUP3 MSTORE PUSH1 0x24 DUP2 MSTORE PUSH1 0x20 ADD DUP1 PUSH2 0x768 PUSH1 0x24 SWAP2 CODECOPY PUSH1 0x40 ADD SWAP2 POP POP PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST PUSH1 0x5 SSTORE JUMP JUMPDEST PUSH1 0x1 SLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND CALLER EQ PUSH2 0x27D JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x4 ADD DUP1 DUP1 PUSH1 0x20 ADD DUP3 DUP2 SUB DUP3 MSTORE PUSH1 0x24 DUP2 MSTORE PUSH1 0x20 ADD DUP1 PUSH2 0x768 PUSH1 0x24 SWAP2 CODECOPY PUSH1 0x40 ADD SWAP2 POP POP PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST PUSH2 0xE10 DUP2 LT ISZERO DUP1 ISZERO PUSH2 0x292 JUMPI POP PUSH3 0x2A300 DUP2 GT ISZERO JUMPDEST PUSH2 0x2DB JUMPI PUSH1 0x40 DUP1 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x15 PUSH1 0x24 DUP3 ADD MSTORE PUSH21 0x5F706572696F643A206F7574206F662072616E6765 PUSH1 0x58 SHL PUSH1 0x44 DUP3 ADD MSTORE SWAP1 MLOAD SWAP1 DUP2 SWAP1 SUB PUSH1 0x64 ADD SWAP1 REVERT JUMPDEST PUSH1 0x2 SSTORE JUMP JUMPDEST PUSH1 0x2 SLOAD SWAP1 JUMP JUMPDEST PUSH2 0x2EE PUSH2 0x609 JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND PUSH2 0x2FF PUSH2 0x459 JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND EQ PUSH2 0x35A JUMPI PUSH1 0x40 DUP1 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD DUP2 SWAP1 MSTORE PUSH1 0x24 DUP3 ADD MSTORE PUSH32 0x4F776E61626C653A2063616C6C6572206973206E6F7420746865206F776E6572 PUSH1 0x44 DUP3 ADD MSTORE SWAP1 MLOAD SWAP1 DUP2 SWAP1 SUB PUSH1 0x64 ADD SWAP1 REVERT JUMPDEST PUSH2 0x363 DUP2 PUSH2 0x60D JUMP JUMPDEST POP JUMP JUMPDEST PUSH1 0x1 SLOAD PUSH1 0x0 SWAP1 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND PUSH2 0x37D PUSH2 0x609 JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND EQ SWAP1 POP SWAP1 JUMP JUMPDEST PUSH1 0x1 SLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND SWAP1 JUMP JUMPDEST PUSH2 0x3A3 PUSH2 0x609 JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND PUSH2 0x3B4 PUSH2 0x459 JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND EQ PUSH2 0x40F JUMPI PUSH1 0x40 DUP1 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD DUP2 SWAP1 MSTORE PUSH1 0x24 DUP3 ADD MSTORE PUSH32 0x4F776E61626C653A2063616C6C6572206973206E6F7420746865206F776E6572 PUSH1 0x44 DUP3 ADD MSTORE SWAP1 MLOAD SWAP1 DUP2 SWAP1 SUB PUSH1 0x64 ADD SWAP1 REVERT JUMPDEST PUSH1 0x0 DUP1 SLOAD PUSH1 0x40 MLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB SWAP1 SWAP2 AND SWAP1 PUSH32 0x8BE0079C531659141344CD1FD0A4F28419497F9722A3DAAFE3B4186F6B6457E0 SWAP1 DUP4 SWAP1 LOG3 PUSH1 0x0 DUP1 SLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB NOT AND SWAP1 SSTORE JUMP JUMPDEST PUSH1 0x0 SLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND SWAP1 JUMP JUMPDEST PUSH1 0x5 SLOAD SWAP1 JUMP JUMPDEST PUSH1 0x4 SLOAD SWAP1 JUMP JUMPDEST PUSH1 0x0 PUSH2 0x48D PUSH1 0x2 SLOAD PUSH1 0x4 SLOAD PUSH2 0x6B3 SWAP1 SWAP2 SWAP1 PUSH4 0xFFFFFFFF AND JUMP JUMPDEST SWAP1 POP SWAP1 JUMP JUMPDEST PUSH1 0x3 SLOAD SWAP1 JUMP JUMPDEST PUSH2 0x4A0 PUSH2 0x609 JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND PUSH2 0x4B1 PUSH2 0x459 JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND EQ PUSH2 0x50C JUMPI PUSH1 0x40 DUP1 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD DUP2 SWAP1 MSTORE PUSH1 0x24 DUP3 ADD MSTORE PUSH32 0x4F776E61626C653A2063616C6C6572206973206E6F7420746865206F776E6572 PUSH1 0x44 DUP3 ADD MSTORE SWAP1 MLOAD SWAP1 DUP2 SWAP1 SUB PUSH1 0x64 ADD SWAP1 REVERT JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP2 AND PUSH2 0x551 JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x4 ADD DUP1 DUP1 PUSH1 0x20 ADD DUP3 DUP2 SUB DUP3 MSTORE PUSH1 0x26 DUP2 MSTORE PUSH1 0x20 ADD DUP1 PUSH2 0x715 PUSH1 0x26 SWAP2 CODECOPY PUSH1 0x40 ADD SWAP2 POP POP PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST PUSH1 0x0 DUP1 SLOAD PUSH1 0x40 MLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP1 DUP6 AND SWAP4 SWAP3 AND SWAP2 PUSH32 0x8BE0079C531659141344CD1FD0A4F28419497F9722A3DAAFE3B4186F6B6457E0 SWAP2 LOG3 PUSH1 0x0 DUP1 SLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB NOT AND PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB SWAP3 SWAP1 SWAP3 AND SWAP2 SWAP1 SWAP2 OR SWAP1 SSTORE JUMP JUMPDEST PUSH1 0x0 DUP3 DUP3 GT ISZERO PUSH2 0x603 JUMPI PUSH1 0x40 DUP1 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x1E PUSH1 0x24 DUP3 ADD MSTORE PUSH32 0x536166654D6174683A207375627472616374696F6E206F766572666C6F770000 PUSH1 0x44 DUP3 ADD MSTORE SWAP1 MLOAD SWAP1 DUP2 SWAP1 SUB PUSH1 0x64 ADD SWAP1 REVERT JUMPDEST POP SWAP1 SUB SWAP1 JUMP JUMPDEST CALLER SWAP1 JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP2 AND PUSH2 0x652 JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x4 ADD DUP1 DUP1 PUSH1 0x20 ADD DUP3 DUP2 SUB DUP3 MSTORE PUSH1 0x2D DUP2 MSTORE PUSH1 0x20 ADD DUP1 PUSH2 0x73B PUSH1 0x2D SWAP2 CODECOPY PUSH1 0x40 ADD SWAP2 POP POP PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST PUSH1 0x40 MLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP3 AND SWAP1 PUSH1 0x0 SWAP1 PUSH32 0x74DA04524D50C64947F5DD5381EF1A4DCA5CBA8ED1D816243F9E48AA0B5617ED SWAP1 DUP3 SWAP1 LOG3 PUSH2 0x691 DUP2 PUSH2 0x498 JUMP JUMPDEST PUSH1 0x1 DUP1 SLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB NOT AND PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB SWAP3 SWAP1 SWAP3 AND SWAP2 SWAP1 SWAP2 OR SWAP1 SSTORE JUMP JUMPDEST PUSH1 0x0 DUP3 DUP3 ADD DUP4 DUP2 LT ISZERO PUSH2 0x70D JUMPI PUSH1 0x40 DUP1 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x1B PUSH1 0x24 DUP3 ADD MSTORE PUSH32 0x536166654D6174683A206164646974696F6E206F766572666C6F770000000000 PUSH1 0x44 DUP3 ADD MSTORE SWAP1 MLOAD SWAP1 DUP2 SWAP1 SUB PUSH1 0x64 ADD SWAP1 REVERT JUMPDEST SWAP4 SWAP3 POP POP POP JUMP INVALID 0x4F PUSH24 0x6E61626C653A206E6577206F776E65722069732074686520 PUSH27 0x65726F20616464726573736F70657261746F723A207A65726F2061 PUSH5 0x6472657373 KECCAK256 PUSH8 0x6976656E20666F72 KECCAK256 PUSH15 0x6577206F70657261746F726F706572 PUSH2 0x746F PUSH19 0x3A2063616C6C6572206973206E6F7420746865 KECCAK256 PUSH16 0x70657261746F72A26469706673582212 KECCAK256 SMOD 0xF7 GASPRICE PUSH13 0x8EE5BF991D9FA5D5C701B7F1AA SWAP12 MULMOD 0xAA 0xBA 0xD4 0xAB LT 0xCB 0xDB MULMOD DUP10 PUSH29 0x7F2D1864736F6C634300060C0033000000000000000000000000000000 ",
							"sourceMap": "164:2086:4:-:0;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;2158:89;;;;;;;;;;;;;;;;-1:-1:-1;2158:89:4;;:::i;:::-;;1971:179;;;;;;;;;;;;;;;;-1:-1:-1;1971:179:4;;:::i;1517:83::-;;;:::i;:::-;;;;;;;;;;;;;;;;894:115:3;;;;;;;;;;;;;;;;-1:-1:-1;894:115:3;-1:-1:-1;;;;;894:115:3;;:::i;786:100::-;;;:::i;:::-;;;;;;;;;;;;;;;;;;521:85;;;:::i;:::-;;;;-1:-1:-1;;;;;521:85:3;;;;;;;;;;;;;;1771:145:0;;;:::i;1139:85::-;;;:::i;1421:88:4:-;;;:::i;1705:97::-;;;:::i;1810:107::-;;;:::i;1608:89::-;;;:::i;2065:240:0:-;;;;;;;;;;;;;;;;-1:-1:-1;2065:240:0;-1:-1:-1;;;;;2065:240:0;;:::i;2158:89:4:-;671:9:3;;-1:-1:-1;;;;;671:9:3;684:10;671:23;649:109;;;;-1:-1:-1;;;649:109:3;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;2225:5:4::1;:14:::0;2158:89::o;1971:179::-;671:9:3;;-1:-1:-1;;;;;671:9:3;684:10;671:23;649:109;;;;-1:-1:-1;;;649:109:3;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;2059:7:4::1;2048;:18;;:41;;;;;2081:8;2070:7;:19;;2048:41;2040:75;;;::::0;;-1:-1:-1;;;2040:75:4;;::::1;;::::0;::::1;::::0;::::1;::::0;;;;-1:-1:-1;;;2040:75:4;;;;;;;;;;;;;::::1;;2126:6;:16:::0;1971:179::o;1517:83::-;1586:6;;1517:83;:::o;894:115:3:-;1362:12:0;:10;:12::i;:::-;-1:-1:-1;;;;;1351:23:0;:7;:5;:7::i;:::-;-1:-1:-1;;;;;1351:23:0;;1343:68;;;;;-1:-1:-1;;;1343:68:0;;;;;;;;;;;;;;;;;;;;;;;;;;;;;970:31:3::1;988:12;970:17;:31::i;:::-;894:115:::0;:::o;786:100::-;869:9;;829:4;;-1:-1:-1;;;;;869:9:3;853:12;:10;:12::i;:::-;-1:-1:-1;;;;;853:25:3;;846:32;;786:100;:::o;521:85::-;589:9;;-1:-1:-1;;;;;589:9:3;521:85;:::o;1771:145:0:-;1362:12;:10;:12::i;:::-;-1:-1:-1;;;;;1351:23:0;:7;:5;:7::i;:::-;-1:-1:-1;;;;;1351:23:0;;1343:68;;;;;-1:-1:-1;;;1343:68:0;;;;;;;;;;;;;;;;;;;;;;;;;;;;;1877:1:::1;1861:6:::0;;1840:40:::1;::::0;-1:-1:-1;;;;;1861:6:0;;::::1;::::0;1840:40:::1;::::0;1877:1;;1840:40:::1;1907:1;1890:19:::0;;-1:-1:-1;;;;;;1890:19:0::1;::::0;;1771:145::o;1139:85::-;1185:7;1211:6;-1:-1:-1;;;;;1211:6:0;1139:85;:::o;1421:88:4:-;1496:5;;1421:88;:::o;1705:97::-;1781:13;;1705:97;:::o;1810:107::-;1857:7;1884:25;1902:6;;1884:13;;:17;;:25;;;;:::i;:::-;1877:32;;1810:107;:::o;1608:89::-;1680:9;;1608:89;:::o;2065:240:0:-;1362:12;:10;:12::i;:::-;-1:-1:-1;;;;;1351:23:0;:7;:5;:7::i;:::-;-1:-1:-1;;;;;1351:23:0;;1343:68;;;;;-1:-1:-1;;;1343:68:0;;;;;;;;;;;;;;;;;;;;;;;;;;;;;-1:-1:-1;;;;;2153:22:0;::::1;2145:73;;;;-1:-1:-1::0;;;2145:73:0::1;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;2254:6;::::0;;2233:38:::1;::::0;-1:-1:-1;;;;;2233:38:0;;::::1;::::0;2254:6;::::1;::::0;2233:38:::1;::::0;::::1;2281:6;:17:::0;;-1:-1:-1;;;;;;2281:17:0::1;-1:-1:-1::0;;;;;2281:17:0;;;::::1;::::0;;;::::1;::::0;;2065:240::o;3136:155:2:-;3194:7;3226:1;3221;:6;;3213:49;;;;;-1:-1:-1;;;3213:49:2;;;;;;;;;;;;;;;;;;;;;;;;;;;;-1:-1:-1;3279:5:2;;;3136:155::o;596:96:1:-;675:10;596:96;:::o;1017:344:3:-;-1:-1:-1;;;;;1108:26:3;;1086:121;;;;-1:-1:-1;;;1086:121:3;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;1223:45;;-1:-1:-1;;;;;1223:45:3;;;1251:1;;1223:45;;1251:1;;1223:45;1279:39;1305:12;1279:25;:39::i;:::-;1329:9;:24;;-1:-1:-1;;;;;;1329:24:3;-1:-1:-1;;;;;1329:24:3;;;;;;;;;;1017:344::o;2690:175:2:-;2748:7;2779:5;;;2802:6;;;;2794:46;;;;;-1:-1:-1;;;2794:46:2;;;;;;;;;;;;;;;;;;;;;;;;;;;;2857:1;2690:175;-1:-1:-1;;;2690:175:2:o"
						},
						"gasEstimates": {
							"creation": {
								"codeDepositCost": "397000",
								"executionCost": "infinite",
								"totalCost": "infinite"
							},
							"external": {
								"getCurrentEpoch()": "1065",
								"getLastEpochTime()": "1020",
								"getPeriod()": "1043",
								"getStartTime()": "1064",
								"isOperator()": "1172",
								"nextEpochPoint()": "infinite",
								"operator()": "1148",
								"owner()": "1082",
								"renounceOwnership()": "24278",
								"setEpoch(uint256)": "infinite",
								"setPeriod(uint256)": "infinite",
								"transferOperator(address)": "infinite",
								"transferOwnership(address)": "infinite"
							}
						},
						"legacyAssembly": {
							".code": [
								{
									"begin": 164,
									"end": 2250,
									"name": "PUSH",
									"source": 4,
									"value": "80"
								},
								{
									"begin": 164,
									"end": 2250,
									"name": "PUSH",
									"source": 4,
									"value": "40"
								},
								{
									"begin": 164,
									"end": 2250,
									"name": "MSTORE",
									"source": 4
								},
								{
									"begin": 407,
									"end": 664,
									"name": "CALLVALUE",
									"source": 4
								},
								{
									"begin": 407,
									"end": 664,
									"name": "DUP1",
									"source": 4
								},
								{
									"begin": 407,
									"end": 664,
									"name": "ISZERO",
									"source": 4
								},
								{
									"begin": 407,
									"end": 664,
									"name": "PUSH [tag]",
									"source": 4,
									"value": "1"
								},
								{
									"begin": 407,
									"end": 664,
									"name": "JUMPI",
									"source": 4
								},
								{
									"begin": 407,
									"end": 664,
									"name": "PUSH",
									"source": 4,
									"value": "0"
								},
								{
									"begin": 407,
									"end": 664,
									"name": "DUP1",
									"source": 4
								},
								{
									"begin": 407,
									"end": 664,
									"name": "REVERT",
									"source": 4
								},
								{
									"begin": 407,
									"end": 664,
									"name": "tag",
									"source": 4,
									"value": "1"
								},
								{
									"begin": 407,
									"end": 664,
									"name": "JUMPDEST",
									"source": 4
								},
								{
									"begin": 407,
									"end": 664,
									"name": "POP",
									"source": 4
								},
								{
									"begin": 407,
									"end": 664,
									"name": "PUSH",
									"source": 4,
									"value": "40"
								},
								{
									"begin": 407,
									"end": 664,
									"name": "MLOAD",
									"source": 4
								},
								{
									"begin": 407,
									"end": 664,
									"name": "PUSHSIZE",
									"source": 4
								},
								{
									"begin": 407,
									"end": 664,
									"name": "CODESIZE",
									"source": 4
								},
								{
									"begin": 407,
									"end": 664,
									"name": "SUB",
									"source": 4
								},
								{
									"begin": 407,
									"end": 664,
									"name": "DUP1",
									"source": 4
								},
								{
									"begin": 407,
									"end": 664,
									"name": "PUSHSIZE",
									"source": 4
								},
								{
									"begin": 407,
									"end": 664,
									"name": "DUP4",
									"source": 4
								},
								{
									"begin": 407,
									"end": 664,
									"name": "CODECOPY",
									"source": 4
								},
								{
									"begin": 407,
									"end": 664,
									"name": "DUP2",
									"source": 4
								},
								{
									"begin": 407,
									"end": 664,
									"name": "DUP2",
									"source": 4
								},
								{
									"begin": 407,
									"end": 664,
									"name": "ADD",
									"source": 4
								},
								{
									"begin": 407,
									"end": 664,
									"name": "PUSH",
									"source": 4,
									"value": "40"
								},
								{
									"begin": 407,
									"end": 664,
									"name": "MSTORE",
									"source": 4
								},
								{
									"begin": 407,
									"end": 664,
									"name": "PUSH",
									"source": 4,
									"value": "60"
								},
								{
									"begin": 407,
									"end": 664,
									"name": "DUP2",
									"source": 4
								},
								{
									"begin": 407,
									"end": 664,
									"name": "LT",
									"source": 4
								},
								{
									"begin": 407,
									"end": 664,
									"name": "ISZERO",
									"source": 4
								},
								{
									"begin": 407,
									"end": 664,
									"name": "PUSH [tag]",
									"source": 4,
									"value": "2"
								},
								{
									"begin": 407,
									"end": 664,
									"name": "JUMPI",
									"source": 4
								},
								{
									"begin": 407,
									"end": 664,
									"name": "PUSH",
									"source": 4,
									"value": "0"
								},
								{
									"begin": 407,
									"end": 664,
									"name": "DUP1",
									"source": 4
								},
								{
									"begin": 407,
									"end": 664,
									"name": "REVERT",
									"source": 4
								},
								{
									"begin": 407,
									"end": 664,
									"name": "tag",
									"source": 4,
									"value": "2"
								},
								{
									"begin": 407,
									"end": 664,
									"name": "JUMPDEST",
									"source": 4
								},
								{
									"begin": -1,
									"end": -1,
									"name": "POP",
									"source": -1
								},
								{
									"begin": 407,
									"end": 664,
									"name": "DUP1",
									"source": 4
								},
								{
									"begin": 407,
									"end": 664,
									"name": "MLOAD",
									"source": 4
								},
								{
									"begin": 407,
									"end": 664,
									"name": "PUSH",
									"source": 4,
									"value": "20"
								},
								{
									"begin": 407,
									"end": 664,
									"name": "DUP3",
									"source": 4
								},
								{
									"begin": 407,
									"end": 664,
									"name": "ADD",
									"source": 4
								},
								{
									"begin": 407,
									"end": 664,
									"name": "MLOAD",
									"source": 4
								},
								{
									"begin": 407,
									"end": 664,
									"name": "PUSH",
									"source": 4,
									"value": "40"
								},
								{
									"begin": 407,
									"end": 664,
									"name": "SWAP1",
									"source": 4
								},
								{
									"begin": 407,
									"end": 664,
									"name": "SWAP3",
									"source": 4
								},
								{
									"begin": 407,
									"end": 664,
									"name": "ADD",
									"source": 4
								},
								{
									"begin": 407,
									"end": 664,
									"name": "MLOAD",
									"source": 4
								},
								{
									"begin": 407,
									"end": 664,
									"name": "SWAP1",
									"source": 4
								},
								{
									"begin": 407,
									"end": 664,
									"name": "SWAP2",
									"source": 4
								},
								{
									"begin": 407,
									"end": 664,
									"name": "SWAP1",
									"source": 4
								},
								{
									"begin": 938,
									"end": 955,
									"name": "PUSH",
									"source": 0,
									"value": "0"
								},
								{
									"begin": 958,
									"end": 970,
									"name": "PUSH [tag]",
									"source": 0,
									"value": "7"
								},
								{
									"begin": 958,
									"end": 968,
									"name": "PUSH [tag]",
									"source": 0,
									"value": "8"
								},
								{
									"begin": 958,
									"end": 970,
									"name": "JUMP",
									"source": 0,
									"value": "[in]"
								},
								{
									"begin": 958,
									"end": 970,
									"name": "tag",
									"source": 0,
									"value": "7"
								},
								{
									"begin": 958,
									"end": 970,
									"name": "JUMPDEST",
									"source": 0
								},
								{
									"begin": 980,
									"end": 986,
									"name": "PUSH",
									"source": 0,
									"value": "0"
								},
								{
									"begin": 980,
									"end": 998,
									"name": "DUP1",
									"source": 0
								},
								{
									"begin": 980,
									"end": 998,
									"name": "SLOAD",
									"source": 0
								},
								{
									"begin": -1,
									"end": -1,
									"name": "PUSH",
									"source": -1,
									"value": "1"
								},
								{
									"begin": -1,
									"end": -1,
									"name": "PUSH",
									"source": -1,
									"value": "1"
								},
								{
									"begin": -1,
									"end": -1,
									"name": "PUSH",
									"source": -1,
									"value": "A0"
								},
								{
									"begin": -1,
									"end": -1,
									"name": "SHL",
									"source": -1
								},
								{
									"begin": -1,
									"end": -1,
									"name": "SUB",
									"source": -1
								},
								{
									"begin": -1,
									"end": -1,
									"name": "NOT",
									"source": -1
								},
								{
									"begin": 980,
									"end": 998,
									"name": "AND",
									"source": 0
								},
								{
									"begin": -1,
									"end": -1,
									"name": "PUSH",
									"source": -1,
									"value": "1"
								},
								{
									"begin": -1,
									"end": -1,
									"name": "PUSH",
									"source": -1,
									"value": "1"
								},
								{
									"begin": -1,
									"end": -1,
									"name": "PUSH",
									"source": -1,
									"value": "A0"
								},
								{
									"begin": -1,
									"end": -1,
									"name": "SHL",
									"source": -1
								},
								{
									"begin": -1,
									"end": -1,
									"name": "SUB",
									"source": -1
								},
								{
									"begin": 980,
									"end": 998,
									"name": "DUP4",
									"source": 0
								},
								{
									"begin": 980,
									"end": 998,
									"name": "AND",
									"source": 0
								},
								{
									"begin": 980,
									"end": 998,
									"name": "SWAP1",
									"source": 0
								},
								{
									"begin": 980,
									"end": 998,
									"name": "DUP2",
									"source": 0
								},
								{
									"begin": 980,
									"end": 998,
									"name": "OR",
									"source": 0
								},
								{
									"begin": 980,
									"end": 998,
									"name": "DUP3",
									"source": 0
								},
								{
									"begin": 980,
									"end": 998,
									"name": "SSTORE",
									"source": 0
								},
								{
									"begin": 1013,
									"end": 1056,
									"name": "PUSH",
									"source": 0,
									"value": "40"
								},
								{
									"begin": 1013,
									"end": 1056,
									"name": "MLOAD",
									"source": 0
								},
								{
									"begin": 980,
									"end": 998,
									"name": "SWAP3",
									"source": 0
								},
								{
									"begin": 980,
									"end": 998,
									"name": "SWAP4",
									"source": 0
								},
								{
									"begin": -1,
									"end": -1,
									"name": "POP",
									"source": -1
								},
								{
									"begin": 980,
									"end": 998,
									"name": "SWAP2",
									"source": 0
								},
								{
									"begin": 1013,
									"end": 1056,
									"name": "PUSH",
									"source": 0,
									"value": "8BE0079C531659141344CD1FD0A4F28419497F9722A3DAAFE3B4186F6B6457E0"
								},
								{
									"begin": 1013,
									"end": 1056,
									"name": "SWAP1",
									"source": 0
								},
								{
									"begin": 980,
									"end": 986,
									"name": "DUP3",
									"source": 0
								},
								{
									"begin": 980,
									"end": 986,
									"name": "SWAP1",
									"source": 0
								},
								{
									"begin": 1013,
									"end": 1056,
									"name": "LOG3",
									"source": 0
								},
								{
									"begin": -1,
									"end": -1,
									"name": "POP",
									"source": -1
								},
								{
									"begin": 435,
									"end": 447,
									"name": "PUSH [tag]",
									"source": 3,
									"value": "10"
								},
								{
									"begin": 435,
									"end": 445,
									"name": "PUSH [tag]",
									"source": 3,
									"value": "8"
								},
								{
									"begin": 435,
									"end": 447,
									"name": "JUMP",
									"source": 3,
									"value": "[in]"
								},
								{
									"begin": 435,
									"end": 447,
									"name": "tag",
									"source": 3,
									"value": "10"
								},
								{
									"begin": 435,
									"end": 447,
									"name": "JUMPDEST",
									"source": 3
								},
								{
									"begin": 423,
									"end": 432,
									"name": "PUSH",
									"source": 3,
									"value": "1"
								},
								{
									"begin": 423,
									"end": 447,
									"name": "DUP1",
									"source": 3
								},
								{
									"begin": 423,
									"end": 447,
									"name": "SLOAD",
									"source": 3
								},
								{
									"begin": -1,
									"end": -1,
									"name": "PUSH",
									"source": -1,
									"value": "1"
								},
								{
									"begin": -1,
									"end": -1,
									"name": "PUSH",
									"source": -1,
									"value": "1"
								},
								{
									"begin": -1,
									"end": -1,
									"name": "PUSH",
									"source": -1,
									"value": "A0"
								},
								{
									"begin": -1,
									"end": -1,
									"name": "SHL",
									"source": -1
								},
								{
									"begin": -1,
									"end": -1,
									"name": "SUB",
									"source": -1
								},
								{
									"begin": -1,
									"end": -1,
									"name": "NOT",
									"source": -1
								},
								{
									"begin": 423,
									"end": 447,
									"name": "AND",
									"source": 3
								},
								{
									"begin": -1,
									"end": -1,
									"name": "PUSH",
									"source": -1,
									"value": "1"
								},
								{
									"begin": -1,
									"end": -1,
									"name": "PUSH",
									"source": -1,
									"value": "1"
								},
								{
									"begin": -1,
									"end": -1,
									"name": "PUSH",
									"source": -1,
									"value": "A0"
								},
								{
									"begin": -1,
									"end": -1,
									"name": "SHL",
									"source": -1
								},
								{
									"begin": -1,
									"end": -1,
									"name": "SUB",
									"source": -1
								},
								{
									"begin": 423,
									"end": 447,
									"name": "SWAP3",
									"source": 3
								},
								{
									"begin": 423,
									"end": 447,
									"name": "DUP4",
									"source": 3
								},
								{
									"begin": 423,
									"end": 447,
									"name": "AND",
									"source": 3
								},
								{
									"begin": 423,
									"end": 447,
									"name": "OR",
									"source": 3
								},
								{
									"begin": 423,
									"end": 447,
									"name": "SWAP1",
									"source": 3
								},
								{
									"begin": 423,
									"end": 447,
									"name": "DUP2",
									"source": 3
								},
								{
									"begin": 423,
									"end": 447,
									"name": "SWAP1",
									"source": 3
								},
								{
									"begin": 423,
									"end": 447,
									"name": "SSTORE",
									"source": 3
								},
								{
									"begin": 463,
									"end": 505,
									"name": "PUSH",
									"source": 3,
									"value": "40"
								},
								{
									"begin": 463,
									"end": 505,
									"name": "MLOAD",
									"source": 3
								},
								{
									"begin": 495,
									"end": 504,
									"name": "SWAP2",
									"source": 3
								},
								{
									"begin": 495,
									"end": 504,
									"name": "AND",
									"source": 3
								},
								{
									"begin": 495,
									"end": 504,
									"name": "SWAP1",
									"source": 3
								},
								{
									"begin": -1,
									"end": -1,
									"name": "PUSH",
									"source": -1,
									"value": "0"
								},
								{
									"begin": -1,
									"end": -1,
									"name": "SWAP1",
									"source": -1
								},
								{
									"begin": 463,
									"end": 505,
									"name": "PUSH",
									"source": 3,
									"value": "74DA04524D50C64947F5DD5381EF1A4DCA5CBA8ED1D816243F9E48AA0B5617ED"
								},
								{
									"begin": 463,
									"end": 505,
									"name": "SWAP1",
									"source": 3
								},
								{
									"begin": -1,
									"end": -1,
									"name": "DUP3",
									"source": -1
								},
								{
									"begin": -1,
									"end": -1,
									"name": "SWAP1",
									"source": -1
								},
								{
									"begin": 463,
									"end": 505,
									"name": "LOG3",
									"source": 3
								},
								{
									"begin": 529,
									"end": 535,
									"name": "PUSH",
									"source": 4,
									"value": "2"
								},
								{
									"begin": 529,
									"end": 545,
									"name": "DUP4",
									"source": 4
								},
								{
									"begin": 529,
									"end": 545,
									"name": "SWAP1",
									"source": 4
								},
								{
									"begin": 529,
									"end": 545,
									"name": "SSTORE",
									"source": 4
								},
								{
									"begin": 556,
									"end": 565,
									"name": "PUSH",
									"source": 4,
									"value": "3"
								},
								{
									"begin": 556,
									"end": 578,
									"name": "DUP3",
									"source": 4
								},
								{
									"begin": 556,
									"end": 578,
									"name": "SWAP1",
									"source": 4
								},
								{
									"begin": 556,
									"end": 578,
									"name": "SSTORE",
									"source": 4
								},
								{
									"begin": 589,
									"end": 594,
									"name": "PUSH",
									"source": 4,
									"value": "5"
								},
								{
									"begin": 589,
									"end": 608,
									"name": "DUP2",
									"source": 4
								},
								{
									"begin": 589,
									"end": 608,
									"name": "SWAP1",
									"source": 4
								},
								{
									"begin": 589,
									"end": 608,
									"name": "SSTORE",
									"source": 4
								},
								{
									"begin": 635,
									"end": 656,
									"name": "PUSH [tag]",
									"source": 4,
									"value": "12"
								},
								{
									"begin": 556,
									"end": 578,
									"name": "DUP3",
									"source": 4
								},
								{
									"begin": 529,
									"end": 545,
									"name": "DUP5",
									"source": 4
								},
								{
									"begin": 635,
									"end": 648,
									"name": "PUSH [tag]",
									"source": 4,
									"value": "13"
								},
								{
									"begin": 635,
									"end": 648,
									"name": "PUSH",
									"source": 4,
									"value": "20"
								},
								{
									"begin": 635,
									"end": 648,
									"name": "SWAP1",
									"source": 4
								},
								{
									"begin": 635,
									"end": 648,
									"name": "DUP2",
									"source": 4
								},
								{
									"begin": 635,
									"end": 648,
									"name": "SHL",
									"source": 4
								},
								{
									"begin": 635,
									"end": 648,
									"name": "PUSH [tag]",
									"source": 4,
									"value": "18446744073709551664"
								},
								{
									"begin": 635,
									"end": 648,
									"name": "OR",
									"source": 4
								},
								{
									"begin": 635,
									"end": 656,
									"name": "SWAP1",
									"source": 4
								},
								{
									"begin": 635,
									"end": 656,
									"name": "SHR",
									"source": 4
								},
								{
									"begin": 635,
									"end": 656,
									"name": "JUMP",
									"source": 4,
									"value": "[in]"
								},
								{
									"begin": 635,
									"end": 656,
									"name": "tag",
									"source": 4,
									"value": "12"
								},
								{
									"begin": 635,
									"end": 656,
									"name": "JUMPDEST",
									"source": 4
								},
								{
									"begin": 619,
									"end": 632,
									"name": "PUSH",
									"source": 4,
									"value": "4"
								},
								{
									"begin": 619,
									"end": 656,
									"name": "SSTORE",
									"source": 4
								},
								{
									"begin": -1,
									"end": -1,
									"name": "POP",
									"source": -1
								},
								{
									"begin": 164,
									"end": 2250,
									"name": "PUSH [tag]",
									"source": 4,
									"value": "14"
								},
								{
									"begin": 164,
									"end": 2250,
									"name": "SWAP2",
									"source": 4
								},
								{
									"begin": -1,
									"end": -1,
									"name": "POP",
									"source": -1
								},
								{
									"begin": -1,
									"end": -1,
									"name": "POP",
									"source": -1
								},
								{
									"begin": 164,
									"end": 2250,
									"name": "JUMP",
									"source": 4
								},
								{
									"begin": 596,
									"end": 692,
									"name": "tag",
									"source": 1,
									"value": "8"
								},
								{
									"begin": 596,
									"end": 692,
									"name": "JUMPDEST",
									"source": 1
								},
								{
									"begin": 675,
									"end": 685,
									"name": "CALLER",
									"source": 1
								},
								{
									"begin": 596,
									"end": 692,
									"name": "SWAP1",
									"source": 1
								},
								{
									"begin": 596,
									"end": 692,
									"name": "JUMP",
									"source": 1,
									"value": "[out]"
								},
								{
									"begin": 3136,
									"end": 3291,
									"name": "tag",
									"source": 2,
									"value": "13"
								},
								{
									"begin": 3136,
									"end": 3291,
									"name": "JUMPDEST",
									"source": 2
								},
								{
									"begin": 3194,
									"end": 3201,
									"name": "PUSH",
									"source": 2,
									"value": "0"
								},
								{
									"begin": 3226,
									"end": 3227,
									"name": "DUP3",
									"source": 2
								},
								{
									"begin": 3221,
									"end": 3222,
									"name": "DUP3",
									"source": 2
								},
								{
									"begin": 3221,
									"end": 3227,
									"name": "GT",
									"source": 2
								},
								{
									"begin": 3221,
									"end": 3227,
									"name": "ISZERO",
									"source": 2
								},
								{
									"begin": 3213,
									"end": 3262,
									"name": "PUSH [tag]",
									"source": 2,
									"value": "17"
								},
								{
									"begin": 3213,
									"end": 3262,
									"name": "JUMPI",
									"source": 2
								},
								{
									"begin": 3213,
									"end": 3262,
									"name": "PUSH",
									"source": 2,
									"value": "40"
								},
								{
									"begin": 3213,
									"end": 3262,
									"name": "DUP1",
									"source": 2
								},
								{
									"begin": 3213,
									"end": 3262,
									"name": "MLOAD",
									"source": 2
								},
								{
									"begin": -1,
									"end": -1,
									"name": "PUSH",
									"source": -1,
									"value": "461BCD"
								},
								{
									"begin": -1,
									"end": -1,
									"name": "PUSH",
									"source": -1,
									"value": "E5"
								},
								{
									"begin": -1,
									"end": -1,
									"name": "SHL",
									"source": -1
								},
								{
									"begin": 3213,
									"end": 3262,
									"name": "DUP2",
									"source": 2
								},
								{
									"begin": 3213,
									"end": 3262,
									"name": "MSTORE",
									"source": 2
								},
								{
									"begin": 3213,
									"end": 3262,
									"name": "PUSH",
									"source": 2,
									"value": "20"
								},
								{
									"begin": 3213,
									"end": 3262,
									"name": "PUSH",
									"source": 2,
									"value": "4"
								},
								{
									"begin": 3213,
									"end": 3262,
									"name": "DUP3",
									"source": 2
								},
								{
									"begin": 3213,
									"end": 3262,
									"name": "ADD",
									"source": 2
								},
								{
									"begin": 3213,
									"end": 3262,
									"name": "MSTORE",
									"source": 2
								},
								{
									"begin": 3213,
									"end": 3262,
									"name": "PUSH",
									"source": 2,
									"value": "1E"
								},
								{
									"begin": 3213,
									"end": 3262,
									"name": "PUSH",
									"source": 2,
									"value": "24"
								},
								{
									"begin": 3213,
									"end": 3262,
									"name": "DUP3",
									"source": 2
								},
								{
									"begin": 3213,
									"end": 3262,
									"name": "ADD",
									"source": 2
								},
								{
									"begin": 3213,
									"end": 3262,
									"name": "MSTORE",
									"source": 2
								},
								{
									"begin": 3213,
									"end": 3262,
									"name": "PUSH",
									"source": 2,
									"value": "536166654D6174683A207375627472616374696F6E206F766572666C6F770000"
								},
								{
									"begin": 3213,
									"end": 3262,
									"name": "PUSH",
									"source": 2,
									"value": "44"
								},
								{
									"begin": 3213,
									"end": 3262,
									"name": "DUP3",
									"source": 2
								},
								{
									"begin": 3213,
									"end": 3262,
									"name": "ADD",
									"source": 2
								},
								{
									"begin": 3213,
									"end": 3262,
									"name": "MSTORE",
									"source": 2
								},
								{
									"begin": 3213,
									"end": 3262,
									"name": "SWAP1",
									"source": 2
								},
								{
									"begin": 3213,
									"end": 3262,
									"name": "MLOAD",
									"source": 2
								},
								{
									"begin": 3213,
									"end": 3262,
									"name": "SWAP1",
									"source": 2
								},
								{
									"begin": 3213,
									"end": 3262,
									"name": "DUP2",
									"source": 2
								},
								{
									"begin": 3213,
									"end": 3262,
									"name": "SWAP1",
									"source": 2
								},
								{
									"begin": 3213,
									"end": 3262,
									"name": "SUB",
									"source": 2
								},
								{
									"begin": 3213,
									"end": 3262,
									"name": "PUSH",
									"source": 2,
									"value": "64"
								},
								{
									"begin": 3213,
									"end": 3262,
									"name": "ADD",
									"source": 2
								},
								{
									"begin": 3213,
									"end": 3262,
									"name": "SWAP1",
									"source": 2
								},
								{
									"begin": 3213,
									"end": 3262,
									"name": "REVERT",
									"source": 2
								},
								{
									"begin": 3213,
									"end": 3262,
									"name": "tag",
									"source": 2,
									"value": "17"
								},
								{
									"begin": 3213,
									"end": 3262,
									"name": "JUMPDEST",
									"source": 2
								},
								{
									"begin": -1,
									"end": -1,
									"name": "POP",
									"source": -1
								},
								{
									"begin": 3279,
									"end": 3284,
									"name": "SWAP1",
									"source": 2
								},
								{
									"begin": 3279,
									"end": 3284,
									"name": "SUB",
									"source": 2
								},
								{
									"begin": 3279,
									"end": 3284,
									"name": "SWAP1",
									"source": 2
								},
								{
									"begin": 3136,
									"end": 3291,
									"name": "JUMP",
									"source": 2,
									"value": "[out]"
								},
								{
									"begin": 164,
									"end": 2250,
									"name": "tag",
									"source": 4,
									"value": "14"
								},
								{
									"begin": 164,
									"end": 2250,
									"name": "JUMPDEST",
									"source": 4
								},
								{
									"begin": 164,
									"end": 2250,
									"name": "PUSH #[$]",
									"source": 4,
									"value": "0000000000000000000000000000000000000000000000000000000000000000"
								},
								{
									"begin": 164,
									"end": 2250,
									"name": "DUP1",
									"source": 4
								},
								{
									"begin": 164,
									"end": 2250,
									"name": "PUSH [$]",
									"source": 4,
									"value": "0000000000000000000000000000000000000000000000000000000000000000"
								},
								{
									"begin": 164,
									"end": 2250,
									"name": "PUSH",
									"source": 4,
									"value": "0"
								},
								{
									"begin": 164,
									"end": 2250,
									"name": "CODECOPY",
									"source": 4
								},
								{
									"begin": 164,
									"end": 2250,
									"name": "PUSH",
									"source": 4,
									"value": "0"
								},
								{
									"begin": 164,
									"end": 2250,
									"name": "RETURN",
									"source": 4
								}
							],
							".data": {
								"0": {
									".auxdata": "a264697066735822122007f73a6c8ee5bf991d9fa5d5c701b7f1aa9b09aabad4ab10cbdb09897c7f2d1864736f6c634300060c0033",
									".code": [
										{
											"begin": 164,
											"end": 2250,
											"name": "PUSH",
											"source": 4,
											"value": "80"
										},
										{
											"begin": 164,
											"end": 2250,
											"name": "PUSH",
											"source": 4,
											"value": "40"
										},
										{
											"begin": 164,
											"end": 2250,
											"name": "MSTORE",
											"source": 4
										},
										{
											"begin": 164,
											"end": 2250,
											"name": "CALLVALUE",
											"source": 4
										},
										{
											"begin": 164,
											"end": 2250,
											"name": "DUP1",
											"source": 4
										},
										{
											"begin": 164,
											"end": 2250,
											"name": "ISZERO",
											"source": 4
										},
										{
											"begin": 164,
											"end": 2250,
											"name": "PUSH [tag]",
											"source": 4,
											"value": "1"
										},
										{
											"begin": 164,
											"end": 2250,
											"name": "JUMPI",
											"source": 4
										},
										{
											"begin": 164,
											"end": 2250,
											"name": "PUSH",
											"source": 4,
											"value": "0"
										},
										{
											"begin": 164,
											"end": 2250,
											"name": "DUP1",
											"source": 4
										},
										{
											"begin": 164,
											"end": 2250,
											"name": "REVERT",
											"source": 4
										},
										{
											"begin": 164,
											"end": 2250,
											"name": "tag",
											"source": 4,
											"value": "1"
										},
										{
											"begin": 164,
											"end": 2250,
											"name": "JUMPDEST",
											"source": 4
										},
										{
											"begin": 164,
											"end": 2250,
											"name": "POP",
											"source": 4
										},
										{
											"begin": 164,
											"end": 2250,
											"name": "PUSH",
											"source": 4,
											"value": "4"
										},
										{
											"begin": 164,
											"end": 2250,
											"name": "CALLDATASIZE",
											"source": 4
										},
										{
											"begin": 164,
											"end": 2250,
											"name": "LT",
											"source": 4
										},
										{
											"begin": 164,
											"end": 2250,
											"name": "PUSH [tag]",
											"source": 4,
											"value": "2"
										},
										{
											"begin": 164,
											"end": 2250,
											"name": "JUMPI",
											"source": 4
										},
										{
											"begin": 164,
											"end": 2250,
											"name": "PUSH",
											"source": 4,
											"value": "0"
										},
										{
											"begin": 164,
											"end": 2250,
											"name": "CALLDATALOAD",
											"source": 4
										},
										{
											"begin": 164,
											"end": 2250,
											"name": "PUSH",
											"source": 4,
											"value": "E0"
										},
										{
											"begin": 164,
											"end": 2250,
											"name": "SHR",
											"source": 4
										},
										{
											"begin": 164,
											"end": 2250,
											"name": "DUP1",
											"source": 4
										},
										{
											"begin": 164,
											"end": 2250,
											"name": "PUSH",
											"source": 4,
											"value": "715018A6"
										},
										{
											"begin": 164,
											"end": 2250,
											"name": "GT",
											"source": 4
										},
										{
											"begin": 164,
											"end": 2250,
											"name": "PUSH [tag]",
											"source": 4,
											"value": "16"
										},
										{
											"begin": 164,
											"end": 2250,
											"name": "JUMPI",
											"source": 4
										},
										{
											"begin": 164,
											"end": 2250,
											"name": "DUP1",
											"source": 4
										},
										{
											"begin": 164,
											"end": 2250,
											"name": "PUSH",
											"source": 4,
											"value": "BA522458"
										},
										{
											"begin": 164,
											"end": 2250,
											"name": "GT",
											"source": 4
										},
										{
											"begin": 164,
											"end": 2250,
											"name": "PUSH [tag]",
											"source": 4,
											"value": "17"
										},
										{
											"begin": 164,
											"end": 2250,
											"name": "JUMPI",
											"source": 4
										},
										{
											"begin": 164,
											"end": 2250,
											"name": "DUP1",
											"source": 4
										},
										{
											"begin": 164,
											"end": 2250,
											"name": "PUSH",
											"source": 4,
											"value": "BA522458"
										},
										{
											"begin": 164,
											"end": 2250,
											"name": "EQ",
											"source": 4
										},
										{
											"begin": 164,
											"end": 2250,
											"name": "PUSH [tag]",
											"source": 4,
											"value": "12"
										},
										{
											"begin": 164,
											"end": 2250,
											"name": "JUMPI",
											"source": 4
										},
										{
											"begin": 164,
											"end": 2250,
											"name": "DUP1",
											"source": 4
										},
										{
											"begin": 164,
											"end": 2250,
											"name": "PUSH",
											"source": 4,
											"value": "C5967C26"
										},
										{
											"begin": 164,
											"end": 2250,
											"name": "EQ",
											"source": 4
										},
										{
											"begin": 164,
											"end": 2250,
											"name": "PUSH [tag]",
											"source": 4,
											"value": "13"
										},
										{
											"begin": 164,
											"end": 2250,
											"name": "JUMPI",
											"source": 4
										},
										{
											"begin": 164,
											"end": 2250,
											"name": "DUP1",
											"source": 4
										},
										{
											"begin": 164,
											"end": 2250,
											"name": "PUSH",
											"source": 4,
											"value": "C828371E"
										},
										{
											"begin": 164,
											"end": 2250,
											"name": "EQ",
											"source": 4
										},
										{
											"begin": 164,
											"end": 2250,
											"name": "PUSH [tag]",
											"source": 4,
											"value": "14"
										},
										{
											"begin": 164,
											"end": 2250,
											"name": "JUMPI",
											"source": 4
										},
										{
											"begin": 164,
											"end": 2250,
											"name": "DUP1",
											"source": 4
										},
										{
											"begin": 164,
											"end": 2250,
											"name": "PUSH",
											"source": 4,
											"value": "F2FDE38B"
										},
										{
											"begin": 164,
											"end": 2250,
											"name": "EQ",
											"source": 4
										},
										{
											"begin": 164,
											"end": 2250,
											"name": "PUSH [tag]",
											"source": 4,
											"value": "15"
										},
										{
											"begin": 164,
											"end": 2250,
											"name": "JUMPI",
											"source": 4
										},
										{
											"begin": 164,
											"end": 2250,
											"name": "PUSH [tag]",
											"source": 4,
											"value": "2"
										},
										{
											"begin": 164,
											"end": 2250,
											"name": "JUMP",
											"source": 4
										},
										{
											"begin": 164,
											"end": 2250,
											"name": "tag",
											"source": 4,
											"value": "17"
										},
										{
											"begin": 164,
											"end": 2250,
											"name": "JUMPDEST",
											"source": 4
										},
										{
											"begin": 164,
											"end": 2250,
											"name": "DUP1",
											"source": 4
										},
										{
											"begin": 164,
											"end": 2250,
											"name": "PUSH",
											"source": 4,
											"value": "715018A6"
										},
										{
											"begin": 164,
											"end": 2250,
											"name": "EQ",
											"source": 4
										},
										{
											"begin": 164,
											"end": 2250,
											"name": "PUSH [tag]",
											"source": 4,
											"value": "9"
										},
										{
											"begin": 164,
											"end": 2250,
											"name": "JUMPI",
											"source": 4
										},
										{
											"begin": 164,
											"end": 2250,
											"name": "DUP1",
											"source": 4
										},
										{
											"begin": 164,
											"end": 2250,
											"name": "PUSH",
											"source": 4,
											"value": "8DA5CB5B"
										},
										{
											"begin": 164,
											"end": 2250,
											"name": "EQ",
											"source": 4
										},
										{
											"begin": 164,
											"end": 2250,
											"name": "PUSH [tag]",
											"source": 4,
											"value": "10"
										},
										{
											"begin": 164,
											"end": 2250,
											"name": "JUMPI",
											"source": 4
										},
										{
											"begin": 164,
											"end": 2250,
											"name": "DUP1",
											"source": 4
										},
										{
											"begin": 164,
											"end": 2250,
											"name": "PUSH",
											"source": 4,
											"value": "B97DD9E2"
										},
										{
											"begin": 164,
											"end": 2250,
											"name": "EQ",
											"source": 4
										},
										{
											"begin": 164,
											"end": 2250,
											"name": "PUSH [tag]",
											"source": 4,
											"value": "11"
										},
										{
											"begin": 164,
											"end": 2250,
											"name": "JUMPI",
											"source": 4
										},
										{
											"begin": 164,
											"end": 2250,
											"name": "PUSH [tag]",
											"source": 4,
											"value": "2"
										},
										{
											"begin": 164,
											"end": 2250,
											"name": "JUMP",
											"source": 4
										},
										{
											"begin": 164,
											"end": 2250,
											"name": "tag",
											"source": 4,
											"value": "16"
										},
										{
											"begin": 164,
											"end": 2250,
											"name": "JUMPDEST",
											"source": 4
										},
										{
											"begin": 164,
											"end": 2250,
											"name": "DUP1",
											"source": 4
										},
										{
											"begin": 164,
											"end": 2250,
											"name": "PUSH",
											"source": 4,
											"value": "CEB2CEF"
										},
										{
											"begin": 164,
											"end": 2250,
											"name": "EQ",
											"source": 4
										},
										{
											"begin": 164,
											"end": 2250,
											"name": "PUSH [tag]",
											"source": 4,
											"value": "3"
										},
										{
											"begin": 164,
											"end": 2250,
											"name": "JUMPI",
											"source": 4
										},
										{
											"begin": 164,
											"end": 2250,
											"name": "DUP1",
											"source": 4
										},
										{
											"begin": 164,
											"end": 2250,
											"name": "PUSH",
											"source": 4,
											"value": "F3A9F65"
										},
										{
											"begin": 164,
											"end": 2250,
											"name": "EQ",
											"source": 4
										},
										{
											"begin": 164,
											"end": 2250,
											"name": "PUSH [tag]",
											"source": 4,
											"value": "4"
										},
										{
											"begin": 164,
											"end": 2250,
											"name": "JUMPI",
											"source": 4
										},
										{
											"begin": 164,
											"end": 2250,
											"name": "DUP1",
											"source": 4
										},
										{
											"begin": 164,
											"end": 2250,
											"name": "PUSH",
											"source": 4,
											"value": "1ED24195"
										},
										{
											"begin": 164,
											"end": 2250,
											"name": "EQ",
											"source": 4
										},
										{
											"begin": 164,
											"end": 2250,
											"name": "PUSH [tag]",
											"source": 4,
											"value": "5"
										},
										{
											"begin": 164,
											"end": 2250,
											"name": "JUMPI",
											"source": 4
										},
										{
											"begin": 164,
											"end": 2250,
											"name": "DUP1",
											"source": 4
										},
										{
											"begin": 164,
											"end": 2250,
											"name": "PUSH",
											"source": 4,
											"value": "29605E77"
										},
										{
											"begin": 164,
											"end": 2250,
											"name": "EQ",
											"source": 4
										},
										{
											"begin": 164,
											"end": 2250,
											"name": "PUSH [tag]",
											"source": 4,
											"value": "6"
										},
										{
											"begin": 164,
											"end": 2250,
											"name": "JUMPI",
											"source": 4
										},
										{
											"begin": 164,
											"end": 2250,
											"name": "DUP1",
											"source": 4
										},
										{
											"begin": 164,
											"end": 2250,
											"name": "PUSH",
											"source": 4,
											"value": "4456EDA2"
										},
										{
											"begin": 164,
											"end": 2250,
											"name": "EQ",
											"source": 4
										},
										{
											"begin": 164,
											"end": 2250,
											"name": "PUSH [tag]",
											"source": 4,
											"value": "7"
										},
										{
											"begin": 164,
											"end": 2250,
											"name": "JUMPI",
											"source": 4
										},
										{
											"begin": 164,
											"end": 2250,
											"name": "DUP1",
											"source": 4
										},
										{
											"begin": 164,
											"end": 2250,
											"name": "PUSH",
											"source": 4,
											"value": "570CA735"
										},
										{
											"begin": 164,
											"end": 2250,
											"name": "EQ",
											"source": 4
										},
										{
											"begin": 164,
											"end": 2250,
											"name": "PUSH [tag]",
											"source": 4,
											"value": "8"
										},
										{
											"begin": 164,
											"end": 2250,
											"name": "JUMPI",
											"source": 4
										},
										{
											"begin": 164,
											"end": 2250,
											"name": "tag",
											"source": 4,
											"value": "2"
										},
										{
											"begin": 164,
											"end": 2250,
											"name": "JUMPDEST",
											"source": 4
										},
										{
											"begin": 164,
											"end": 2250,
											"name": "PUSH",
											"source": 4,
											"value": "0"
										},
										{
											"begin": 164,
											"end": 2250,
											"name": "DUP1",
											"source": 4
										},
										{
											"begin": 164,
											"end": 2250,
											"name": "REVERT",
											"source": 4
										},
										{
											"begin": 2158,
											"end": 2247,
											"name": "tag",
											"source": 4,
											"value": "3"
										},
										{
											"begin": 2158,
											"end": 2247,
											"name": "JUMPDEST",
											"source": 4
										},
										{
											"begin": 2158,
											"end": 2247,
											"name": "PUSH [tag]",
											"source": 4,
											"value": "18"
										},
										{
											"begin": 2158,
											"end": 2247,
											"name": "PUSH",
											"source": 4,
											"value": "4"
										},
										{
											"begin": 2158,
											"end": 2247,
											"name": "DUP1",
											"source": 4
										},
										{
											"begin": 2158,
											"end": 2247,
											"name": "CALLDATASIZE",
											"source": 4
										},
										{
											"begin": 2158,
											"end": 2247,
											"name": "SUB",
											"source": 4
										},
										{
											"begin": 2158,
											"end": 2247,
											"name": "PUSH",
											"source": 4,
											"value": "20"
										},
										{
											"begin": 2158,
											"end": 2247,
											"name": "DUP2",
											"source": 4
										},
										{
											"begin": 2158,
											"end": 2247,
											"name": "LT",
											"source": 4
										},
										{
											"begin": 2158,
											"end": 2247,
											"name": "ISZERO",
											"source": 4
										},
										{
											"begin": 2158,
											"end": 2247,
											"name": "PUSH [tag]",
											"source": 4,
											"value": "19"
										},
										{
											"begin": 2158,
											"end": 2247,
											"name": "JUMPI",
											"source": 4
										},
										{
											"begin": 2158,
											"end": 2247,
											"name": "PUSH",
											"source": 4,
											"value": "0"
										},
										{
											"begin": 2158,
											"end": 2247,
											"name": "DUP1",
											"source": 4
										},
										{
											"begin": 2158,
											"end": 2247,
											"name": "REVERT",
											"source": 4
										},
										{
											"begin": 2158,
											"end": 2247,
											"name": "tag",
											"source": 4,
											"value": "19"
										},
										{
											"begin": 2158,
											"end": 2247,
											"name": "JUMPDEST",
											"source": 4
										},
										{
											"begin": -1,
											"end": -1,
											"name": "POP",
											"source": -1
										},
										{
											"begin": 2158,
											"end": 2247,
											"name": "CALLDATALOAD",
											"source": 4
										},
										{
											"begin": 2158,
											"end": 2247,
											"name": "PUSH [tag]",
											"source": 4,
											"value": "20"
										},
										{
											"begin": 2158,
											"end": 2247,
											"name": "JUMP",
											"source": 4,
											"value": "[in]"
										},
										{
											"begin": 2158,
											"end": 2247,
											"name": "tag",
											"source": 4,
											"value": "18"
										},
										{
											"begin": 2158,
											"end": 2247,
											"name": "JUMPDEST",
											"source": 4
										},
										{
											"begin": 2158,
											"end": 2247,
											"name": "STOP",
											"source": 4
										},
										{
											"begin": 1971,
											"end": 2150,
											"name": "tag",
											"source": 4,
											"value": "4"
										},
										{
											"begin": 1971,
											"end": 2150,
											"name": "JUMPDEST",
											"source": 4
										},
										{
											"begin": 1971,
											"end": 2150,
											"name": "PUSH [tag]",
											"source": 4,
											"value": "18"
										},
										{
											"begin": 1971,
											"end": 2150,
											"name": "PUSH",
											"source": 4,
											"value": "4"
										},
										{
											"begin": 1971,
											"end": 2150,
											"name": "DUP1",
											"source": 4
										},
										{
											"begin": 1971,
											"end": 2150,
											"name": "CALLDATASIZE",
											"source": 4
										},
										{
											"begin": 1971,
											"end": 2150,
											"name": "SUB",
											"source": 4
										},
										{
											"begin": 1971,
											"end": 2150,
											"name": "PUSH",
											"source": 4,
											"value": "20"
										},
										{
											"begin": 1971,
											"end": 2150,
											"name": "DUP2",
											"source": 4
										},
										{
											"begin": 1971,
											"end": 2150,
											"name": "LT",
											"source": 4
										},
										{
											"begin": 1971,
											"end": 2150,
											"name": "ISZERO",
											"source": 4
										},
										{
											"begin": 1971,
											"end": 2150,
											"name": "PUSH [tag]",
											"source": 4,
											"value": "22"
										},
										{
											"begin": 1971,
											"end": 2150,
											"name": "JUMPI",
											"source": 4
										},
										{
											"begin": 1971,
											"end": 2150,
											"name": "PUSH",
											"source": 4,
											"value": "0"
										},
										{
											"begin": 1971,
											"end": 2150,
											"name": "DUP1",
											"source": 4
										},
										{
											"begin": 1971,
											"end": 2150,
											"name": "REVERT",
											"source": 4
										},
										{
											"begin": 1971,
											"end": 2150,
											"name": "tag",
											"source": 4,
											"value": "22"
										},
										{
											"begin": 1971,
											"end": 2150,
											"name": "JUMPDEST",
											"source": 4
										},
										{
											"begin": -1,
											"end": -1,
											"name": "POP",
											"source": -1
										},
										{
											"begin": 1971,
											"end": 2150,
											"name": "CALLDATALOAD",
											"source": 4
										},
										{
											"begin": 1971,
											"end": 2150,
											"name": "PUSH [tag]",
											"source": 4,
											"value": "23"
										},
										{
											"begin": 1971,
											"end": 2150,
											"name": "JUMP",
											"source": 4,
											"value": "[in]"
										},
										{
											"begin": 1517,
											"end": 1600,
											"name": "tag",
											"source": 4,
											"value": "5"
										},
										{
											"begin": 1517,
											"end": 1600,
											"name": "JUMPDEST",
											"source": 4
										},
										{
											"begin": 1517,
											"end": 1600,
											"name": "PUSH [tag]",
											"source": 4,
											"value": "24"
										},
										{
											"begin": 1517,
											"end": 1600,
											"name": "PUSH [tag]",
											"source": 4,
											"value": "25"
										},
										{
											"begin": 1517,
											"end": 1600,
											"name": "JUMP",
											"source": 4,
											"value": "[in]"
										},
										{
											"begin": 1517,
											"end": 1600,
											"name": "tag",
											"source": 4,
											"value": "24"
										},
										{
											"begin": 1517,
											"end": 1600,
											"name": "JUMPDEST",
											"source": 4
										},
										{
											"begin": 1517,
											"end": 1600,
											"name": "PUSH",
											"source": 4,
											"value": "40"
										},
										{
											"begin": 1517,
											"end": 1600,
											"name": "DUP1",
											"source": 4
										},
										{
											"begin": 1517,
											"end": 1600,
											"name": "MLOAD",
											"source": 4
										},
										{
											"begin": 1517,
											"end": 1600,
											"name": "SWAP2",
											"source": 4
										},
										{
											"begin": 1517,
											"end": 1600,
											"name": "DUP3",
											"source": 4
										},
										{
											"begin": 1517,
											"end": 1600,
											"name": "MSTORE",
											"source": 4
										},
										{
											"begin": 1517,
											"end": 1600,
											"name": "MLOAD",
											"source": 4
										},
										{
											"begin": 1517,
											"end": 1600,
											"name": "SWAP1",
											"source": 4
										},
										{
											"begin": 1517,
											"end": 1600,
											"name": "DUP2",
											"source": 4
										},
										{
											"begin": 1517,
											"end": 1600,
											"name": "SWAP1",
											"source": 4
										},
										{
											"begin": 1517,
											"end": 1600,
											"name": "SUB",
											"source": 4
										},
										{
											"begin": 1517,
											"end": 1600,
											"name": "PUSH",
											"source": 4,
											"value": "20"
										},
										{
											"begin": 1517,
											"end": 1600,
											"name": "ADD",
											"source": 4
										},
										{
											"begin": 1517,
											"end": 1600,
											"name": "SWAP1",
											"source": 4
										},
										{
											"begin": 1517,
											"end": 1600,
											"name": "RETURN",
											"source": 4
										},
										{
											"begin": 894,
											"end": 1009,
											"name": "tag",
											"source": 3,
											"value": "6"
										},
										{
											"begin": 894,
											"end": 1009,
											"name": "JUMPDEST",
											"source": 3
										},
										{
											"begin": 894,
											"end": 1009,
											"name": "PUSH [tag]",
											"source": 3,
											"value": "18"
										},
										{
											"begin": 894,
											"end": 1009,
											"name": "PUSH",
											"source": 3,
											"value": "4"
										},
										{
											"begin": 894,
											"end": 1009,
											"name": "DUP1",
											"source": 3
										},
										{
											"begin": 894,
											"end": 1009,
											"name": "CALLDATASIZE",
											"source": 3
										},
										{
											"begin": 894,
											"end": 1009,
											"name": "SUB",
											"source": 3
										},
										{
											"begin": 894,
											"end": 1009,
											"name": "PUSH",
											"source": 3,
											"value": "20"
										},
										{
											"begin": 894,
											"end": 1009,
											"name": "DUP2",
											"source": 3
										},
										{
											"begin": 894,
											"end": 1009,
											"name": "LT",
											"source": 3
										},
										{
											"begin": 894,
											"end": 1009,
											"name": "ISZERO",
											"source": 3
										},
										{
											"begin": 894,
											"end": 1009,
											"name": "PUSH [tag]",
											"source": 3,
											"value": "27"
										},
										{
											"begin": 894,
											"end": 1009,
											"name": "JUMPI",
											"source": 3
										},
										{
											"begin": 894,
											"end": 1009,
											"name": "PUSH",
											"source": 3,
											"value": "0"
										},
										{
											"begin": 894,
											"end": 1009,
											"name": "DUP1",
											"source": 3
										},
										{
											"begin": 894,
											"end": 1009,
											"name": "REVERT",
											"source": 3
										},
										{
											"begin": 894,
											"end": 1009,
											"name": "tag",
											"source": 3,
											"value": "27"
										},
										{
											"begin": 894,
											"end": 1009,
											"name": "JUMPDEST",
											"source": 3
										},
										{
											"begin": -1,
											"end": -1,
											"name": "POP",
											"source": -1
										},
										{
											"begin": 894,
											"end": 1009,
											"name": "CALLDATALOAD",
											"source": 3
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "1"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "1"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "A0"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SHL",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SUB",
											"source": -1
										},
										{
											"begin": 894,
											"end": 1009,
											"name": "AND",
											"source": 3
										},
										{
											"begin": 894,
											"end": 1009,
											"name": "PUSH [tag]",
											"source": 3,
											"value": "28"
										},
										{
											"begin": 894,
											"end": 1009,
											"name": "JUMP",
											"source": 3,
											"value": "[in]"
										},
										{
											"begin": 786,
											"end": 886,
											"name": "tag",
											"source": 3,
											"value": "7"
										},
										{
											"begin": 786,
											"end": 886,
											"name": "JUMPDEST",
											"source": 3
										},
										{
											"begin": 786,
											"end": 886,
											"name": "PUSH [tag]",
											"source": 3,
											"value": "29"
										},
										{
											"begin": 786,
											"end": 886,
											"name": "PUSH [tag]",
											"source": 3,
											"value": "30"
										},
										{
											"begin": 786,
											"end": 886,
											"name": "JUMP",
											"source": 3,
											"value": "[in]"
										},
										{
											"begin": 786,
											"end": 886,
											"name": "tag",
											"source": 3,
											"value": "29"
										},
										{
											"begin": 786,
											"end": 886,
											"name": "JUMPDEST",
											"source": 3
										},
										{
											"begin": 786,
											"end": 886,
											"name": "PUSH",
											"source": 3,
											"value": "40"
										},
										{
											"begin": 786,
											"end": 886,
											"name": "DUP1",
											"source": 3
										},
										{
											"begin": 786,
											"end": 886,
											"name": "MLOAD",
											"source": 3
										},
										{
											"begin": 786,
											"end": 886,
											"name": "SWAP2",
											"source": 3
										},
										{
											"begin": 786,
											"end": 886,
											"name": "ISZERO",
											"source": 3
										},
										{
											"begin": 786,
											"end": 886,
											"name": "ISZERO",
											"source": 3
										},
										{
											"begin": 786,
											"end": 886,
											"name": "DUP3",
											"source": 3
										},
										{
											"begin": 786,
											"end": 886,
											"name": "MSTORE",
											"source": 3
										},
										{
											"begin": 786,
											"end": 886,
											"name": "MLOAD",
											"source": 3
										},
										{
											"begin": 786,
											"end": 886,
											"name": "SWAP1",
											"source": 3
										},
										{
											"begin": 786,
											"end": 886,
											"name": "DUP2",
											"source": 3
										},
										{
											"begin": 786,
											"end": 886,
											"name": "SWAP1",
											"source": 3
										},
										{
											"begin": 786,
											"end": 886,
											"name": "SUB",
											"source": 3
										},
										{
											"begin": 786,
											"end": 886,
											"name": "PUSH",
											"source": 3,
											"value": "20"
										},
										{
											"begin": 786,
											"end": 886,
											"name": "ADD",
											"source": 3
										},
										{
											"begin": 786,
											"end": 886,
											"name": "SWAP1",
											"source": 3
										},
										{
											"begin": 786,
											"end": 886,
											"name": "RETURN",
											"source": 3
										},
										{
											"begin": 521,
											"end": 606,
											"name": "tag",
											"source": 3,
											"value": "8"
										},
										{
											"begin": 521,
											"end": 606,
											"name": "JUMPDEST",
											"source": 3
										},
										{
											"begin": 521,
											"end": 606,
											"name": "PUSH [tag]",
											"source": 3,
											"value": "31"
										},
										{
											"begin": 521,
											"end": 606,
											"name": "PUSH [tag]",
											"source": 3,
											"value": "32"
										},
										{
											"begin": 521,
											"end": 606,
											"name": "JUMP",
											"source": 3,
											"value": "[in]"
										},
										{
											"begin": 521,
											"end": 606,
											"name": "tag",
											"source": 3,
											"value": "31"
										},
										{
											"begin": 521,
											"end": 606,
											"name": "JUMPDEST",
											"source": 3
										},
										{
											"begin": 521,
											"end": 606,
											"name": "PUSH",
											"source": 3,
											"value": "40"
										},
										{
											"begin": 521,
											"end": 606,
											"name": "DUP1",
											"source": 3
										},
										{
											"begin": 521,
											"end": 606,
											"name": "MLOAD",
											"source": 3
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "1"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "1"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "A0"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SHL",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SUB",
											"source": -1
										},
										{
											"begin": 521,
											"end": 606,
											"name": "SWAP1",
											"source": 3
										},
										{
											"begin": 521,
											"end": 606,
											"name": "SWAP3",
											"source": 3
										},
										{
											"begin": 521,
											"end": 606,
											"name": "AND",
											"source": 3
										},
										{
											"begin": 521,
											"end": 606,
											"name": "DUP3",
											"source": 3
										},
										{
											"begin": 521,
											"end": 606,
											"name": "MSTORE",
											"source": 3
										},
										{
											"begin": 521,
											"end": 606,
											"name": "MLOAD",
											"source": 3
										},
										{
											"begin": 521,
											"end": 606,
											"name": "SWAP1",
											"source": 3
										},
										{
											"begin": 521,
											"end": 606,
											"name": "DUP2",
											"source": 3
										},
										{
											"begin": 521,
											"end": 606,
											"name": "SWAP1",
											"source": 3
										},
										{
											"begin": 521,
											"end": 606,
											"name": "SUB",
											"source": 3
										},
										{
											"begin": 521,
											"end": 606,
											"name": "PUSH",
											"source": 3,
											"value": "20"
										},
										{
											"begin": 521,
											"end": 606,
											"name": "ADD",
											"source": 3
										},
										{
											"begin": 521,
											"end": 606,
											"name": "SWAP1",
											"source": 3
										},
										{
											"begin": 521,
											"end": 606,
											"name": "RETURN",
											"source": 3
										},
										{
											"begin": 1771,
											"end": 1916,
											"name": "tag",
											"source": 0,
											"value": "9"
										},
										{
											"begin": 1771,
											"end": 1916,
											"name": "JUMPDEST",
											"source": 0
										},
										{
											"begin": 1771,
											"end": 1916,
											"name": "PUSH [tag]",
											"source": 0,
											"value": "18"
										},
										{
											"begin": 1771,
											"end": 1916,
											"name": "PUSH [tag]",
											"source": 0,
											"value": "34"
										},
										{
											"begin": 1771,
											"end": 1916,
											"name": "JUMP",
											"source": 0,
											"value": "[in]"
										},
										{
											"begin": 1139,
											"end": 1224,
											"name": "tag",
											"source": 0,
											"value": "10"
										},
										{
											"begin": 1139,
											"end": 1224,
											"name": "JUMPDEST",
											"source": 0
										},
										{
											"begin": 1139,
											"end": 1224,
											"name": "PUSH [tag]",
											"source": 0,
											"value": "31"
										},
										{
											"begin": 1139,
											"end": 1224,
											"name": "PUSH [tag]",
											"source": 0,
											"value": "36"
										},
										{
											"begin": 1139,
											"end": 1224,
											"name": "JUMP",
											"source": 0,
											"value": "[in]"
										},
										{
											"begin": 1421,
											"end": 1509,
											"name": "tag",
											"source": 4,
											"value": "11"
										},
										{
											"begin": 1421,
											"end": 1509,
											"name": "JUMPDEST",
											"source": 4
										},
										{
											"begin": 1421,
											"end": 1509,
											"name": "PUSH [tag]",
											"source": 4,
											"value": "24"
										},
										{
											"begin": 1421,
											"end": 1509,
											"name": "PUSH [tag]",
											"source": 4,
											"value": "38"
										},
										{
											"begin": 1421,
											"end": 1509,
											"name": "JUMP",
											"source": 4,
											"value": "[in]"
										},
										{
											"begin": 1705,
											"end": 1802,
											"name": "tag",
											"source": 4,
											"value": "12"
										},
										{
											"begin": 1705,
											"end": 1802,
											"name": "JUMPDEST",
											"source": 4
										},
										{
											"begin": 1705,
											"end": 1802,
											"name": "PUSH [tag]",
											"source": 4,
											"value": "24"
										},
										{
											"begin": 1705,
											"end": 1802,
											"name": "PUSH [tag]",
											"source": 4,
											"value": "40"
										},
										{
											"begin": 1705,
											"end": 1802,
											"name": "JUMP",
											"source": 4,
											"value": "[in]"
										},
										{
											"begin": 1810,
											"end": 1917,
											"name": "tag",
											"source": 4,
											"value": "13"
										},
										{
											"begin": 1810,
											"end": 1917,
											"name": "JUMPDEST",
											"source": 4
										},
										{
											"begin": 1810,
											"end": 1917,
											"name": "PUSH [tag]",
											"source": 4,
											"value": "24"
										},
										{
											"begin": 1810,
											"end": 1917,
											"name": "PUSH [tag]",
											"source": 4,
											"value": "42"
										},
										{
											"begin": 1810,
											"end": 1917,
											"name": "JUMP",
											"source": 4,
											"value": "[in]"
										},
										{
											"begin": 1608,
											"end": 1697,
											"name": "tag",
											"source": 4,
											"value": "14"
										},
										{
											"begin": 1608,
											"end": 1697,
											"name": "JUMPDEST",
											"source": 4
										},
										{
											"begin": 1608,
											"end": 1697,
											"name": "PUSH [tag]",
											"source": 4,
											"value": "24"
										},
										{
											"begin": 1608,
											"end": 1697,
											"name": "PUSH [tag]",
											"source": 4,
											"value": "44"
										},
										{
											"begin": 1608,
											"end": 1697,
											"name": "JUMP",
											"source": 4,
											"value": "[in]"
										},
										{
											"begin": 2065,
											"end": 2305,
											"name": "tag",
											"source": 0,
											"value": "15"
										},
										{
											"begin": 2065,
											"end": 2305,
											"name": "JUMPDEST",
											"source": 0
										},
										{
											"begin": 2065,
											"end": 2305,
											"name": "PUSH [tag]",
											"source": 0,
											"value": "18"
										},
										{
											"begin": 2065,
											"end": 2305,
											"name": "PUSH",
											"source": 0,
											"value": "4"
										},
										{
											"begin": 2065,
											"end": 2305,
											"name": "DUP1",
											"source": 0
										},
										{
											"begin": 2065,
											"end": 2305,
											"name": "CALLDATASIZE",
											"source": 0
										},
										{
											"begin": 2065,
											"end": 2305,
											"name": "SUB",
											"source": 0
										},
										{
											"begin": 2065,
											"end": 2305,
											"name": "PUSH",
											"source": 0,
											"value": "20"
										},
										{
											"begin": 2065,
											"end": 2305,
											"name": "DUP2",
											"source": 0
										},
										{
											"begin": 2065,
											"end": 2305,
											"name": "LT",
											"source": 0
										},
										{
											"begin": 2065,
											"end": 2305,
											"name": "ISZERO",
											"source": 0
										},
										{
											"begin": 2065,
											"end": 2305,
											"name": "PUSH [tag]",
											"source": 0,
											"value": "46"
										},
										{
											"begin": 2065,
											"end": 2305,
											"name": "JUMPI",
											"source": 0
										},
										{
											"begin": 2065,
											"end": 2305,
											"name": "PUSH",
											"source": 0,
											"value": "0"
										},
										{
											"begin": 2065,
											"end": 2305,
											"name": "DUP1",
											"source": 0
										},
										{
											"begin": 2065,
											"end": 2305,
											"name": "REVERT",
											"source": 0
										},
										{
											"begin": 2065,
											"end": 2305,
											"name": "tag",
											"source": 0,
											"value": "46"
										},
										{
											"begin": 2065,
											"end": 2305,
											"name": "JUMPDEST",
											"source": 0
										},
										{
											"begin": -1,
											"end": -1,
											"name": "POP",
											"source": -1
										},
										{
											"begin": 2065,
											"end": 2305,
											"name": "CALLDATALOAD",
											"source": 0
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "1"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "1"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "A0"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SHL",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SUB",
											"source": -1
										},
										{
											"begin": 2065,
											"end": 2305,
											"name": "AND",
											"source": 0
										},
										{
											"begin": 2065,
											"end": 2305,
											"name": "PUSH [tag]",
											"source": 0,
											"value": "47"
										},
										{
											"begin": 2065,
											"end": 2305,
											"name": "JUMP",
											"source": 0,
											"value": "[in]"
										},
										{
											"begin": 2158,
											"end": 2247,
											"name": "tag",
											"source": 4,
											"value": "20"
										},
										{
											"begin": 2158,
											"end": 2247,
											"name": "JUMPDEST",
											"source": 4
										},
										{
											"begin": 671,
											"end": 680,
											"name": "PUSH",
											"source": 3,
											"value": "1"
										},
										{
											"begin": 671,
											"end": 680,
											"name": "SLOAD",
											"source": 3
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "1"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "1"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "A0"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SHL",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SUB",
											"source": -1
										},
										{
											"begin": 671,
											"end": 680,
											"name": "AND",
											"source": 3
										},
										{
											"begin": 684,
											"end": 694,
											"name": "CALLER",
											"source": 3
										},
										{
											"begin": 671,
											"end": 694,
											"name": "EQ",
											"source": 3
										},
										{
											"begin": 649,
											"end": 758,
											"name": "PUSH [tag]",
											"source": 3,
											"value": "50"
										},
										{
											"begin": 649,
											"end": 758,
											"name": "JUMPI",
											"source": 3
										},
										{
											"begin": 649,
											"end": 758,
											"name": "PUSH",
											"source": 3,
											"value": "40"
										},
										{
											"begin": 649,
											"end": 758,
											"name": "MLOAD",
											"source": 3
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "461BCD"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "E5"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SHL",
											"source": -1
										},
										{
											"begin": 649,
											"end": 758,
											"name": "DUP2",
											"source": 3
										},
										{
											"begin": 649,
											"end": 758,
											"name": "MSTORE",
											"source": 3
										},
										{
											"begin": 649,
											"end": 758,
											"name": "PUSH",
											"source": 3,
											"value": "4"
										},
										{
											"begin": 649,
											"end": 758,
											"name": "ADD",
											"source": 3
										},
										{
											"begin": 649,
											"end": 758,
											"name": "DUP1",
											"source": 3
										},
										{
											"begin": 649,
											"end": 758,
											"name": "DUP1",
											"source": 3
										},
										{
											"begin": 649,
											"end": 758,
											"name": "PUSH",
											"source": 3,
											"value": "20"
										},
										{
											"begin": 649,
											"end": 758,
											"name": "ADD",
											"source": 3
										},
										{
											"begin": 649,
											"end": 758,
											"name": "DUP3",
											"source": 3
										},
										{
											"begin": 649,
											"end": 758,
											"name": "DUP2",
											"source": 3
										},
										{
											"begin": 649,
											"end": 758,
											"name": "SUB",
											"source": 3
										},
										{
											"begin": 649,
											"end": 758,
											"name": "DUP3",
											"source": 3
										},
										{
											"begin": 649,
											"end": 758,
											"name": "MSTORE",
											"source": 3
										},
										{
											"begin": 649,
											"end": 758,
											"name": "PUSH",
											"source": 3,
											"value": "24"
										},
										{
											"begin": 649,
											"end": 758,
											"name": "DUP2",
											"source": 3
										},
										{
											"begin": 649,
											"end": 758,
											"name": "MSTORE",
											"source": 3
										},
										{
											"begin": 649,
											"end": 758,
											"name": "PUSH",
											"source": 3,
											"value": "20"
										},
										{
											"begin": 649,
											"end": 758,
											"name": "ADD",
											"source": 3
										},
										{
											"begin": 649,
											"end": 758,
											"name": "DUP1",
											"source": 3
										},
										{
											"begin": 649,
											"end": 758,
											"name": "PUSH data",
											"source": 3,
											"value": "A62BFDBA5053072911B63B0F6325B0E83FCD28B5A847D97EFDD966FEB4DAAAFB"
										},
										{
											"begin": 649,
											"end": 758,
											"name": "PUSH",
											"source": 3,
											"value": "24"
										},
										{
											"begin": 649,
											"end": 758,
											"name": "SWAP2",
											"source": 3
										},
										{
											"begin": 649,
											"end": 758,
											"name": "CODECOPY",
											"source": 3
										},
										{
											"begin": 649,
											"end": 758,
											"name": "PUSH",
											"source": 3,
											"value": "40"
										},
										{
											"begin": 649,
											"end": 758,
											"name": "ADD",
											"source": 3
										},
										{
											"begin": 649,
											"end": 758,
											"name": "SWAP2",
											"source": 3
										},
										{
											"begin": 649,
											"end": 758,
											"name": "POP",
											"source": 3
										},
										{
											"begin": 649,
											"end": 758,
											"name": "POP",
											"source": 3
										},
										{
											"begin": 649,
											"end": 758,
											"name": "PUSH",
											"source": 3,
											"value": "40"
										},
										{
											"begin": 649,
											"end": 758,
											"name": "MLOAD",
											"source": 3
										},
										{
											"begin": 649,
											"end": 758,
											"name": "DUP1",
											"source": 3
										},
										{
											"begin": 649,
											"end": 758,
											"name": "SWAP2",
											"source": 3
										},
										{
											"begin": 649,
											"end": 758,
											"name": "SUB",
											"source": 3
										},
										{
											"begin": 649,
											"end": 758,
											"name": "SWAP1",
											"source": 3
										},
										{
											"begin": 649,
											"end": 758,
											"name": "REVERT",
											"source": 3
										},
										{
											"begin": 649,
											"end": 758,
											"name": "tag",
											"source": 3,
											"value": "50"
										},
										{
											"begin": 649,
											"end": 758,
											"name": "JUMPDEST",
											"source": 3
										},
										{
											"begin": 2225,
											"end": 2230,
											"name": "PUSH",
											"source": 4,
											"value": "5"
										},
										{
											"begin": 2225,
											"end": 2239,
											"name": "SSTORE",
											"source": 4
										},
										{
											"begin": 2158,
											"end": 2247,
											"name": "JUMP",
											"source": 4,
											"value": "[out]"
										},
										{
											"begin": 1971,
											"end": 2150,
											"name": "tag",
											"source": 4,
											"value": "23"
										},
										{
											"begin": 1971,
											"end": 2150,
											"name": "JUMPDEST",
											"source": 4
										},
										{
											"begin": 671,
											"end": 680,
											"name": "PUSH",
											"source": 3,
											"value": "1"
										},
										{
											"begin": 671,
											"end": 680,
											"name": "SLOAD",
											"source": 3
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "1"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "1"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "A0"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SHL",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SUB",
											"source": -1
										},
										{
											"begin": 671,
											"end": 680,
											"name": "AND",
											"source": 3
										},
										{
											"begin": 684,
											"end": 694,
											"name": "CALLER",
											"source": 3
										},
										{
											"begin": 671,
											"end": 694,
											"name": "EQ",
											"source": 3
										},
										{
											"begin": 649,
											"end": 758,
											"name": "PUSH [tag]",
											"source": 3,
											"value": "53"
										},
										{
											"begin": 649,
											"end": 758,
											"name": "JUMPI",
											"source": 3
										},
										{
											"begin": 649,
											"end": 758,
											"name": "PUSH",
											"source": 3,
											"value": "40"
										},
										{
											"begin": 649,
											"end": 758,
											"name": "MLOAD",
											"source": 3
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "461BCD"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "E5"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SHL",
											"source": -1
										},
										{
											"begin": 649,
											"end": 758,
											"name": "DUP2",
											"source": 3
										},
										{
											"begin": 649,
											"end": 758,
											"name": "MSTORE",
											"source": 3
										},
										{
											"begin": 649,
											"end": 758,
											"name": "PUSH",
											"source": 3,
											"value": "4"
										},
										{
											"begin": 649,
											"end": 758,
											"name": "ADD",
											"source": 3
										},
										{
											"begin": 649,
											"end": 758,
											"name": "DUP1",
											"source": 3
										},
										{
											"begin": 649,
											"end": 758,
											"name": "DUP1",
											"source": 3
										},
										{
											"begin": 649,
											"end": 758,
											"name": "PUSH",
											"source": 3,
											"value": "20"
										},
										{
											"begin": 649,
											"end": 758,
											"name": "ADD",
											"source": 3
										},
										{
											"begin": 649,
											"end": 758,
											"name": "DUP3",
											"source": 3
										},
										{
											"begin": 649,
											"end": 758,
											"name": "DUP2",
											"source": 3
										},
										{
											"begin": 649,
											"end": 758,
											"name": "SUB",
											"source": 3
										},
										{
											"begin": 649,
											"end": 758,
											"name": "DUP3",
											"source": 3
										},
										{
											"begin": 649,
											"end": 758,
											"name": "MSTORE",
											"source": 3
										},
										{
											"begin": 649,
											"end": 758,
											"name": "PUSH",
											"source": 3,
											"value": "24"
										},
										{
											"begin": 649,
											"end": 758,
											"name": "DUP2",
											"source": 3
										},
										{
											"begin": 649,
											"end": 758,
											"name": "MSTORE",
											"source": 3
										},
										{
											"begin": 649,
											"end": 758,
											"name": "PUSH",
											"source": 3,
											"value": "20"
										},
										{
											"begin": 649,
											"end": 758,
											"name": "ADD",
											"source": 3
										},
										{
											"begin": 649,
											"end": 758,
											"name": "DUP1",
											"source": 3
										},
										{
											"begin": 649,
											"end": 758,
											"name": "PUSH data",
											"source": 3,
											"value": "A62BFDBA5053072911B63B0F6325B0E83FCD28B5A847D97EFDD966FEB4DAAAFB"
										},
										{
											"begin": 649,
											"end": 758,
											"name": "PUSH",
											"source": 3,
											"value": "24"
										},
										{
											"begin": 649,
											"end": 758,
											"name": "SWAP2",
											"source": 3
										},
										{
											"begin": 649,
											"end": 758,
											"name": "CODECOPY",
											"source": 3
										},
										{
											"begin": 649,
											"end": 758,
											"name": "PUSH",
											"source": 3,
											"value": "40"
										},
										{
											"begin": 649,
											"end": 758,
											"name": "ADD",
											"source": 3
										},
										{
											"begin": 649,
											"end": 758,
											"name": "SWAP2",
											"source": 3
										},
										{
											"begin": 649,
											"end": 758,
											"name": "POP",
											"source": 3
										},
										{
											"begin": 649,
											"end": 758,
											"name": "POP",
											"source": 3
										},
										{
											"begin": 649,
											"end": 758,
											"name": "PUSH",
											"source": 3,
											"value": "40"
										},
										{
											"begin": 649,
											"end": 758,
											"name": "MLOAD",
											"source": 3
										},
										{
											"begin": 649,
											"end": 758,
											"name": "DUP1",
											"source": 3
										},
										{
											"begin": 649,
											"end": 758,
											"name": "SWAP2",
											"source": 3
										},
										{
											"begin": 649,
											"end": 758,
											"name": "SUB",
											"source": 3
										},
										{
											"begin": 649,
											"end": 758,
											"name": "SWAP1",
											"source": 3
										},
										{
											"begin": 649,
											"end": 758,
											"name": "REVERT",
											"source": 3
										},
										{
											"begin": 649,
											"end": 758,
											"name": "tag",
											"source": 3,
											"value": "53"
										},
										{
											"begin": 649,
											"end": 758,
											"name": "JUMPDEST",
											"source": 3
										},
										{
											"begin": 2059,
											"end": 2066,
											"name": "PUSH",
											"source": 4,
											"value": "E10"
										},
										{
											"begin": 2048,
											"end": 2055,
											"name": "DUP2",
											"source": 4
										},
										{
											"begin": 2048,
											"end": 2066,
											"name": "LT",
											"source": 4
										},
										{
											"begin": 2048,
											"end": 2066,
											"name": "ISZERO",
											"source": 4
										},
										{
											"begin": 2048,
											"end": 2089,
											"name": "DUP1",
											"source": 4
										},
										{
											"begin": 2048,
											"end": 2089,
											"name": "ISZERO",
											"source": 4
										},
										{
											"begin": 2048,
											"end": 2089,
											"name": "PUSH [tag]",
											"source": 4,
											"value": "55"
										},
										{
											"begin": 2048,
											"end": 2089,
											"name": "JUMPI",
											"source": 4
										},
										{
											"begin": 2048,
											"end": 2089,
											"name": "POP",
											"source": 4
										},
										{
											"begin": 2081,
											"end": 2089,
											"name": "PUSH",
											"source": 4,
											"value": "2A300"
										},
										{
											"begin": 2070,
											"end": 2077,
											"name": "DUP2",
											"source": 4
										},
										{
											"begin": 2070,
											"end": 2089,
											"name": "GT",
											"source": 4
										},
										{
											"begin": 2070,
											"end": 2089,
											"name": "ISZERO",
											"source": 4
										},
										{
											"begin": 2048,
											"end": 2089,
											"name": "tag",
											"source": 4,
											"value": "55"
										},
										{
											"begin": 2048,
											"end": 2089,
											"name": "JUMPDEST",
											"source": 4
										},
										{
											"begin": 2040,
											"end": 2115,
											"name": "PUSH [tag]",
											"source": 4,
											"value": "56"
										},
										{
											"begin": 2040,
											"end": 2115,
											"name": "JUMPI",
											"source": 4
										},
										{
											"begin": 2040,
											"end": 2115,
											"name": "PUSH",
											"source": 4,
											"value": "40"
										},
										{
											"begin": 2040,
											"end": 2115,
											"name": "DUP1",
											"source": 4
										},
										{
											"begin": 2040,
											"end": 2115,
											"name": "MLOAD",
											"source": 4
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "461BCD"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "E5"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SHL",
											"source": -1
										},
										{
											"begin": 2040,
											"end": 2115,
											"name": "DUP2",
											"source": 4
										},
										{
											"begin": 2040,
											"end": 2115,
											"name": "MSTORE",
											"source": 4
										},
										{
											"begin": 2040,
											"end": 2115,
											"name": "PUSH",
											"source": 4,
											"value": "20"
										},
										{
											"begin": 2040,
											"end": 2115,
											"name": "PUSH",
											"source": 4,
											"value": "4"
										},
										{
											"begin": 2040,
											"end": 2115,
											"name": "DUP3",
											"source": 4
										},
										{
											"begin": 2040,
											"end": 2115,
											"name": "ADD",
											"source": 4
										},
										{
											"begin": 2040,
											"end": 2115,
											"name": "MSTORE",
											"source": 4
										},
										{
											"begin": 2040,
											"end": 2115,
											"name": "PUSH",
											"source": 4,
											"value": "15"
										},
										{
											"begin": 2040,
											"end": 2115,
											"name": "PUSH",
											"source": 4,
											"value": "24"
										},
										{
											"begin": 2040,
											"end": 2115,
											"name": "DUP3",
											"source": 4
										},
										{
											"begin": 2040,
											"end": 2115,
											"name": "ADD",
											"source": 4
										},
										{
											"begin": 2040,
											"end": 2115,
											"name": "MSTORE",
											"source": 4
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "5F706572696F643A206F7574206F662072616E6765"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "58"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SHL",
											"source": -1
										},
										{
											"begin": 2040,
											"end": 2115,
											"name": "PUSH",
											"source": 4,
											"value": "44"
										},
										{
											"begin": 2040,
											"end": 2115,
											"name": "DUP3",
											"source": 4
										},
										{
											"begin": 2040,
											"end": 2115,
											"name": "ADD",
											"source": 4
										},
										{
											"begin": 2040,
											"end": 2115,
											"name": "MSTORE",
											"source": 4
										},
										{
											"begin": 2040,
											"end": 2115,
											"name": "SWAP1",
											"source": 4
										},
										{
											"begin": 2040,
											"end": 2115,
											"name": "MLOAD",
											"source": 4
										},
										{
											"begin": 2040,
											"end": 2115,
											"name": "SWAP1",
											"source": 4
										},
										{
											"begin": 2040,
											"end": 2115,
											"name": "DUP2",
											"source": 4
										},
										{
											"begin": 2040,
											"end": 2115,
											"name": "SWAP1",
											"source": 4
										},
										{
											"begin": 2040,
											"end": 2115,
											"name": "SUB",
											"source": 4
										},
										{
											"begin": 2040,
											"end": 2115,
											"name": "PUSH",
											"source": 4,
											"value": "64"
										},
										{
											"begin": 2040,
											"end": 2115,
											"name": "ADD",
											"source": 4
										},
										{
											"begin": 2040,
											"end": 2115,
											"name": "SWAP1",
											"source": 4
										},
										{
											"begin": 2040,
											"end": 2115,
											"name": "REVERT",
											"source": 4
										},
										{
											"begin": 2040,
											"end": 2115,
											"name": "tag",
											"source": 4,
											"value": "56"
										},
										{
											"begin": 2040,
											"end": 2115,
											"name": "JUMPDEST",
											"source": 4
										},
										{
											"begin": 2126,
											"end": 2132,
											"name": "PUSH",
											"source": 4,
											"value": "2"
										},
										{
											"begin": 2126,
											"end": 2142,
											"name": "SSTORE",
											"source": 4
										},
										{
											"begin": 1971,
											"end": 2150,
											"name": "JUMP",
											"source": 4,
											"value": "[out]"
										},
										{
											"begin": 1517,
											"end": 1600,
											"name": "tag",
											"source": 4,
											"value": "25"
										},
										{
											"begin": 1517,
											"end": 1600,
											"name": "JUMPDEST",
											"source": 4
										},
										{
											"begin": 1586,
											"end": 1592,
											"name": "PUSH",
											"source": 4,
											"value": "2"
										},
										{
											"begin": 1586,
											"end": 1592,
											"name": "SLOAD",
											"source": 4
										},
										{
											"begin": 1517,
											"end": 1600,
											"name": "SWAP1",
											"source": 4
										},
										{
											"begin": 1517,
											"end": 1600,
											"name": "JUMP",
											"source": 4,
											"value": "[out]"
										},
										{
											"begin": 894,
											"end": 1009,
											"name": "tag",
											"source": 3,
											"value": "28"
										},
										{
											"begin": 894,
											"end": 1009,
											"name": "JUMPDEST",
											"source": 3
										},
										{
											"begin": 1362,
											"end": 1374,
											"name": "PUSH [tag]",
											"source": 0,
											"value": "59"
										},
										{
											"begin": 1362,
											"end": 1372,
											"name": "PUSH [tag]",
											"source": 0,
											"value": "60"
										},
										{
											"begin": 1362,
											"end": 1374,
											"name": "JUMP",
											"source": 0,
											"value": "[in]"
										},
										{
											"begin": 1362,
											"end": 1374,
											"name": "tag",
											"source": 0,
											"value": "59"
										},
										{
											"begin": 1362,
											"end": 1374,
											"name": "JUMPDEST",
											"source": 0
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "1"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "1"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "A0"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SHL",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SUB",
											"source": -1
										},
										{
											"begin": 1351,
											"end": 1374,
											"name": "AND",
											"source": 0
										},
										{
											"begin": 1351,
											"end": 1358,
											"name": "PUSH [tag]",
											"source": 0,
											"value": "61"
										},
										{
											"begin": 1351,
											"end": 1356,
											"name": "PUSH [tag]",
											"source": 0,
											"value": "36"
										},
										{
											"begin": 1351,
											"end": 1358,
											"name": "JUMP",
											"source": 0,
											"value": "[in]"
										},
										{
											"begin": 1351,
											"end": 1358,
											"name": "tag",
											"source": 0,
											"value": "61"
										},
										{
											"begin": 1351,
											"end": 1358,
											"name": "JUMPDEST",
											"source": 0
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "1"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "1"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "A0"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SHL",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SUB",
											"source": -1
										},
										{
											"begin": 1351,
											"end": 1374,
											"name": "AND",
											"source": 0
										},
										{
											"begin": 1351,
											"end": 1374,
											"name": "EQ",
											"source": 0
										},
										{
											"begin": 1343,
											"end": 1411,
											"name": "PUSH [tag]",
											"source": 0,
											"value": "62"
										},
										{
											"begin": 1343,
											"end": 1411,
											"name": "JUMPI",
											"source": 0
										},
										{
											"begin": 1343,
											"end": 1411,
											"name": "PUSH",
											"source": 0,
											"value": "40"
										},
										{
											"begin": 1343,
											"end": 1411,
											"name": "DUP1",
											"source": 0
										},
										{
											"begin": 1343,
											"end": 1411,
											"name": "MLOAD",
											"source": 0
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "461BCD"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "E5"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SHL",
											"source": -1
										},
										{
											"begin": 1343,
											"end": 1411,
											"name": "DUP2",
											"source": 0
										},
										{
											"begin": 1343,
											"end": 1411,
											"name": "MSTORE",
											"source": 0
										},
										{
											"begin": 1343,
											"end": 1411,
											"name": "PUSH",
											"source": 0,
											"value": "20"
										},
										{
											"begin": 1343,
											"end": 1411,
											"name": "PUSH",
											"source": 0,
											"value": "4"
										},
										{
											"begin": 1343,
											"end": 1411,
											"name": "DUP3",
											"source": 0
										},
										{
											"begin": 1343,
											"end": 1411,
											"name": "ADD",
											"source": 0
										},
										{
											"begin": 1343,
											"end": 1411,
											"name": "DUP2",
											"source": 0
										},
										{
											"begin": 1343,
											"end": 1411,
											"name": "SWAP1",
											"source": 0
										},
										{
											"begin": 1343,
											"end": 1411,
											"name": "MSTORE",
											"source": 0
										},
										{
											"begin": 1343,
											"end": 1411,
											"name": "PUSH",
											"source": 0,
											"value": "24"
										},
										{
											"begin": 1343,
											"end": 1411,
											"name": "DUP3",
											"source": 0
										},
										{
											"begin": 1343,
											"end": 1411,
											"name": "ADD",
											"source": 0
										},
										{
											"begin": 1343,
											"end": 1411,
											"name": "MSTORE",
											"source": 0
										},
										{
											"begin": 1343,
											"end": 1411,
											"name": "PUSH",
											"source": 0,
											"value": "4F776E61626C653A2063616C6C6572206973206E6F7420746865206F776E6572"
										},
										{
											"begin": 1343,
											"end": 1411,
											"name": "PUSH",
											"source": 0,
											"value": "44"
										},
										{
											"begin": 1343,
											"end": 1411,
											"name": "DUP3",
											"source": 0
										},
										{
											"begin": 1343,
											"end": 1411,
											"name": "ADD",
											"source": 0
										},
										{
											"begin": 1343,
											"end": 1411,
											"name": "MSTORE",
											"source": 0
										},
										{
											"begin": 1343,
											"end": 1411,
											"name": "SWAP1",
											"source": 0
										},
										{
											"begin": 1343,
											"end": 1411,
											"name": "MLOAD",
											"source": 0
										},
										{
											"begin": 1343,
											"end": 1411,
											"name": "SWAP1",
											"source": 0
										},
										{
											"begin": 1343,
											"end": 1411,
											"name": "DUP2",
											"source": 0
										},
										{
											"begin": 1343,
											"end": 1411,
											"name": "SWAP1",
											"source": 0
										},
										{
											"begin": 1343,
											"end": 1411,
											"name": "SUB",
											"source": 0
										},
										{
											"begin": 1343,
											"end": 1411,
											"name": "PUSH",
											"source": 0,
											"value": "64"
										},
										{
											"begin": 1343,
											"end": 1411,
											"name": "ADD",
											"source": 0
										},
										{
											"begin": 1343,
											"end": 1411,
											"name": "SWAP1",
											"source": 0
										},
										{
											"begin": 1343,
											"end": 1411,
											"name": "REVERT",
											"source": 0
										},
										{
											"begin": 1343,
											"end": 1411,
											"name": "tag",
											"source": 0,
											"value": "62"
										},
										{
											"begin": 1343,
											"end": 1411,
											"name": "JUMPDEST",
											"source": 0
										},
										{
											"begin": 970,
											"end": 1001,
											"name": "PUSH [tag]",
											"source": 3,
											"value": "64"
										},
										{
											"begin": 988,
											"end": 1000,
											"name": "DUP2",
											"source": 3
										},
										{
											"begin": 970,
											"end": 987,
											"name": "PUSH [tag]",
											"source": 3,
											"value": "65"
										},
										{
											"begin": 970,
											"end": 1001,
											"name": "JUMP",
											"source": 3,
											"value": "[in]"
										},
										{
											"begin": 970,
											"end": 1001,
											"name": "tag",
											"source": 3,
											"value": "64"
										},
										{
											"begin": 970,
											"end": 1001,
											"name": "JUMPDEST",
											"source": 3
										},
										{
											"begin": 894,
											"end": 1009,
											"name": "POP",
											"source": 3
										},
										{
											"begin": 894,
											"end": 1009,
											"name": "JUMP",
											"source": 3,
											"value": "[out]"
										},
										{
											"begin": 786,
											"end": 886,
											"name": "tag",
											"source": 3,
											"value": "30"
										},
										{
											"begin": 786,
											"end": 886,
											"name": "JUMPDEST",
											"source": 3
										},
										{
											"begin": 869,
											"end": 878,
											"name": "PUSH",
											"source": 3,
											"value": "1"
										},
										{
											"begin": 869,
											"end": 878,
											"name": "SLOAD",
											"source": 3
										},
										{
											"begin": 829,
											"end": 833,
											"name": "PUSH",
											"source": 3,
											"value": "0"
										},
										{
											"begin": 829,
											"end": 833,
											"name": "SWAP1",
											"source": 3
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "1"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "1"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "A0"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SHL",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SUB",
											"source": -1
										},
										{
											"begin": 869,
											"end": 878,
											"name": "AND",
											"source": 3
										},
										{
											"begin": 853,
											"end": 865,
											"name": "PUSH [tag]",
											"source": 3,
											"value": "67"
										},
										{
											"begin": 853,
											"end": 863,
											"name": "PUSH [tag]",
											"source": 3,
											"value": "60"
										},
										{
											"begin": 853,
											"end": 865,
											"name": "JUMP",
											"source": 3,
											"value": "[in]"
										},
										{
											"begin": 853,
											"end": 865,
											"name": "tag",
											"source": 3,
											"value": "67"
										},
										{
											"begin": 853,
											"end": 865,
											"name": "JUMPDEST",
											"source": 3
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "1"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "1"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "A0"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SHL",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SUB",
											"source": -1
										},
										{
											"begin": 853,
											"end": 878,
											"name": "AND",
											"source": 3
										},
										{
											"begin": 853,
											"end": 878,
											"name": "EQ",
											"source": 3
										},
										{
											"begin": 846,
											"end": 878,
											"name": "SWAP1",
											"source": 3
										},
										{
											"begin": 846,
											"end": 878,
											"name": "POP",
											"source": 3
										},
										{
											"begin": 786,
											"end": 886,
											"name": "SWAP1",
											"source": 3
										},
										{
											"begin": 786,
											"end": 886,
											"name": "JUMP",
											"source": 3,
											"value": "[out]"
										},
										{
											"begin": 521,
											"end": 606,
											"name": "tag",
											"source": 3,
											"value": "32"
										},
										{
											"begin": 521,
											"end": 606,
											"name": "JUMPDEST",
											"source": 3
										},
										{
											"begin": 589,
											"end": 598,
											"name": "PUSH",
											"source": 3,
											"value": "1"
										},
										{
											"begin": 589,
											"end": 598,
											"name": "SLOAD",
											"source": 3
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "1"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "1"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "A0"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SHL",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SUB",
											"source": -1
										},
										{
											"begin": 589,
											"end": 598,
											"name": "AND",
											"source": 3
										},
										{
											"begin": 521,
											"end": 606,
											"name": "SWAP1",
											"source": 3
										},
										{
											"begin": 521,
											"end": 606,
											"name": "JUMP",
											"source": 3,
											"value": "[out]"
										},
										{
											"begin": 1771,
											"end": 1916,
											"name": "tag",
											"source": 0,
											"value": "34"
										},
										{
											"begin": 1771,
											"end": 1916,
											"name": "JUMPDEST",
											"source": 0
										},
										{
											"begin": 1362,
											"end": 1374,
											"name": "PUSH [tag]",
											"source": 0,
											"value": "70"
										},
										{
											"begin": 1362,
											"end": 1372,
											"name": "PUSH [tag]",
											"source": 0,
											"value": "60"
										},
										{
											"begin": 1362,
											"end": 1374,
											"name": "JUMP",
											"source": 0,
											"value": "[in]"
										},
										{
											"begin": 1362,
											"end": 1374,
											"name": "tag",
											"source": 0,
											"value": "70"
										},
										{
											"begin": 1362,
											"end": 1374,
											"name": "JUMPDEST",
											"source": 0
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "1"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "1"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "A0"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SHL",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SUB",
											"source": -1
										},
										{
											"begin": 1351,
											"end": 1374,
											"name": "AND",
											"source": 0
										},
										{
											"begin": 1351,
											"end": 1358,
											"name": "PUSH [tag]",
											"source": 0,
											"value": "71"
										},
										{
											"begin": 1351,
											"end": 1356,
											"name": "PUSH [tag]",
											"source": 0,
											"value": "36"
										},
										{
											"begin": 1351,
											"end": 1358,
											"name": "JUMP",
											"source": 0,
											"value": "[in]"
										},
										{
											"begin": 1351,
											"end": 1358,
											"name": "tag",
											"source": 0,
											"value": "71"
										},
										{
											"begin": 1351,
											"end": 1358,
											"name": "JUMPDEST",
											"source": 0
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "1"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "1"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "A0"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SHL",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SUB",
											"source": -1
										},
										{
											"begin": 1351,
											"end": 1374,
											"name": "AND",
											"source": 0
										},
										{
											"begin": 1351,
											"end": 1374,
											"name": "EQ",
											"source": 0
										},
										{
											"begin": 1343,
											"end": 1411,
											"name": "PUSH [tag]",
											"source": 0,
											"value": "72"
										},
										{
											"begin": 1343,
											"end": 1411,
											"name": "JUMPI",
											"source": 0
										},
										{
											"begin": 1343,
											"end": 1411,
											"name": "PUSH",
											"source": 0,
											"value": "40"
										},
										{
											"begin": 1343,
											"end": 1411,
											"name": "DUP1",
											"source": 0
										},
										{
											"begin": 1343,
											"end": 1411,
											"name": "MLOAD",
											"source": 0
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "461BCD"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "E5"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SHL",
											"source": -1
										},
										{
											"begin": 1343,
											"end": 1411,
											"name": "DUP2",
											"source": 0
										},
										{
											"begin": 1343,
											"end": 1411,
											"name": "MSTORE",
											"source": 0
										},
										{
											"begin": 1343,
											"end": 1411,
											"name": "PUSH",
											"source": 0,
											"value": "20"
										},
										{
											"begin": 1343,
											"end": 1411,
											"name": "PUSH",
											"source": 0,
											"value": "4"
										},
										{
											"begin": 1343,
											"end": 1411,
											"name": "DUP3",
											"source": 0
										},
										{
											"begin": 1343,
											"end": 1411,
											"name": "ADD",
											"source": 0
										},
										{
											"begin": 1343,
											"end": 1411,
											"name": "DUP2",
											"source": 0
										},
										{
											"begin": 1343,
											"end": 1411,
											"name": "SWAP1",
											"source": 0
										},
										{
											"begin": 1343,
											"end": 1411,
											"name": "MSTORE",
											"source": 0
										},
										{
											"begin": 1343,
											"end": 1411,
											"name": "PUSH",
											"source": 0,
											"value": "24"
										},
										{
											"begin": 1343,
											"end": 1411,
											"name": "DUP3",
											"source": 0
										},
										{
											"begin": 1343,
											"end": 1411,
											"name": "ADD",
											"source": 0
										},
										{
											"begin": 1343,
											"end": 1411,
											"name": "MSTORE",
											"source": 0
										},
										{
											"begin": 1343,
											"end": 1411,
											"name": "PUSH",
											"source": 0,
											"value": "4F776E61626C653A2063616C6C6572206973206E6F7420746865206F776E6572"
										},
										{
											"begin": 1343,
											"end": 1411,
											"name": "PUSH",
											"source": 0,
											"value": "44"
										},
										{
											"begin": 1343,
											"end": 1411,
											"name": "DUP3",
											"source": 0
										},
										{
											"begin": 1343,
											"end": 1411,
											"name": "ADD",
											"source": 0
										},
										{
											"begin": 1343,
											"end": 1411,
											"name": "MSTORE",
											"source": 0
										},
										{
											"begin": 1343,
											"end": 1411,
											"name": "SWAP1",
											"source": 0
										},
										{
											"begin": 1343,
											"end": 1411,
											"name": "MLOAD",
											"source": 0
										},
										{
											"begin": 1343,
											"end": 1411,
											"name": "SWAP1",
											"source": 0
										},
										{
											"begin": 1343,
											"end": 1411,
											"name": "DUP2",
											"source": 0
										},
										{
											"begin": 1343,
											"end": 1411,
											"name": "SWAP1",
											"source": 0
										},
										{
											"begin": 1343,
											"end": 1411,
											"name": "SUB",
											"source": 0
										},
										{
											"begin": 1343,
											"end": 1411,
											"name": "PUSH",
											"source": 0,
											"value": "64"
										},
										{
											"begin": 1343,
											"end": 1411,
											"name": "ADD",
											"source": 0
										},
										{
											"begin": 1343,
											"end": 1411,
											"name": "SWAP1",
											"source": 0
										},
										{
											"begin": 1343,
											"end": 1411,
											"name": "REVERT",
											"source": 0
										},
										{
											"begin": 1343,
											"end": 1411,
											"name": "tag",
											"source": 0,
											"value": "72"
										},
										{
											"begin": 1343,
											"end": 1411,
											"name": "JUMPDEST",
											"source": 0
										},
										{
											"begin": 1877,
											"end": 1878,
											"name": "PUSH",
											"source": 0,
											"value": "0"
										},
										{
											"begin": 1861,
											"end": 1867,
											"name": "DUP1",
											"source": 0
										},
										{
											"begin": 1861,
											"end": 1867,
											"name": "SLOAD",
											"source": 0
										},
										{
											"begin": 1840,
											"end": 1880,
											"name": "PUSH",
											"source": 0,
											"value": "40"
										},
										{
											"begin": 1840,
											"end": 1880,
											"name": "MLOAD",
											"source": 0
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "1"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "1"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "A0"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SHL",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SUB",
											"source": -1
										},
										{
											"begin": 1861,
											"end": 1867,
											"name": "SWAP1",
											"source": 0
										},
										{
											"begin": 1861,
											"end": 1867,
											"name": "SWAP2",
											"source": 0
										},
										{
											"begin": 1861,
											"end": 1867,
											"name": "AND",
											"source": 0
										},
										{
											"begin": 1861,
											"end": 1867,
											"name": "SWAP1",
											"source": 0
										},
										{
											"begin": 1840,
											"end": 1880,
											"name": "PUSH",
											"source": 0,
											"value": "8BE0079C531659141344CD1FD0A4F28419497F9722A3DAAFE3B4186F6B6457E0"
										},
										{
											"begin": 1840,
											"end": 1880,
											"name": "SWAP1",
											"source": 0
										},
										{
											"begin": 1877,
											"end": 1878,
											"name": "DUP4",
											"source": 0
										},
										{
											"begin": 1877,
											"end": 1878,
											"name": "SWAP1",
											"source": 0
										},
										{
											"begin": 1840,
											"end": 1880,
											"name": "LOG3",
											"source": 0
										},
										{
											"begin": 1907,
											"end": 1908,
											"name": "PUSH",
											"source": 0,
											"value": "0"
										},
										{
											"begin": 1890,
											"end": 1909,
											"name": "DUP1",
											"source": 0
										},
										{
											"begin": 1890,
											"end": 1909,
											"name": "SLOAD",
											"source": 0
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "1"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "1"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "A0"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SHL",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SUB",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "NOT",
											"source": -1
										},
										{
											"begin": 1890,
											"end": 1909,
											"name": "AND",
											"source": 0
										},
										{
											"begin": 1890,
											"end": 1909,
											"name": "SWAP1",
											"source": 0
										},
										{
											"begin": 1890,
											"end": 1909,
											"name": "SSTORE",
											"source": 0
										},
										{
											"begin": 1771,
											"end": 1916,
											"name": "JUMP",
											"source": 0,
											"value": "[out]"
										},
										{
											"begin": 1139,
											"end": 1224,
											"name": "tag",
											"source": 0,
											"value": "36"
										},
										{
											"begin": 1139,
											"end": 1224,
											"name": "JUMPDEST",
											"source": 0
										},
										{
											"begin": 1185,
											"end": 1192,
											"name": "PUSH",
											"source": 0,
											"value": "0"
										},
										{
											"begin": 1211,
											"end": 1217,
											"name": "SLOAD",
											"source": 0
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "1"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "1"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "A0"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SHL",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SUB",
											"source": -1
										},
										{
											"begin": 1211,
											"end": 1217,
											"name": "AND",
											"source": 0
										},
										{
											"begin": 1139,
											"end": 1224,
											"name": "SWAP1",
											"source": 0
										},
										{
											"begin": 1139,
											"end": 1224,
											"name": "JUMP",
											"source": 0,
											"value": "[out]"
										},
										{
											"begin": 1421,
											"end": 1509,
											"name": "tag",
											"source": 4,
											"value": "38"
										},
										{
											"begin": 1421,
											"end": 1509,
											"name": "JUMPDEST",
											"source": 4
										},
										{
											"begin": 1496,
											"end": 1501,
											"name": "PUSH",
											"source": 4,
											"value": "5"
										},
										{
											"begin": 1496,
											"end": 1501,
											"name": "SLOAD",
											"source": 4
										},
										{
											"begin": 1421,
											"end": 1509,
											"name": "SWAP1",
											"source": 4
										},
										{
											"begin": 1421,
											"end": 1509,
											"name": "JUMP",
											"source": 4,
											"value": "[out]"
										},
										{
											"begin": 1705,
											"end": 1802,
											"name": "tag",
											"source": 4,
											"value": "40"
										},
										{
											"begin": 1705,
											"end": 1802,
											"name": "JUMPDEST",
											"source": 4
										},
										{
											"begin": 1781,
											"end": 1794,
											"name": "PUSH",
											"source": 4,
											"value": "4"
										},
										{
											"begin": 1781,
											"end": 1794,
											"name": "SLOAD",
											"source": 4
										},
										{
											"begin": 1705,
											"end": 1802,
											"name": "SWAP1",
											"source": 4
										},
										{
											"begin": 1705,
											"end": 1802,
											"name": "JUMP",
											"source": 4,
											"value": "[out]"
										},
										{
											"begin": 1810,
											"end": 1917,
											"name": "tag",
											"source": 4,
											"value": "42"
										},
										{
											"begin": 1810,
											"end": 1917,
											"name": "JUMPDEST",
											"source": 4
										},
										{
											"begin": 1857,
											"end": 1864,
											"name": "PUSH",
											"source": 4,
											"value": "0"
										},
										{
											"begin": 1884,
											"end": 1909,
											"name": "PUSH [tag]",
											"source": 4,
											"value": "78"
										},
										{
											"begin": 1902,
											"end": 1908,
											"name": "PUSH",
											"source": 4,
											"value": "2"
										},
										{
											"begin": 1902,
											"end": 1908,
											"name": "SLOAD",
											"source": 4
										},
										{
											"begin": 1884,
											"end": 1897,
											"name": "PUSH",
											"source": 4,
											"value": "4"
										},
										{
											"begin": 1884,
											"end": 1897,
											"name": "SLOAD",
											"source": 4
										},
										{
											"begin": 1884,
											"end": 1901,
											"name": "PUSH [tag]",
											"source": 4,
											"value": "79"
										},
										{
											"begin": 1884,
											"end": 1901,
											"name": "SWAP1",
											"source": 4
										},
										{
											"begin": 1884,
											"end": 1909,
											"name": "SWAP2",
											"source": 4
										},
										{
											"begin": 1884,
											"end": 1909,
											"name": "SWAP1",
											"source": 4
										},
										{
											"begin": 1884,
											"end": 1909,
											"name": "PUSH",
											"source": 4,
											"value": "FFFFFFFF"
										},
										{
											"begin": 1884,
											"end": 1909,
											"name": "AND",
											"source": 4
										},
										{
											"begin": 1884,
											"end": 1909,
											"name": "JUMP",
											"source": 4,
											"value": "[in]"
										},
										{
											"begin": 1884,
											"end": 1909,
											"name": "tag",
											"source": 4,
											"value": "78"
										},
										{
											"begin": 1884,
											"end": 1909,
											"name": "JUMPDEST",
											"source": 4
										},
										{
											"begin": 1877,
											"end": 1909,
											"name": "SWAP1",
											"source": 4
										},
										{
											"begin": 1877,
											"end": 1909,
											"name": "POP",
											"source": 4
										},
										{
											"begin": 1810,
											"end": 1917,
											"name": "SWAP1",
											"source": 4
										},
										{
											"begin": 1810,
											"end": 1917,
											"name": "JUMP",
											"source": 4,
											"value": "[out]"
										},
										{
											"begin": 1608,
											"end": 1697,
											"name": "tag",
											"source": 4,
											"value": "44"
										},
										{
											"begin": 1608,
											"end": 1697,
											"name": "JUMPDEST",
											"source": 4
										},
										{
											"begin": 1680,
											"end": 1689,
											"name": "PUSH",
											"source": 4,
											"value": "3"
										},
										{
											"begin": 1680,
											"end": 1689,
											"name": "SLOAD",
											"source": 4
										},
										{
											"begin": 1608,
											"end": 1697,
											"name": "SWAP1",
											"source": 4
										},
										{
											"begin": 1608,
											"end": 1697,
											"name": "JUMP",
											"source": 4,
											"value": "[out]"
										},
										{
											"begin": 2065,
											"end": 2305,
											"name": "tag",
											"source": 0,
											"value": "47"
										},
										{
											"begin": 2065,
											"end": 2305,
											"name": "JUMPDEST",
											"source": 0
										},
										{
											"begin": 1362,
											"end": 1374,
											"name": "PUSH [tag]",
											"source": 0,
											"value": "82"
										},
										{
											"begin": 1362,
											"end": 1372,
											"name": "PUSH [tag]",
											"source": 0,
											"value": "60"
										},
										{
											"begin": 1362,
											"end": 1374,
											"name": "JUMP",
											"source": 0,
											"value": "[in]"
										},
										{
											"begin": 1362,
											"end": 1374,
											"name": "tag",
											"source": 0,
											"value": "82"
										},
										{
											"begin": 1362,
											"end": 1374,
											"name": "JUMPDEST",
											"source": 0
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "1"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "1"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "A0"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SHL",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SUB",
											"source": -1
										},
										{
											"begin": 1351,
											"end": 1374,
											"name": "AND",
											"source": 0
										},
										{
											"begin": 1351,
											"end": 1358,
											"name": "PUSH [tag]",
											"source": 0,
											"value": "83"
										},
										{
											"begin": 1351,
											"end": 1356,
											"name": "PUSH [tag]",
											"source": 0,
											"value": "36"
										},
										{
											"begin": 1351,
											"end": 1358,
											"name": "JUMP",
											"source": 0,
											"value": "[in]"
										},
										{
											"begin": 1351,
											"end": 1358,
											"name": "tag",
											"source": 0,
											"value": "83"
										},
										{
											"begin": 1351,
											"end": 1358,
											"name": "JUMPDEST",
											"source": 0
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "1"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "1"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "A0"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SHL",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SUB",
											"source": -1
										},
										{
											"begin": 1351,
											"end": 1374,
											"name": "AND",
											"source": 0
										},
										{
											"begin": 1351,
											"end": 1374,
											"name": "EQ",
											"source": 0
										},
										{
											"begin": 1343,
											"end": 1411,
											"name": "PUSH [tag]",
											"source": 0,
											"value": "84"
										},
										{
											"begin": 1343,
											"end": 1411,
											"name": "JUMPI",
											"source": 0
										},
										{
											"begin": 1343,
											"end": 1411,
											"name": "PUSH",
											"source": 0,
											"value": "40"
										},
										{
											"begin": 1343,
											"end": 1411,
											"name": "DUP1",
											"source": 0
										},
										{
											"begin": 1343,
											"end": 1411,
											"name": "MLOAD",
											"source": 0
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "461BCD"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "E5"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SHL",
											"source": -1
										},
										{
											"begin": 1343,
											"end": 1411,
											"name": "DUP2",
											"source": 0
										},
										{
											"begin": 1343,
											"end": 1411,
											"name": "MSTORE",
											"source": 0
										},
										{
											"begin": 1343,
											"end": 1411,
											"name": "PUSH",
											"source": 0,
											"value": "20"
										},
										{
											"begin": 1343,
											"end": 1411,
											"name": "PUSH",
											"source": 0,
											"value": "4"
										},
										{
											"begin": 1343,
											"end": 1411,
											"name": "DUP3",
											"source": 0
										},
										{
											"begin": 1343,
											"end": 1411,
											"name": "ADD",
											"source": 0
										},
										{
											"begin": 1343,
											"end": 1411,
											"name": "DUP2",
											"source": 0
										},
										{
											"begin": 1343,
											"end": 1411,
											"name": "SWAP1",
											"source": 0
										},
										{
											"begin": 1343,
											"end": 1411,
											"name": "MSTORE",
											"source": 0
										},
										{
											"begin": 1343,
											"end": 1411,
											"name": "PUSH",
											"source": 0,
											"value": "24"
										},
										{
											"begin": 1343,
											"end": 1411,
											"name": "DUP3",
											"source": 0
										},
										{
											"begin": 1343,
											"end": 1411,
											"name": "ADD",
											"source": 0
										},
										{
											"begin": 1343,
											"end": 1411,
											"name": "MSTORE",
											"source": 0
										},
										{
											"begin": 1343,
											"end": 1411,
											"name": "PUSH",
											"source": 0,
											"value": "4F776E61626C653A2063616C6C6572206973206E6F7420746865206F776E6572"
										},
										{
											"begin": 1343,
											"end": 1411,
											"name": "PUSH",
											"source": 0,
											"value": "44"
										},
										{
											"begin": 1343,
											"end": 1411,
											"name": "DUP3",
											"source": 0
										},
										{
											"begin": 1343,
											"end": 1411,
											"name": "ADD",
											"source": 0
										},
										{
											"begin": 1343,
											"end": 1411,
											"name": "MSTORE",
											"source": 0
										},
										{
											"begin": 1343,
											"end": 1411,
											"name": "SWAP1",
											"source": 0
										},
										{
											"begin": 1343,
											"end": 1411,
											"name": "MLOAD",
											"source": 0
										},
										{
											"begin": 1343,
											"end": 1411,
											"name": "SWAP1",
											"source": 0
										},
										{
											"begin": 1343,
											"end": 1411,
											"name": "DUP2",
											"source": 0
										},
										{
											"begin": 1343,
											"end": 1411,
											"name": "SWAP1",
											"source": 0
										},
										{
											"begin": 1343,
											"end": 1411,
											"name": "SUB",
											"source": 0
										},
										{
											"begin": 1343,
											"end": 1411,
											"name": "PUSH",
											"source": 0,
											"value": "64"
										},
										{
											"begin": 1343,
											"end": 1411,
											"name": "ADD",
											"source": 0
										},
										{
											"begin": 1343,
											"end": 1411,
											"name": "SWAP1",
											"source": 0
										},
										{
											"begin": 1343,
											"end": 1411,
											"name": "REVERT",
											"source": 0
										},
										{
											"begin": 1343,
											"end": 1411,
											"name": "tag",
											"source": 0,
											"value": "84"
										},
										{
											"begin": 1343,
											"end": 1411,
											"name": "JUMPDEST",
											"source": 0
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "1"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "1"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "A0"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SHL",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SUB",
											"source": -1
										},
										{
											"begin": 2153,
											"end": 2175,
											"name": "DUP2",
											"source": 0
										},
										{
											"begin": 2153,
											"end": 2175,
											"name": "AND",
											"source": 0
										},
										{
											"begin": 2145,
											"end": 2218,
											"name": "PUSH [tag]",
											"source": 0,
											"value": "86"
										},
										{
											"begin": 2145,
											"end": 2218,
											"name": "JUMPI",
											"source": 0
										},
										{
											"begin": 2145,
											"end": 2218,
											"name": "PUSH",
											"source": 0,
											"value": "40"
										},
										{
											"begin": 2145,
											"end": 2218,
											"name": "MLOAD",
											"source": 0
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "461BCD"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "E5"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SHL",
											"source": -1
										},
										{
											"begin": 2145,
											"end": 2218,
											"name": "DUP2",
											"source": 0
										},
										{
											"begin": 2145,
											"end": 2218,
											"name": "MSTORE",
											"source": 0
										},
										{
											"begin": 2145,
											"end": 2218,
											"name": "PUSH",
											"source": 0,
											"value": "4"
										},
										{
											"begin": 2145,
											"end": 2218,
											"name": "ADD",
											"source": 0
										},
										{
											"begin": 2145,
											"end": 2218,
											"name": "DUP1",
											"source": 0
										},
										{
											"begin": 2145,
											"end": 2218,
											"name": "DUP1",
											"source": 0
										},
										{
											"begin": 2145,
											"end": 2218,
											"name": "PUSH",
											"source": 0,
											"value": "20"
										},
										{
											"begin": 2145,
											"end": 2218,
											"name": "ADD",
											"source": 0
										},
										{
											"begin": 2145,
											"end": 2218,
											"name": "DUP3",
											"source": 0
										},
										{
											"begin": 2145,
											"end": 2218,
											"name": "DUP2",
											"source": 0
										},
										{
											"begin": 2145,
											"end": 2218,
											"name": "SUB",
											"source": 0
										},
										{
											"begin": 2145,
											"end": 2218,
											"name": "DUP3",
											"source": 0
										},
										{
											"begin": 2145,
											"end": 2218,
											"name": "MSTORE",
											"source": 0
										},
										{
											"begin": 2145,
											"end": 2218,
											"name": "PUSH",
											"source": 0,
											"value": "26"
										},
										{
											"begin": 2145,
											"end": 2218,
											"name": "DUP2",
											"source": 0
										},
										{
											"begin": 2145,
											"end": 2218,
											"name": "MSTORE",
											"source": 0
										},
										{
											"begin": 2145,
											"end": 2218,
											"name": "PUSH",
											"source": 0,
											"value": "20"
										},
										{
											"begin": 2145,
											"end": 2218,
											"name": "ADD",
											"source": 0
										},
										{
											"begin": 2145,
											"end": 2218,
											"name": "DUP1",
											"source": 0
										},
										{
											"begin": 2145,
											"end": 2218,
											"name": "PUSH data",
											"source": 0,
											"value": "245F15FF17F551913A7A18385165551503906A406F905AC1C2437281A7CD0CFE"
										},
										{
											"begin": 2145,
											"end": 2218,
											"name": "PUSH",
											"source": 0,
											"value": "26"
										},
										{
											"begin": 2145,
											"end": 2218,
											"name": "SWAP2",
											"source": 0
										},
										{
											"begin": 2145,
											"end": 2218,
											"name": "CODECOPY",
											"source": 0
										},
										{
											"begin": 2145,
											"end": 2218,
											"name": "PUSH",
											"source": 0,
											"value": "40"
										},
										{
											"begin": 2145,
											"end": 2218,
											"name": "ADD",
											"source": 0
										},
										{
											"begin": 2145,
											"end": 2218,
											"name": "SWAP2",
											"source": 0
										},
										{
											"begin": 2145,
											"end": 2218,
											"name": "POP",
											"source": 0
										},
										{
											"begin": 2145,
											"end": 2218,
											"name": "POP",
											"source": 0
										},
										{
											"begin": 2145,
											"end": 2218,
											"name": "PUSH",
											"source": 0,
											"value": "40"
										},
										{
											"begin": 2145,
											"end": 2218,
											"name": "MLOAD",
											"source": 0
										},
										{
											"begin": 2145,
											"end": 2218,
											"name": "DUP1",
											"source": 0
										},
										{
											"begin": 2145,
											"end": 2218,
											"name": "SWAP2",
											"source": 0
										},
										{
											"begin": 2145,
											"end": 2218,
											"name": "SUB",
											"source": 0
										},
										{
											"begin": 2145,
											"end": 2218,
											"name": "SWAP1",
											"source": 0
										},
										{
											"begin": 2145,
											"end": 2218,
											"name": "REVERT",
											"source": 0
										},
										{
											"begin": 2145,
											"end": 2218,
											"name": "tag",
											"source": 0,
											"value": "86"
										},
										{
											"begin": 2145,
											"end": 2218,
											"name": "JUMPDEST",
											"source": 0
										},
										{
											"begin": 2254,
											"end": 2260,
											"name": "PUSH",
											"source": 0,
											"value": "0"
										},
										{
											"begin": 2254,
											"end": 2260,
											"name": "DUP1",
											"source": 0
										},
										{
											"begin": 2254,
											"end": 2260,
											"name": "SLOAD",
											"source": 0
										},
										{
											"begin": 2233,
											"end": 2271,
											"name": "PUSH",
											"source": 0,
											"value": "40"
										},
										{
											"begin": 2233,
											"end": 2271,
											"name": "MLOAD",
											"source": 0
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "1"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "1"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "A0"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SHL",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SUB",
											"source": -1
										},
										{
											"begin": 2233,
											"end": 2271,
											"name": "DUP1",
											"source": 0
										},
										{
											"begin": 2233,
											"end": 2271,
											"name": "DUP6",
											"source": 0
										},
										{
											"begin": 2233,
											"end": 2271,
											"name": "AND",
											"source": 0
										},
										{
											"begin": 2233,
											"end": 2271,
											"name": "SWAP4",
											"source": 0
										},
										{
											"begin": 2254,
											"end": 2260,
											"name": "SWAP3",
											"source": 0
										},
										{
											"begin": 2254,
											"end": 2260,
											"name": "AND",
											"source": 0
										},
										{
											"begin": 2254,
											"end": 2260,
											"name": "SWAP2",
											"source": 0
										},
										{
											"begin": 2233,
											"end": 2271,
											"name": "PUSH",
											"source": 0,
											"value": "8BE0079C531659141344CD1FD0A4F28419497F9722A3DAAFE3B4186F6B6457E0"
										},
										{
											"begin": 2233,
											"end": 2271,
											"name": "SWAP2",
											"source": 0
										},
										{
											"begin": 2233,
											"end": 2271,
											"name": "LOG3",
											"source": 0
										},
										{
											"begin": 2281,
											"end": 2287,
											"name": "PUSH",
											"source": 0,
											"value": "0"
										},
										{
											"begin": 2281,
											"end": 2298,
											"name": "DUP1",
											"source": 0
										},
										{
											"begin": 2281,
											"end": 2298,
											"name": "SLOAD",
											"source": 0
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "1"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "1"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "A0"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SHL",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SUB",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "NOT",
											"source": -1
										},
										{
											"begin": 2281,
											"end": 2298,
											"name": "AND",
											"source": 0
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "1"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "1"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "A0"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SHL",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SUB",
											"source": -1
										},
										{
											"begin": 2281,
											"end": 2298,
											"name": "SWAP3",
											"source": 0
										},
										{
											"begin": 2281,
											"end": 2298,
											"name": "SWAP1",
											"source": 0
										},
										{
											"begin": 2281,
											"end": 2298,
											"name": "SWAP3",
											"source": 0
										},
										{
											"begin": 2281,
											"end": 2298,
											"name": "AND",
											"source": 0
										},
										{
											"begin": 2281,
											"end": 2298,
											"name": "SWAP2",
											"source": 0
										},
										{
											"begin": 2281,
											"end": 2298,
											"name": "SWAP1",
											"source": 0
										},
										{
											"begin": 2281,
											"end": 2298,
											"name": "SWAP2",
											"source": 0
										},
										{
											"begin": 2281,
											"end": 2298,
											"name": "OR",
											"source": 0
										},
										{
											"begin": 2281,
											"end": 2298,
											"name": "SWAP1",
											"source": 0
										},
										{
											"begin": 2281,
											"end": 2298,
											"name": "SSTORE",
											"source": 0
										},
										{
											"begin": 2065,
											"end": 2305,
											"name": "JUMP",
											"source": 0,
											"value": "[out]"
										},
										{
											"begin": 3136,
											"end": 3291,
											"name": "tag",
											"source": 2,
											"value": "48"
										},
										{
											"begin": 3136,
											"end": 3291,
											"name": "JUMPDEST",
											"source": 2
										},
										{
											"begin": 3194,
											"end": 3201,
											"name": "PUSH",
											"source": 2,
											"value": "0"
										},
										{
											"begin": 3226,
											"end": 3227,
											"name": "DUP3",
											"source": 2
										},
										{
											"begin": 3221,
											"end": 3222,
											"name": "DUP3",
											"source": 2
										},
										{
											"begin": 3221,
											"end": 3227,
											"name": "GT",
											"source": 2
										},
										{
											"begin": 3221,
											"end": 3227,
											"name": "ISZERO",
											"source": 2
										},
										{
											"begin": 3213,
											"end": 3262,
											"name": "PUSH [tag]",
											"source": 2,
											"value": "88"
										},
										{
											"begin": 3213,
											"end": 3262,
											"name": "JUMPI",
											"source": 2
										},
										{
											"begin": 3213,
											"end": 3262,
											"name": "PUSH",
											"source": 2,
											"value": "40"
										},
										{
											"begin": 3213,
											"end": 3262,
											"name": "DUP1",
											"source": 2
										},
										{
											"begin": 3213,
											"end": 3262,
											"name": "MLOAD",
											"source": 2
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "461BCD"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "E5"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SHL",
											"source": -1
										},
										{
											"begin": 3213,
											"end": 3262,
											"name": "DUP2",
											"source": 2
										},
										{
											"begin": 3213,
											"end": 3262,
											"name": "MSTORE",
											"source": 2
										},
										{
											"begin": 3213,
											"end": 3262,
											"name": "PUSH",
											"source": 2,
											"value": "20"
										},
										{
											"begin": 3213,
											"end": 3262,
											"name": "PUSH",
											"source": 2,
											"value": "4"
										},
										{
											"begin": 3213,
											"end": 3262,
											"name": "DUP3",
											"source": 2
										},
										{
											"begin": 3213,
											"end": 3262,
											"name": "ADD",
											"source": 2
										},
										{
											"begin": 3213,
											"end": 3262,
											"name": "MSTORE",
											"source": 2
										},
										{
											"begin": 3213,
											"end": 3262,
											"name": "PUSH",
											"source": 2,
											"value": "1E"
										},
										{
											"begin": 3213,
											"end": 3262,
											"name": "PUSH",
											"source": 2,
											"value": "24"
										},
										{
											"begin": 3213,
											"end": 3262,
											"name": "DUP3",
											"source": 2
										},
										{
											"begin": 3213,
											"end": 3262,
											"name": "ADD",
											"source": 2
										},
										{
											"begin": 3213,
											"end": 3262,
											"name": "MSTORE",
											"source": 2
										},
										{
											"begin": 3213,
											"end": 3262,
											"name": "PUSH",
											"source": 2,
											"value": "536166654D6174683A207375627472616374696F6E206F766572666C6F770000"
										},
										{
											"begin": 3213,
											"end": 3262,
											"name": "PUSH",
											"source": 2,
											"value": "44"
										},
										{
											"begin": 3213,
											"end": 3262,
											"name": "DUP3",
											"source": 2
										},
										{
											"begin": 3213,
											"end": 3262,
											"name": "ADD",
											"source": 2
										},
										{
											"begin": 3213,
											"end": 3262,
											"name": "MSTORE",
											"source": 2
										},
										{
											"begin": 3213,
											"end": 3262,
											"name": "SWAP1",
											"source": 2
										},
										{
											"begin": 3213,
											"end": 3262,
											"name": "MLOAD",
											"source": 2
										},
										{
											"begin": 3213,
											"end": 3262,
											"name": "SWAP1",
											"source": 2
										},
										{
											"begin": 3213,
											"end": 3262,
											"name": "DUP2",
											"source": 2
										},
										{
											"begin": 3213,
											"end": 3262,
											"name": "SWAP1",
											"source": 2
										},
										{
											"begin": 3213,
											"end": 3262,
											"name": "SUB",
											"source": 2
										},
										{
											"begin": 3213,
											"end": 3262,
											"name": "PUSH",
											"source": 2,
											"value": "64"
										},
										{
											"begin": 3213,
											"end": 3262,
											"name": "ADD",
											"source": 2
										},
										{
											"begin": 3213,
											"end": 3262,
											"name": "SWAP1",
											"source": 2
										},
										{
											"begin": 3213,
											"end": 3262,
											"name": "REVERT",
											"source": 2
										},
										{
											"begin": 3213,
											"end": 3262,
											"name": "tag",
											"source": 2,
											"value": "88"
										},
										{
											"begin": 3213,
											"end": 3262,
											"name": "JUMPDEST",
											"source": 2
										},
										{
											"begin": -1,
											"end": -1,
											"name": "POP",
											"source": -1
										},
										{
											"begin": 3279,
											"end": 3284,
											"name": "SWAP1",
											"source": 2
										},
										{
											"begin": 3279,
											"end": 3284,
											"name": "SUB",
											"source": 2
										},
										{
											"begin": 3279,
											"end": 3284,
											"name": "SWAP1",
											"source": 2
										},
										{
											"begin": 3136,
											"end": 3291,
											"name": "JUMP",
											"source": 2,
											"value": "[out]"
										},
										{
											"begin": 596,
											"end": 692,
											"name": "tag",
											"source": 1,
											"value": "60"
										},
										{
											"begin": 596,
											"end": 692,
											"name": "JUMPDEST",
											"source": 1
										},
										{
											"begin": 675,
											"end": 685,
											"name": "CALLER",
											"source": 1
										},
										{
											"begin": 596,
											"end": 692,
											"name": "SWAP1",
											"source": 1
										},
										{
											"begin": 596,
											"end": 692,
											"name": "JUMP",
											"source": 1,
											"value": "[out]"
										},
										{
											"begin": 1017,
											"end": 1361,
											"name": "tag",
											"source": 3,
											"value": "65"
										},
										{
											"begin": 1017,
											"end": 1361,
											"name": "JUMPDEST",
											"source": 3
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "1"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "1"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "A0"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SHL",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SUB",
											"source": -1
										},
										{
											"begin": 1108,
											"end": 1134,
											"name": "DUP2",
											"source": 3
										},
										{
											"begin": 1108,
											"end": 1134,
											"name": "AND",
											"source": 3
										},
										{
											"begin": 1086,
											"end": 1207,
											"name": "PUSH [tag]",
											"source": 3,
											"value": "91"
										},
										{
											"begin": 1086,
											"end": 1207,
											"name": "JUMPI",
											"source": 3
										},
										{
											"begin": 1086,
											"end": 1207,
											"name": "PUSH",
											"source": 3,
											"value": "40"
										},
										{
											"begin": 1086,
											"end": 1207,
											"name": "MLOAD",
											"source": 3
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "461BCD"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "E5"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SHL",
											"source": -1
										},
										{
											"begin": 1086,
											"end": 1207,
											"name": "DUP2",
											"source": 3
										},
										{
											"begin": 1086,
											"end": 1207,
											"name": "MSTORE",
											"source": 3
										},
										{
											"begin": 1086,
											"end": 1207,
											"name": "PUSH",
											"source": 3,
											"value": "4"
										},
										{
											"begin": 1086,
											"end": 1207,
											"name": "ADD",
											"source": 3
										},
										{
											"begin": 1086,
											"end": 1207,
											"name": "DUP1",
											"source": 3
										},
										{
											"begin": 1086,
											"end": 1207,
											"name": "DUP1",
											"source": 3
										},
										{
											"begin": 1086,
											"end": 1207,
											"name": "PUSH",
											"source": 3,
											"value": "20"
										},
										{
											"begin": 1086,
											"end": 1207,
											"name": "ADD",
											"source": 3
										},
										{
											"begin": 1086,
											"end": 1207,
											"name": "DUP3",
											"source": 3
										},
										{
											"begin": 1086,
											"end": 1207,
											"name": "DUP2",
											"source": 3
										},
										{
											"begin": 1086,
											"end": 1207,
											"name": "SUB",
											"source": 3
										},
										{
											"begin": 1086,
											"end": 1207,
											"name": "DUP3",
											"source": 3
										},
										{
											"begin": 1086,
											"end": 1207,
											"name": "MSTORE",
											"source": 3
										},
										{
											"begin": 1086,
											"end": 1207,
											"name": "PUSH",
											"source": 3,
											"value": "2D"
										},
										{
											"begin": 1086,
											"end": 1207,
											"name": "DUP2",
											"source": 3
										},
										{
											"begin": 1086,
											"end": 1207,
											"name": "MSTORE",
											"source": 3
										},
										{
											"begin": 1086,
											"end": 1207,
											"name": "PUSH",
											"source": 3,
											"value": "20"
										},
										{
											"begin": 1086,
											"end": 1207,
											"name": "ADD",
											"source": 3
										},
										{
											"begin": 1086,
											"end": 1207,
											"name": "DUP1",
											"source": 3
										},
										{
											"begin": 1086,
											"end": 1207,
											"name": "PUSH data",
											"source": 3,
											"value": "756508C1C0554725DD91CE0028667672A5318D736A5E4BCD98B6BC8FE98C3DC7"
										},
										{
											"begin": 1086,
											"end": 1207,
											"name": "PUSH",
											"source": 3,
											"value": "2D"
										},
										{
											"begin": 1086,
											"end": 1207,
											"name": "SWAP2",
											"source": 3
										},
										{
											"begin": 1086,
											"end": 1207,
											"name": "CODECOPY",
											"source": 3
										},
										{
											"begin": 1086,
											"end": 1207,
											"name": "PUSH",
											"source": 3,
											"value": "40"
										},
										{
											"begin": 1086,
											"end": 1207,
											"name": "ADD",
											"source": 3
										},
										{
											"begin": 1086,
											"end": 1207,
											"name": "SWAP2",
											"source": 3
										},
										{
											"begin": 1086,
											"end": 1207,
											"name": "POP",
											"source": 3
										},
										{
											"begin": 1086,
											"end": 1207,
											"name": "POP",
											"source": 3
										},
										{
											"begin": 1086,
											"end": 1207,
											"name": "PUSH",
											"source": 3,
											"value": "40"
										},
										{
											"begin": 1086,
											"end": 1207,
											"name": "MLOAD",
											"source": 3
										},
										{
											"begin": 1086,
											"end": 1207,
											"name": "DUP1",
											"source": 3
										},
										{
											"begin": 1086,
											"end": 1207,
											"name": "SWAP2",
											"source": 3
										},
										{
											"begin": 1086,
											"end": 1207,
											"name": "SUB",
											"source": 3
										},
										{
											"begin": 1086,
											"end": 1207,
											"name": "SWAP1",
											"source": 3
										},
										{
											"begin": 1086,
											"end": 1207,
											"name": "REVERT",
											"source": 3
										},
										{
											"begin": 1086,
											"end": 1207,
											"name": "tag",
											"source": 3,
											"value": "91"
										},
										{
											"begin": 1086,
											"end": 1207,
											"name": "JUMPDEST",
											"source": 3
										},
										{
											"begin": 1223,
											"end": 1268,
											"name": "PUSH",
											"source": 3,
											"value": "40"
										},
										{
											"begin": 1223,
											"end": 1268,
											"name": "MLOAD",
											"source": 3
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "1"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "1"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "A0"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SHL",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SUB",
											"source": -1
										},
										{
											"begin": 1223,
											"end": 1268,
											"name": "DUP3",
											"source": 3
										},
										{
											"begin": 1223,
											"end": 1268,
											"name": "AND",
											"source": 3
										},
										{
											"begin": 1223,
											"end": 1268,
											"name": "SWAP1",
											"source": 3
										},
										{
											"begin": 1251,
											"end": 1252,
											"name": "PUSH",
											"source": 3,
											"value": "0"
										},
										{
											"begin": 1251,
											"end": 1252,
											"name": "SWAP1",
											"source": 3
										},
										{
											"begin": 1223,
											"end": 1268,
											"name": "PUSH",
											"source": 3,
											"value": "74DA04524D50C64947F5DD5381EF1A4DCA5CBA8ED1D816243F9E48AA0B5617ED"
										},
										{
											"begin": 1223,
											"end": 1268,
											"name": "SWAP1",
											"source": 3
										},
										{
											"begin": 1251,
											"end": 1252,
											"name": "DUP3",
											"source": 3
										},
										{
											"begin": 1251,
											"end": 1252,
											"name": "SWAP1",
											"source": 3
										},
										{
											"begin": 1223,
											"end": 1268,
											"name": "LOG3",
											"source": 3
										},
										{
											"begin": 1279,
											"end": 1318,
											"name": "PUSH [tag]",
											"source": 3,
											"value": "92"
										},
										{
											"begin": 1305,
											"end": 1317,
											"name": "DUP2",
											"source": 3
										},
										{
											"begin": 1279,
											"end": 1304,
											"name": "PUSH [tag]",
											"source": 3,
											"value": "47"
										},
										{
											"begin": 1279,
											"end": 1318,
											"name": "JUMP",
											"source": 3,
											"value": "[in]"
										},
										{
											"begin": 1279,
											"end": 1318,
											"name": "tag",
											"source": 3,
											"value": "92"
										},
										{
											"begin": 1279,
											"end": 1318,
											"name": "JUMPDEST",
											"source": 3
										},
										{
											"begin": 1329,
											"end": 1338,
											"name": "PUSH",
											"source": 3,
											"value": "1"
										},
										{
											"begin": 1329,
											"end": 1353,
											"name": "DUP1",
											"source": 3
										},
										{
											"begin": 1329,
											"end": 1353,
											"name": "SLOAD",
											"source": 3
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "1"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "1"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "A0"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SHL",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SUB",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "NOT",
											"source": -1
										},
										{
											"begin": 1329,
											"end": 1353,
											"name": "AND",
											"source": 3
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "1"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "1"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "A0"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SHL",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SUB",
											"source": -1
										},
										{
											"begin": 1329,
											"end": 1353,
											"name": "SWAP3",
											"source": 3
										},
										{
											"begin": 1329,
											"end": 1353,
											"name": "SWAP1",
											"source": 3
										},
										{
											"begin": 1329,
											"end": 1353,
											"name": "SWAP3",
											"source": 3
										},
										{
											"begin": 1329,
											"end": 1353,
											"name": "AND",
											"source": 3
										},
										{
											"begin": 1329,
											"end": 1353,
											"name": "SWAP2",
											"source": 3
										},
										{
											"begin": 1329,
											"end": 1353,
											"name": "SWAP1",
											"source": 3
										},
										{
											"begin": 1329,
											"end": 1353,
											"name": "SWAP2",
											"source": 3
										},
										{
											"begin": 1329,
											"end": 1353,
											"name": "OR",
											"source": 3
										},
										{
											"begin": 1329,
											"end": 1353,
											"name": "SWAP1",
											"source": 3
										},
										{
											"begin": 1329,
											"end": 1353,
											"name": "SSTORE",
											"source": 3
										},
										{
											"begin": 1017,
											"end": 1361,
											"name": "JUMP",
											"source": 3,
											"value": "[out]"
										},
										{
											"begin": 2690,
											"end": 2865,
											"name": "tag",
											"source": 2,
											"value": "79"
										},
										{
											"begin": 2690,
											"end": 2865,
											"name": "JUMPDEST",
											"source": 2
										},
										{
											"begin": 2748,
											"end": 2755,
											"name": "PUSH",
											"source": 2,
											"value": "0"
										},
										{
											"begin": 2779,
											"end": 2784,
											"name": "DUP3",
											"source": 2
										},
										{
											"begin": 2779,
											"end": 2784,
											"name": "DUP3",
											"source": 2
										},
										{
											"begin": 2779,
											"end": 2784,
											"name": "ADD",
											"source": 2
										},
										{
											"begin": 2802,
											"end": 2808,
											"name": "DUP4",
											"source": 2
										},
										{
											"begin": 2802,
											"end": 2808,
											"name": "DUP2",
											"source": 2
										},
										{
											"begin": 2802,
											"end": 2808,
											"name": "LT",
											"source": 2
										},
										{
											"begin": 2802,
											"end": 2808,
											"name": "ISZERO",
											"source": 2
										},
										{
											"begin": 2794,
											"end": 2840,
											"name": "PUSH [tag]",
											"source": 2,
											"value": "94"
										},
										{
											"begin": 2794,
											"end": 2840,
											"name": "JUMPI",
											"source": 2
										},
										{
											"begin": 2794,
											"end": 2840,
											"name": "PUSH",
											"source": 2,
											"value": "40"
										},
										{
											"begin": 2794,
											"end": 2840,
											"name": "DUP1",
											"source": 2
										},
										{
											"begin": 2794,
											"end": 2840,
											"name": "MLOAD",
											"source": 2
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "461BCD"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "E5"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SHL",
											"source": -1
										},
										{
											"begin": 2794,
											"end": 2840,
											"name": "DUP2",
											"source": 2
										},
										{
											"begin": 2794,
											"end": 2840,
											"name": "MSTORE",
											"source": 2
										},
										{
											"begin": 2794,
											"end": 2840,
											"name": "PUSH",
											"source": 2,
											"value": "20"
										},
										{
											"begin": 2794,
											"end": 2840,
											"name": "PUSH",
											"source": 2,
											"value": "4"
										},
										{
											"begin": 2794,
											"end": 2840,
											"name": "DUP3",
											"source": 2
										},
										{
											"begin": 2794,
											"end": 2840,
											"name": "ADD",
											"source": 2
										},
										{
											"begin": 2794,
											"end": 2840,
											"name": "MSTORE",
											"source": 2
										},
										{
											"begin": 2794,
											"end": 2840,
											"name": "PUSH",
											"source": 2,
											"value": "1B"
										},
										{
											"begin": 2794,
											"end": 2840,
											"name": "PUSH",
											"source": 2,
											"value": "24"
										},
										{
											"begin": 2794,
											"end": 2840,
											"name": "DUP3",
											"source": 2
										},
										{
											"begin": 2794,
											"end": 2840,
											"name": "ADD",
											"source": 2
										},
										{
											"begin": 2794,
											"end": 2840,
											"name": "MSTORE",
											"source": 2
										},
										{
											"begin": 2794,
											"end": 2840,
											"name": "PUSH",
											"source": 2,
											"value": "536166654D6174683A206164646974696F6E206F766572666C6F770000000000"
										},
										{
											"begin": 2794,
											"end": 2840,
											"name": "PUSH",
											"source": 2,
											"value": "44"
										},
										{
											"begin": 2794,
											"end": 2840,
											"name": "DUP3",
											"source": 2
										},
										{
											"begin": 2794,
											"end": 2840,
											"name": "ADD",
											"source": 2
										},
										{
											"begin": 2794,
											"end": 2840,
											"name": "MSTORE",
											"source": 2
										},
										{
											"begin": 2794,
											"end": 2840,
											"name": "SWAP1",
											"source": 2
										},
										{
											"begin": 2794,
											"end": 2840,
											"name": "MLOAD",
											"source": 2
										},
										{
											"begin": 2794,
											"end": 2840,
											"name": "SWAP1",
											"source": 2
										},
										{
											"begin": 2794,
											"end": 2840,
											"name": "DUP2",
											"source": 2
										},
										{
											"begin": 2794,
											"end": 2840,
											"name": "SWAP1",
											"source": 2
										},
										{
											"begin": 2794,
											"end": 2840,
											"name": "SUB",
											"source": 2
										},
										{
											"begin": 2794,
											"end": 2840,
											"name": "PUSH",
											"source": 2,
											"value": "64"
										},
										{
											"begin": 2794,
											"end": 2840,
											"name": "ADD",
											"source": 2
										},
										{
											"begin": 2794,
											"end": 2840,
											"name": "SWAP1",
											"source": 2
										},
										{
											"begin": 2794,
											"end": 2840,
											"name": "REVERT",
											"source": 2
										},
										{
											"begin": 2794,
											"end": 2840,
											"name": "tag",
											"source": 2,
											"value": "94"
										},
										{
											"begin": 2794,
											"end": 2840,
											"name": "JUMPDEST",
											"source": 2
										},
										{
											"begin": 2857,
											"end": 2858,
											"name": "SWAP4",
											"source": 2
										},
										{
											"begin": 2690,
											"end": 2865,
											"name": "SWAP3",
											"source": 2
										},
										{
											"begin": -1,
											"end": -1,
											"name": "POP",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "POP",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "POP",
											"source": -1
										},
										{
											"begin": 2690,
											"end": 2865,
											"name": "JUMP",
											"source": 2,
											"value": "[out]"
										}
									],
									".data": {
										"245F15FF17F551913A7A18385165551503906A406F905AC1C2437281A7CD0CFE": "4f776e61626c653a206e6577206f776e657220697320746865207a65726f2061646472657373",
										"756508C1C0554725DD91CE0028667672A5318D736A5E4BCD98B6BC8FE98C3DC7": "6f70657261746f723a207a65726f206164647265737320676976656e20666f72206e6577206f70657261746f72",
										"A62BFDBA5053072911B63B0F6325B0E83FCD28B5A847D97EFDD966FEB4DAAAFB": "6f70657261746f723a2063616c6c6572206973206e6f7420746865206f70657261746f72"
									}
								}
							}
						},
						"methodIdentifiers": {
							"getCurrentEpoch()": "b97dd9e2",
							"getLastEpochTime()": "ba522458",
							"getPeriod()": "1ed24195",
							"getStartTime()": "c828371e",
							"isOperator()": "4456eda2",
							"nextEpochPoint()": "c5967c26",
							"operator()": "570ca735",
							"owner()": "8da5cb5b",
							"renounceOwnership()": "715018a6",
							"setEpoch(uint256)": "0ceb2cef",
							"setPeriod(uint256)": "0f3a9f65",
							"transferOperator(address)": "29605e77",
							"transferOwnership(address)": "f2fde38b"
						}
					},
					"metadata": "{\"compiler\":{\"version\":\"0.6.12+commit.27d51765\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_period\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_startTime\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_startEpoch\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOperator\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOperator\",\"type\":\"address\"}],\"name\":\"OperatorTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"getCurrentEpoch\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getLastEpochTime\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getPeriod\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getStartTime\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"isOperator\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"nextEpochPoint\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"operator\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_epoch\",\"type\":\"uint256\"}],\"name\":\"setEpoch\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_period\",\"type\":\"uint256\"}],\"name\":\"setPeriod\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOperator_\",\"type\":\"address\"}],\"name\":\"transferOperator\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}],\"devdoc\":{\"kind\":\"dev\",\"methods\":{\"owner()\":{\"details\":\"Returns the address of the current owner.\"},\"renounceOwnership()\":{\"details\":\"Leaves the contract without owner. It will not be possible to call `onlyOwner` functions anymore. Can only be called by the current owner. NOTE: Renouncing ownership will leave the contract without an owner, thereby removing any functionality that is only available to the owner.\"},\"transferOwnership(address)\":{\"details\":\"Transfers ownership of the contract to a new account (`newOwner`). Can only be called by the current owner.\"}},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/utils/Epoch.sol\":\"Epoch\"},\"evmVersion\":\"istanbul\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\"},\"optimizer\":{\"enabled\":true,\"runs\":200},\"remappings\":[]},\"sources\":{\"@openzeppelin/contracts/access/Ownable.sol\":{\"keccak256\":\"0x58edc78e5f20b754362ecaac32003e6461a67019985e513c5b0f75d252a866ee\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://5c8e7676e6fdfc7b2af63e85e2190716cafc9fa6eb17a310a7c049b7176a79f9\",\"dweb:/ipfs/QmPthc9W2xTrA3QBQMQu3mqfH22WGx8eW3uKfiC5LYxZYF\"]},\"@openzeppelin/contracts/utils/Context.sol\":{\"keccak256\":\"0x7edbc679249d31c4ee2205417fc929f8bfabb9ed68eb59dfd3be1f8005bff9a6\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://5ab93b0420d7df250f88a163fdff222060623e7eae18d873165d9f5f92f74492\",\"dweb:/ipfs/QmRQZ3bP5XPRH3FFGA3iDWpYh81z2wSPBBR76frtH3kx33\"]},\"@openzeppelin/contracts/utils/math/SafeMath.sol\":{\"keccak256\":\"0xd2b581fa833d3b2ac16dde253bca297b5c9f112536ae70b06436b6299445110c\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://2c8ce112a134d2409b1320939e6eb24f33659dec4904c77e9ee0e412f76229b2\",\"dweb:/ipfs/Qmath4xcbFW6VFFJkXeMGa151ZBCipXopKrN1RTD87i8jh\"]},\"contracts/owner/Operator.sol\":{\"keccak256\":\"0x7d353d9d35813ff7fc6ec81cae80d0a0e1bb18285cf3e683fbbb227a827ab5f3\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://edc3c18720665592f22904ffa2bbc5b22afa2892e209bac0d570bbc3fe2b9300\",\"dweb:/ipfs/QmUD5Fyi7vWUqsJrcQ11SLzk9eVBcH6CSenj688QhkALpS\"]},\"contracts/utils/Epoch.sol\":{\"keccak256\":\"0x4accc3900905676cea21cbccd635075b0020c730b7313779d99ab87717ca10f7\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://04d07d989bc69e7856ad97f9fa1fa2ccec070c9dfebb68cf4a61ebc10c85bbcb\",\"dweb:/ipfs/QmPKPWsgSYzaPJY8VYTPdkDHHxgpibzctFJQVjJmhsJetx\"]}},\"version\":1}",
					"storageLayout": {
						"storage": [
							{
								"astId": 7,
								"contract": "contracts/utils/Epoch.sol:Epoch",
								"label": "_owner",
								"offset": 0,
								"slot": "0",
								"type": "t_address"
							},
							{
								"astId": 528,
								"contract": "contracts/utils/Epoch.sol:Epoch",
								"label": "_operator",
								"offset": 0,
								"slot": "1",
								"type": "t_address"
							},
							{
								"astId": 640,
								"contract": "contracts/utils/Epoch.sol:Epoch",
								"label": "period",
								"offset": 0,
								"slot": "2",
								"type": "t_uint256"
							},
							{
								"astId": 642,
								"contract": "contracts/utils/Epoch.sol:Epoch",
								"label": "startTime",
								"offset": 0,
								"slot": "3",
								"type": "t_uint256"
							},
							{
								"astId": 644,
								"contract": "contracts/utils/Epoch.sol:Epoch",
								"label": "lastEpochTime",
								"offset": 0,
								"slot": "4",
								"type": "t_uint256"
							},
							{
								"astId": 646,
								"contract": "contracts/utils/Epoch.sol:Epoch",
								"label": "epoch",
								"offset": 0,
								"slot": "5",
								"type": "t_uint256"
							}
						],
						"types": {
							"t_address": {
								"encoding": "inplace",
								"label": "address",
								"numberOfBytes": "20"
							},
							"t_uint256": {
								"encoding": "inplace",
								"label": "uint256",
								"numberOfBytes": "32"
							}
						}
					},
					"userdoc": {
						"kind": "user",
						"methods": {},
						"version": 1
					}
				}
			}
		},
		"errors": [
			{
				"component": "general",
				"errorCode": "2018",
				"formattedMessage": "@openzeppelin/contracts/utils/Context.sol:20:5: Warning: Function state mutability can be restricted to pure\n    function _msgData() internal view virtual returns (bytes calldata) {\n    ^ (Relevant source part starts here and spans across multiple lines).\n",
				"message": "Function state mutability can be restricted to pure",
				"severity": "warning",
				"sourceLocation": {
					"end": 797,
					"file": "@openzeppelin/contracts/utils/Context.sol",
					"start": 698
				},
				"type": "Warning"
			}
		],
		"sources": {
			"@openzeppelin/contracts/access/Ownable.sol": {
				"ast": {
					"absolutePath": "@openzeppelin/contracts/access/Ownable.sol",
					"exportedSymbols": {
						"Ownable": [
							109
						]
					},
					"id": 110,
					"license": "MIT",
					"nodeType": "SourceUnit",
					"nodes": [
						{
							"id": 1,
							"literals": [
								"solidity",
								">=",
								"0.6",
								".0",
								"<",
								"0.8",
								".0"
							],
							"nodeType": "PragmaDirective",
							"src": "87:31:0"
						},
						{
							"absolutePath": "@openzeppelin/contracts/utils/Context.sol",
							"file": "../utils/Context.sol",
							"id": 2,
							"nodeType": "ImportDirective",
							"scope": 110,
							"sourceUnit": 132,
							"src": "120:30:0",
							"symbolAliases": [],
							"unitAlias": ""
						},
						{
							"abstract": true,
							"baseContracts": [
								{
									"arguments": null,
									"baseName": {
										"contractScope": null,
										"id": 4,
										"name": "Context",
										"nodeType": "UserDefinedTypeName",
										"referencedDeclaration": 131,
										"src": "675:7:0",
										"typeDescriptions": {
											"typeIdentifier": "t_contract$_Context_$131",
											"typeString": "contract Context"
										}
									},
									"id": 5,
									"nodeType": "InheritanceSpecifier",
									"src": "675:7:0"
								}
							],
							"contractDependencies": [
								131
							],
							"contractKind": "contract",
							"documentation": {
								"id": 3,
								"nodeType": "StructuredDocumentation",
								"src": "151:494:0",
								"text": " @dev Contract module which provides a basic access control mechanism, where\n there is an account (an owner) that can be granted exclusive access to\n specific functions.\n By default, the owner account will be the one that deploys the contract. This\n can later be changed with {transferOwnership}.\n This module is used through inheritance. It will make available the modifier\n `onlyOwner`, which can be applied to your functions to restrict their use to\n the owner."
							},
							"fullyImplemented": true,
							"id": 109,
							"linearizedBaseContracts": [
								109,
								131
							],
							"name": "Ownable",
							"nodeType": "ContractDefinition",
							"nodes": [
								{
									"constant": false,
									"id": 7,
									"mutability": "mutable",
									"name": "_owner",
									"nodeType": "VariableDeclaration",
									"overrides": null,
									"scope": 109,
									"src": "689:22:0",
									"stateVariable": true,
									"storageLocation": "default",
									"typeDescriptions": {
										"typeIdentifier": "t_address",
										"typeString": "address"
									},
									"typeName": {
										"id": 6,
										"name": "address",
										"nodeType": "ElementaryTypeName",
										"src": "689:7:0",
										"stateMutability": "nonpayable",
										"typeDescriptions": {
											"typeIdentifier": "t_address",
											"typeString": "address"
										}
									},
									"value": null,
									"visibility": "private"
								},
								{
									"anonymous": false,
									"documentation": null,
									"id": 13,
									"name": "OwnershipTransferred",
									"nodeType": "EventDefinition",
									"parameters": {
										"id": 12,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 9,
												"indexed": true,
												"mutability": "mutable",
												"name": "previousOwner",
												"nodeType": "VariableDeclaration",
												"overrides": null,
												"scope": 13,
												"src": "745:29:0",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 8,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "745:7:0",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"value": null,
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 11,
												"indexed": true,
												"mutability": "mutable",
												"name": "newOwner",
												"nodeType": "VariableDeclaration",
												"overrides": null,
												"scope": 13,
												"src": "776:24:0",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 10,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "776:7:0",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"value": null,
												"visibility": "internal"
											}
										],
										"src": "744:57:0"
									},
									"src": "718:84:0"
								},
								{
									"body": {
										"id": 34,
										"nodeType": "Block",
										"src": "928:135:0",
										"statements": [
											{
												"assignments": [
													18
												],
												"declarations": [
													{
														"constant": false,
														"id": 18,
														"mutability": "mutable",
														"name": "msgSender",
														"nodeType": "VariableDeclaration",
														"overrides": null,
														"scope": 34,
														"src": "938:17:0",
														"stateVariable": false,
														"storageLocation": "default",
														"typeDescriptions": {
															"typeIdentifier": "t_address",
															"typeString": "address"
														},
														"typeName": {
															"id": 17,
															"name": "address",
															"nodeType": "ElementaryTypeName",
															"src": "938:7:0",
															"stateMutability": "nonpayable",
															"typeDescriptions": {
																"typeIdentifier": "t_address",
																"typeString": "address"
															}
														},
														"value": null,
														"visibility": "internal"
													}
												],
												"id": 21,
												"initialValue": {
													"argumentTypes": null,
													"arguments": [],
													"expression": {
														"argumentTypes": [],
														"id": 19,
														"name": "_msgSender",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 121,
														"src": "958:10:0",
														"typeDescriptions": {
															"typeIdentifier": "t_function_internal_view$__$returns$_t_address_$",
															"typeString": "function () view returns (address)"
														}
													},
													"id": 20,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"kind": "functionCall",
													"lValueRequested": false,
													"names": [],
													"nodeType": "FunctionCall",
													"src": "958:12:0",
													"tryCall": false,
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"nodeType": "VariableDeclarationStatement",
												"src": "938:32:0"
											},
											{
												"expression": {
													"argumentTypes": null,
													"id": 24,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"lValueRequested": false,
													"leftHandSide": {
														"argumentTypes": null,
														"id": 22,
														"name": "_owner",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 7,
														"src": "980:6:0",
														"typeDescriptions": {
															"typeIdentifier": "t_address",
															"typeString": "address"
														}
													},
													"nodeType": "Assignment",
													"operator": "=",
													"rightHandSide": {
														"argumentTypes": null,
														"id": 23,
														"name": "msgSender",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 18,
														"src": "989:9:0",
														"typeDescriptions": {
															"typeIdentifier": "t_address",
															"typeString": "address"
														}
													},
													"src": "980:18:0",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"id": 25,
												"nodeType": "ExpressionStatement",
												"src": "980:18:0"
											},
											{
												"eventCall": {
													"argumentTypes": null,
													"arguments": [
														{
															"argumentTypes": null,
															"arguments": [
																{
																	"argumentTypes": null,
																	"hexValue": "30",
																	"id": 29,
																	"isConstant": false,
																	"isLValue": false,
																	"isPure": true,
																	"kind": "number",
																	"lValueRequested": false,
																	"nodeType": "Literal",
																	"src": "1042:1:0",
																	"subdenomination": null,
																	"typeDescriptions": {
																		"typeIdentifier": "t_rational_0_by_1",
																		"typeString": "int_const 0"
																	},
																	"value": "0"
																}
															],
															"expression": {
																"argumentTypes": [
																	{
																		"typeIdentifier": "t_rational_0_by_1",
																		"typeString": "int_const 0"
																	}
																],
																"id": 28,
																"isConstant": false,
																"isLValue": false,
																"isPure": true,
																"lValueRequested": false,
																"nodeType": "ElementaryTypeNameExpression",
																"src": "1034:7:0",
																"typeDescriptions": {
																	"typeIdentifier": "t_type$_t_address_$",
																	"typeString": "type(address)"
																},
																"typeName": {
																	"id": 27,
																	"name": "address",
																	"nodeType": "ElementaryTypeName",
																	"src": "1034:7:0",
																	"typeDescriptions": {
																		"typeIdentifier": null,
																		"typeString": null
																	}
																}
															},
															"id": 30,
															"isConstant": false,
															"isLValue": false,
															"isPure": true,
															"kind": "typeConversion",
															"lValueRequested": false,
															"names": [],
															"nodeType": "FunctionCall",
															"src": "1034:10:0",
															"tryCall": false,
															"typeDescriptions": {
																"typeIdentifier": "t_address_payable",
																"typeString": "address payable"
															}
														},
														{
															"argumentTypes": null,
															"id": 31,
															"name": "msgSender",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 18,
															"src": "1046:9:0",
															"typeDescriptions": {
																"typeIdentifier": "t_address",
																"typeString": "address"
															}
														}
													],
													"expression": {
														"argumentTypes": [
															{
																"typeIdentifier": "t_address_payable",
																"typeString": "address payable"
															},
															{
																"typeIdentifier": "t_address",
																"typeString": "address"
															}
														],
														"id": 26,
														"name": "OwnershipTransferred",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 13,
														"src": "1013:20:0",
														"typeDescriptions": {
															"typeIdentifier": "t_function_event_nonpayable$_t_address_$_t_address_$returns$__$",
															"typeString": "function (address,address)"
														}
													},
													"id": 32,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"kind": "functionCall",
													"lValueRequested": false,
													"names": [],
													"nodeType": "FunctionCall",
													"src": "1013:43:0",
													"tryCall": false,
													"typeDescriptions": {
														"typeIdentifier": "t_tuple$__$",
														"typeString": "tuple()"
													}
												},
												"id": 33,
												"nodeType": "EmitStatement",
												"src": "1008:48:0"
											}
										]
									},
									"documentation": {
										"id": 14,
										"nodeType": "StructuredDocumentation",
										"src": "808:91:0",
										"text": " @dev Initializes the contract setting the deployer as the initial owner."
									},
									"id": 35,
									"implemented": true,
									"kind": "constructor",
									"modifiers": [],
									"name": "",
									"nodeType": "FunctionDefinition",
									"overrides": null,
									"parameters": {
										"id": 15,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "916:2:0"
									},
									"returnParameters": {
										"id": 16,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "928:0:0"
									},
									"scope": 109,
									"src": "904:159:0",
									"stateMutability": "nonpayable",
									"virtual": false,
									"visibility": "internal"
								},
								{
									"body": {
										"id": 43,
										"nodeType": "Block",
										"src": "1194:30:0",
										"statements": [
											{
												"expression": {
													"argumentTypes": null,
													"id": 41,
													"name": "_owner",
													"nodeType": "Identifier",
													"overloadedDeclarations": [],
													"referencedDeclaration": 7,
													"src": "1211:6:0",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"functionReturnParameters": 40,
												"id": 42,
												"nodeType": "Return",
												"src": "1204:13:0"
											}
										]
									},
									"documentation": {
										"id": 36,
										"nodeType": "StructuredDocumentation",
										"src": "1069:65:0",
										"text": " @dev Returns the address of the current owner."
									},
									"functionSelector": "8da5cb5b",
									"id": 44,
									"implemented": true,
									"kind": "function",
									"modifiers": [],
									"name": "owner",
									"nodeType": "FunctionDefinition",
									"overrides": null,
									"parameters": {
										"id": 37,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "1153:2:0"
									},
									"returnParameters": {
										"id": 40,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 39,
												"mutability": "mutable",
												"name": "",
												"nodeType": "VariableDeclaration",
												"overrides": null,
												"scope": 44,
												"src": "1185:7:0",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 38,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "1185:7:0",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"value": null,
												"visibility": "internal"
											}
										],
										"src": "1184:9:0"
									},
									"scope": 109,
									"src": "1139:85:0",
									"stateMutability": "view",
									"virtual": true,
									"visibility": "public"
								},
								{
									"body": {
										"id": 57,
										"nodeType": "Block",
										"src": "1333:96:0",
										"statements": [
											{
												"expression": {
													"argumentTypes": null,
													"arguments": [
														{
															"argumentTypes": null,
															"commonType": {
																"typeIdentifier": "t_address",
																"typeString": "address"
															},
															"id": 52,
															"isConstant": false,
															"isLValue": false,
															"isPure": false,
															"lValueRequested": false,
															"leftExpression": {
																"argumentTypes": null,
																"arguments": [],
																"expression": {
																	"argumentTypes": [],
																	"id": 48,
																	"name": "owner",
																	"nodeType": "Identifier",
																	"overloadedDeclarations": [],
																	"referencedDeclaration": 44,
																	"src": "1351:5:0",
																	"typeDescriptions": {
																		"typeIdentifier": "t_function_internal_view$__$returns$_t_address_$",
																		"typeString": "function () view returns (address)"
																	}
																},
																"id": 49,
																"isConstant": false,
																"isLValue": false,
																"isPure": false,
																"kind": "functionCall",
																"lValueRequested": false,
																"names": [],
																"nodeType": "FunctionCall",
																"src": "1351:7:0",
																"tryCall": false,
																"typeDescriptions": {
																	"typeIdentifier": "t_address",
																	"typeString": "address"
																}
															},
															"nodeType": "BinaryOperation",
															"operator": "==",
															"rightExpression": {
																"argumentTypes": null,
																"arguments": [],
																"expression": {
																	"argumentTypes": [],
																	"id": 50,
																	"name": "_msgSender",
																	"nodeType": "Identifier",
																	"overloadedDeclarations": [],
																	"referencedDeclaration": 121,
																	"src": "1362:10:0",
																	"typeDescriptions": {
																		"typeIdentifier": "t_function_internal_view$__$returns$_t_address_$",
																		"typeString": "function () view returns (address)"
																	}
																},
																"id": 51,
																"isConstant": false,
																"isLValue": false,
																"isPure": false,
																"kind": "functionCall",
																"lValueRequested": false,
																"names": [],
																"nodeType": "FunctionCall",
																"src": "1362:12:0",
																"tryCall": false,
																"typeDescriptions": {
																	"typeIdentifier": "t_address",
																	"typeString": "address"
																}
															},
															"src": "1351:23:0",
															"typeDescriptions": {
																"typeIdentifier": "t_bool",
																"typeString": "bool"
															}
														},
														{
															"argumentTypes": null,
															"hexValue": "4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e6572",
															"id": 53,
															"isConstant": false,
															"isLValue": false,
															"isPure": true,
															"kind": "string",
															"lValueRequested": false,
															"nodeType": "Literal",
															"src": "1376:34:0",
															"subdenomination": null,
															"typeDescriptions": {
																"typeIdentifier": "t_stringliteral_9924ebdf1add33d25d4ef888e16131f0a5687b0580a36c21b5c301a6c462effe",
																"typeString": "literal_string \"Ownable: caller is not the owner\""
															},
															"value": "Ownable: caller is not the owner"
														}
													],
													"expression": {
														"argumentTypes": [
															{
																"typeIdentifier": "t_bool",
																"typeString": "bool"
															},
															{
																"typeIdentifier": "t_stringliteral_9924ebdf1add33d25d4ef888e16131f0a5687b0580a36c21b5c301a6c462effe",
																"typeString": "literal_string \"Ownable: caller is not the owner\""
															}
														],
														"id": 47,
														"name": "require",
														"nodeType": "Identifier",
														"overloadedDeclarations": [
															-18,
															-18
														],
														"referencedDeclaration": -18,
														"src": "1343:7:0",
														"typeDescriptions": {
															"typeIdentifier": "t_function_require_pure$_t_bool_$_t_string_memory_ptr_$returns$__$",
															"typeString": "function (bool,string memory) pure"
														}
													},
													"id": 54,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"kind": "functionCall",
													"lValueRequested": false,
													"names": [],
													"nodeType": "FunctionCall",
													"src": "1343:68:0",
													"tryCall": false,
													"typeDescriptions": {
														"typeIdentifier": "t_tuple$__$",
														"typeString": "tuple()"
													}
												},
												"id": 55,
												"nodeType": "ExpressionStatement",
												"src": "1343:68:0"
											},
											{
												"id": 56,
												"nodeType": "PlaceholderStatement",
												"src": "1421:1:0"
											}
										]
									},
									"documentation": {
										"id": 45,
										"nodeType": "StructuredDocumentation",
										"src": "1230:77:0",
										"text": " @dev Throws if called by any account other than the owner."
									},
									"id": 58,
									"name": "onlyOwner",
									"nodeType": "ModifierDefinition",
									"overrides": null,
									"parameters": {
										"id": 46,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "1330:2:0"
									},
									"src": "1312:117:0",
									"virtual": false,
									"visibility": "internal"
								},
								{
									"body": {
										"id": 79,
										"nodeType": "Block",
										"src": "1825:91:0",
										"statements": [
											{
												"eventCall": {
													"argumentTypes": null,
													"arguments": [
														{
															"argumentTypes": null,
															"id": 65,
															"name": "_owner",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 7,
															"src": "1861:6:0",
															"typeDescriptions": {
																"typeIdentifier": "t_address",
																"typeString": "address"
															}
														},
														{
															"argumentTypes": null,
															"arguments": [
																{
																	"argumentTypes": null,
																	"hexValue": "30",
																	"id": 68,
																	"isConstant": false,
																	"isLValue": false,
																	"isPure": true,
																	"kind": "number",
																	"lValueRequested": false,
																	"nodeType": "Literal",
																	"src": "1877:1:0",
																	"subdenomination": null,
																	"typeDescriptions": {
																		"typeIdentifier": "t_rational_0_by_1",
																		"typeString": "int_const 0"
																	},
																	"value": "0"
																}
															],
															"expression": {
																"argumentTypes": [
																	{
																		"typeIdentifier": "t_rational_0_by_1",
																		"typeString": "int_const 0"
																	}
																],
																"id": 67,
																"isConstant": false,
																"isLValue": false,
																"isPure": true,
																"lValueRequested": false,
																"nodeType": "ElementaryTypeNameExpression",
																"src": "1869:7:0",
																"typeDescriptions": {
																	"typeIdentifier": "t_type$_t_address_$",
																	"typeString": "type(address)"
																},
																"typeName": {
																	"id": 66,
																	"name": "address",
																	"nodeType": "ElementaryTypeName",
																	"src": "1869:7:0",
																	"typeDescriptions": {
																		"typeIdentifier": null,
																		"typeString": null
																	}
																}
															},
															"id": 69,
															"isConstant": false,
															"isLValue": false,
															"isPure": true,
															"kind": "typeConversion",
															"lValueRequested": false,
															"names": [],
															"nodeType": "FunctionCall",
															"src": "1869:10:0",
															"tryCall": false,
															"typeDescriptions": {
																"typeIdentifier": "t_address_payable",
																"typeString": "address payable"
															}
														}
													],
													"expression": {
														"argumentTypes": [
															{
																"typeIdentifier": "t_address",
																"typeString": "address"
															},
															{
																"typeIdentifier": "t_address_payable",
																"typeString": "address payable"
															}
														],
														"id": 64,
														"name": "OwnershipTransferred",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 13,
														"src": "1840:20:0",
														"typeDescriptions": {
															"typeIdentifier": "t_function_event_nonpayable$_t_address_$_t_address_$returns$__$",
															"typeString": "function (address,address)"
														}
													},
													"id": 70,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"kind": "functionCall",
													"lValueRequested": false,
													"names": [],
													"nodeType": "FunctionCall",
													"src": "1840:40:0",
													"tryCall": false,
													"typeDescriptions": {
														"typeIdentifier": "t_tuple$__$",
														"typeString": "tuple()"
													}
												},
												"id": 71,
												"nodeType": "EmitStatement",
												"src": "1835:45:0"
											},
											{
												"expression": {
													"argumentTypes": null,
													"id": 77,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"lValueRequested": false,
													"leftHandSide": {
														"argumentTypes": null,
														"id": 72,
														"name": "_owner",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 7,
														"src": "1890:6:0",
														"typeDescriptions": {
															"typeIdentifier": "t_address",
															"typeString": "address"
														}
													},
													"nodeType": "Assignment",
													"operator": "=",
													"rightHandSide": {
														"argumentTypes": null,
														"arguments": [
															{
																"argumentTypes": null,
																"hexValue": "30",
																"id": 75,
																"isConstant": false,
																"isLValue": false,
																"isPure": true,
																"kind": "number",
																"lValueRequested": false,
																"nodeType": "Literal",
																"src": "1907:1:0",
																"subdenomination": null,
																"typeDescriptions": {
																	"typeIdentifier": "t_rational_0_by_1",
																	"typeString": "int_const 0"
																},
																"value": "0"
															}
														],
														"expression": {
															"argumentTypes": [
																{
																	"typeIdentifier": "t_rational_0_by_1",
																	"typeString": "int_const 0"
																}
															],
															"id": 74,
															"isConstant": false,
															"isLValue": false,
															"isPure": true,
															"lValueRequested": false,
															"nodeType": "ElementaryTypeNameExpression",
															"src": "1899:7:0",
															"typeDescriptions": {
																"typeIdentifier": "t_type$_t_address_$",
																"typeString": "type(address)"
															},
															"typeName": {
																"id": 73,
																"name": "address",
																"nodeType": "ElementaryTypeName",
																"src": "1899:7:0",
																"typeDescriptions": {
																	"typeIdentifier": null,
																	"typeString": null
																}
															}
														},
														"id": 76,
														"isConstant": false,
														"isLValue": false,
														"isPure": true,
														"kind": "typeConversion",
														"lValueRequested": false,
														"names": [],
														"nodeType": "FunctionCall",
														"src": "1899:10:0",
														"tryCall": false,
														"typeDescriptions": {
															"typeIdentifier": "t_address_payable",
															"typeString": "address payable"
														}
													},
													"src": "1890:19:0",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"id": 78,
												"nodeType": "ExpressionStatement",
												"src": "1890:19:0"
											}
										]
									},
									"documentation": {
										"id": 59,
										"nodeType": "StructuredDocumentation",
										"src": "1435:331:0",
										"text": " @dev Leaves the contract without owner. It will not be possible to call\n `onlyOwner` functions anymore. Can only be called by the current owner.\n NOTE: Renouncing ownership will leave the contract without an owner,\n thereby removing any functionality that is only available to the owner."
									},
									"functionSelector": "715018a6",
									"id": 80,
									"implemented": true,
									"kind": "function",
									"modifiers": [
										{
											"arguments": null,
											"id": 62,
											"modifierName": {
												"argumentTypes": null,
												"id": 61,
												"name": "onlyOwner",
												"nodeType": "Identifier",
												"overloadedDeclarations": [],
												"referencedDeclaration": 58,
												"src": "1815:9:0",
												"typeDescriptions": {
													"typeIdentifier": "t_modifier$__$",
													"typeString": "modifier ()"
												}
											},
											"nodeType": "ModifierInvocation",
											"src": "1815:9:0"
										}
									],
									"name": "renounceOwnership",
									"nodeType": "FunctionDefinition",
									"overrides": null,
									"parameters": {
										"id": 60,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "1797:2:0"
									},
									"returnParameters": {
										"id": 63,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "1825:0:0"
									},
									"scope": 109,
									"src": "1771:145:0",
									"stateMutability": "nonpayable",
									"virtual": true,
									"visibility": "public"
								},
								{
									"body": {
										"id": 107,
										"nodeType": "Block",
										"src": "2135:170:0",
										"statements": [
											{
												"expression": {
													"argumentTypes": null,
													"arguments": [
														{
															"argumentTypes": null,
															"commonType": {
																"typeIdentifier": "t_address",
																"typeString": "address"
															},
															"id": 94,
															"isConstant": false,
															"isLValue": false,
															"isPure": false,
															"lValueRequested": false,
															"leftExpression": {
																"argumentTypes": null,
																"id": 89,
																"name": "newOwner",
																"nodeType": "Identifier",
																"overloadedDeclarations": [],
																"referencedDeclaration": 83,
																"src": "2153:8:0",
																"typeDescriptions": {
																	"typeIdentifier": "t_address",
																	"typeString": "address"
																}
															},
															"nodeType": "BinaryOperation",
															"operator": "!=",
															"rightExpression": {
																"argumentTypes": null,
																"arguments": [
																	{
																		"argumentTypes": null,
																		"hexValue": "30",
																		"id": 92,
																		"isConstant": false,
																		"isLValue": false,
																		"isPure": true,
																		"kind": "number",
																		"lValueRequested": false,
																		"nodeType": "Literal",
																		"src": "2173:1:0",
																		"subdenomination": null,
																		"typeDescriptions": {
																			"typeIdentifier": "t_rational_0_by_1",
																			"typeString": "int_const 0"
																		},
																		"value": "0"
																	}
																],
																"expression": {
																	"argumentTypes": [
																		{
																			"typeIdentifier": "t_rational_0_by_1",
																			"typeString": "int_const 0"
																		}
																	],
																	"id": 91,
																	"isConstant": false,
																	"isLValue": false,
																	"isPure": true,
																	"lValueRequested": false,
																	"nodeType": "ElementaryTypeNameExpression",
																	"src": "2165:7:0",
																	"typeDescriptions": {
																		"typeIdentifier": "t_type$_t_address_$",
																		"typeString": "type(address)"
																	},
																	"typeName": {
																		"id": 90,
																		"name": "address",
																		"nodeType": "ElementaryTypeName",
																		"src": "2165:7:0",
																		"typeDescriptions": {
																			"typeIdentifier": null,
																			"typeString": null
																		}
																	}
																},
																"id": 93,
																"isConstant": false,
																"isLValue": false,
																"isPure": true,
																"kind": "typeConversion",
																"lValueRequested": false,
																"names": [],
																"nodeType": "FunctionCall",
																"src": "2165:10:0",
																"tryCall": false,
																"typeDescriptions": {
																	"typeIdentifier": "t_address_payable",
																	"typeString": "address payable"
																}
															},
															"src": "2153:22:0",
															"typeDescriptions": {
																"typeIdentifier": "t_bool",
																"typeString": "bool"
															}
														},
														{
															"argumentTypes": null,
															"hexValue": "4f776e61626c653a206e6577206f776e657220697320746865207a65726f2061646472657373",
															"id": 95,
															"isConstant": false,
															"isLValue": false,
															"isPure": true,
															"kind": "string",
															"lValueRequested": false,
															"nodeType": "Literal",
															"src": "2177:40:0",
															"subdenomination": null,
															"typeDescriptions": {
																"typeIdentifier": "t_stringliteral_245f15ff17f551913a7a18385165551503906a406f905ac1c2437281a7cd0cfe",
																"typeString": "literal_string \"Ownable: new owner is the zero address\""
															},
															"value": "Ownable: new owner is the zero address"
														}
													],
													"expression": {
														"argumentTypes": [
															{
																"typeIdentifier": "t_bool",
																"typeString": "bool"
															},
															{
																"typeIdentifier": "t_stringliteral_245f15ff17f551913a7a18385165551503906a406f905ac1c2437281a7cd0cfe",
																"typeString": "literal_string \"Ownable: new owner is the zero address\""
															}
														],
														"id": 88,
														"name": "require",
														"nodeType": "Identifier",
														"overloadedDeclarations": [
															-18,
															-18
														],
														"referencedDeclaration": -18,
														"src": "2145:7:0",
														"typeDescriptions": {
															"typeIdentifier": "t_function_require_pure$_t_bool_$_t_string_memory_ptr_$returns$__$",
															"typeString": "function (bool,string memory) pure"
														}
													},
													"id": 96,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"kind": "functionCall",
													"lValueRequested": false,
													"names": [],
													"nodeType": "FunctionCall",
													"src": "2145:73:0",
													"tryCall": false,
													"typeDescriptions": {
														"typeIdentifier": "t_tuple$__$",
														"typeString": "tuple()"
													}
												},
												"id": 97,
												"nodeType": "ExpressionStatement",
												"src": "2145:73:0"
											},
											{
												"eventCall": {
													"argumentTypes": null,
													"arguments": [
														{
															"argumentTypes": null,
															"id": 99,
															"name": "_owner",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 7,
															"src": "2254:6:0",
															"typeDescriptions": {
																"typeIdentifier": "t_address",
																"typeString": "address"
															}
														},
														{
															"argumentTypes": null,
															"id": 100,
															"name": "newOwner",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 83,
															"src": "2262:8:0",
															"typeDescriptions": {
																"typeIdentifier": "t_address",
																"typeString": "address"
															}
														}
													],
													"expression": {
														"argumentTypes": [
															{
																"typeIdentifier": "t_address",
																"typeString": "address"
															},
															{
																"typeIdentifier": "t_address",
																"typeString": "address"
															}
														],
														"id": 98,
														"name": "OwnershipTransferred",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 13,
														"src": "2233:20:0",
														"typeDescriptions": {
															"typeIdentifier": "t_function_event_nonpayable$_t_address_$_t_address_$returns$__$",
															"typeString": "function (address,address)"
														}
													},
													"id": 101,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"kind": "functionCall",
													"lValueRequested": false,
													"names": [],
													"nodeType": "FunctionCall",
													"src": "2233:38:0",
													"tryCall": false,
													"typeDescriptions": {
														"typeIdentifier": "t_tuple$__$",
														"typeString": "tuple()"
													}
												},
												"id": 102,
												"nodeType": "EmitStatement",
												"src": "2228:43:0"
											},
											{
												"expression": {
													"argumentTypes": null,
													"id": 105,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"lValueRequested": false,
													"leftHandSide": {
														"argumentTypes": null,
														"id": 103,
														"name": "_owner",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 7,
														"src": "2281:6:0",
														"typeDescriptions": {
															"typeIdentifier": "t_address",
															"typeString": "address"
														}
													},
													"nodeType": "Assignment",
													"operator": "=",
													"rightHandSide": {
														"argumentTypes": null,
														"id": 104,
														"name": "newOwner",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 83,
														"src": "2290:8:0",
														"typeDescriptions": {
															"typeIdentifier": "t_address",
															"typeString": "address"
														}
													},
													"src": "2281:17:0",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"id": 106,
												"nodeType": "ExpressionStatement",
												"src": "2281:17:0"
											}
										]
									},
									"documentation": {
										"id": 81,
										"nodeType": "StructuredDocumentation",
										"src": "1922:138:0",
										"text": " @dev Transfers ownership of the contract to a new account (`newOwner`).\n Can only be called by the current owner."
									},
									"functionSelector": "f2fde38b",
									"id": 108,
									"implemented": true,
									"kind": "function",
									"modifiers": [
										{
											"arguments": null,
											"id": 86,
											"modifierName": {
												"argumentTypes": null,
												"id": 85,
												"name": "onlyOwner",
												"nodeType": "Identifier",
												"overloadedDeclarations": [],
												"referencedDeclaration": 58,
												"src": "2125:9:0",
												"typeDescriptions": {
													"typeIdentifier": "t_modifier$__$",
													"typeString": "modifier ()"
												}
											},
											"nodeType": "ModifierInvocation",
											"src": "2125:9:0"
										}
									],
									"name": "transferOwnership",
									"nodeType": "FunctionDefinition",
									"overrides": null,
									"parameters": {
										"id": 84,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 83,
												"mutability": "mutable",
												"name": "newOwner",
												"nodeType": "VariableDeclaration",
												"overrides": null,
												"scope": 108,
												"src": "2092:16:0",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 82,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "2092:7:0",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"value": null,
												"visibility": "internal"
											}
										],
										"src": "2091:18:0"
									},
									"returnParameters": {
										"id": 87,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "2135:0:0"
									},
									"scope": 109,
									"src": "2065:240:0",
									"stateMutability": "nonpayable",
									"virtual": true,
									"visibility": "public"
								}
							],
							"scope": 110,
							"src": "646:1661:0"
						}
					],
					"src": "87:2220:0"
				},
				"id": 0
			},
			"@openzeppelin/contracts/utils/Context.sol": {
				"ast": {
					"absolutePath": "@openzeppelin/contracts/utils/Context.sol",
					"exportedSymbols": {
						"Context": [
							131
						]
					},
					"id": 132,
					"license": "MIT",
					"nodeType": "SourceUnit",
					"nodes": [
						{
							"id": 111,
							"literals": [
								"solidity",
								">=",
								"0.6",
								".12",
								"<",
								"0.8",
								".0"
							],
							"nodeType": "PragmaDirective",
							"src": "33:32:1"
						},
						{
							"abstract": true,
							"baseContracts": [],
							"contractDependencies": [],
							"contractKind": "contract",
							"documentation": {
								"id": 112,
								"nodeType": "StructuredDocumentation",
								"src": "67:496:1",
								"text": " @dev Provides information about the current execution context, including the\n sender of the transaction and its data. While these are generally available\n via msg.sender and msg.data, they should not be accessed in such a direct\n manner, since when dealing with meta-transactions the account sending and\n paying for execution may not be the actual sender (as far as an application\n is concerned).\n This contract is only required for intermediate, library-like contracts."
							},
							"fullyImplemented": true,
							"id": 131,
							"linearizedBaseContracts": [
								131
							],
							"name": "Context",
							"nodeType": "ContractDefinition",
							"nodes": [
								{
									"body": {
										"id": 120,
										"nodeType": "Block",
										"src": "658:34:1",
										"statements": [
											{
												"expression": {
													"argumentTypes": null,
													"expression": {
														"argumentTypes": null,
														"id": 117,
														"name": "msg",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": -15,
														"src": "675:3:1",
														"typeDescriptions": {
															"typeIdentifier": "t_magic_message",
															"typeString": "msg"
														}
													},
													"id": 118,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"lValueRequested": false,
													"memberName": "sender",
													"nodeType": "MemberAccess",
													"referencedDeclaration": null,
													"src": "675:10:1",
													"typeDescriptions": {
														"typeIdentifier": "t_address_payable",
														"typeString": "address payable"
													}
												},
												"functionReturnParameters": 116,
												"id": 119,
												"nodeType": "Return",
												"src": "668:17:1"
											}
										]
									},
									"documentation": null,
									"id": 121,
									"implemented": true,
									"kind": "function",
									"modifiers": [],
									"name": "_msgSender",
									"nodeType": "FunctionDefinition",
									"overrides": null,
									"parameters": {
										"id": 113,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "615:2:1"
									},
									"returnParameters": {
										"id": 116,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 115,
												"mutability": "mutable",
												"name": "",
												"nodeType": "VariableDeclaration",
												"overrides": null,
												"scope": 121,
												"src": "649:7:1",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 114,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "649:7:1",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"value": null,
												"visibility": "internal"
											}
										],
										"src": "648:9:1"
									},
									"scope": 131,
									"src": "596:96:1",
									"stateMutability": "view",
									"virtual": true,
									"visibility": "internal"
								},
								{
									"body": {
										"id": 129,
										"nodeType": "Block",
										"src": "765:32:1",
										"statements": [
											{
												"expression": {
													"argumentTypes": null,
													"expression": {
														"argumentTypes": null,
														"id": 126,
														"name": "msg",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": -15,
														"src": "782:3:1",
														"typeDescriptions": {
															"typeIdentifier": "t_magic_message",
															"typeString": "msg"
														}
													},
													"id": 127,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"lValueRequested": false,
													"memberName": "data",
													"nodeType": "MemberAccess",
													"referencedDeclaration": null,
													"src": "782:8:1",
													"typeDescriptions": {
														"typeIdentifier": "t_bytes_calldata_ptr",
														"typeString": "bytes calldata"
													}
												},
												"functionReturnParameters": 125,
												"id": 128,
												"nodeType": "Return",
												"src": "775:15:1"
											}
										]
									},
									"documentation": null,
									"id": 130,
									"implemented": true,
									"kind": "function",
									"modifiers": [],
									"name": "_msgData",
									"nodeType": "FunctionDefinition",
									"overrides": null,
									"parameters": {
										"id": 122,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "715:2:1"
									},
									"returnParameters": {
										"id": 125,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 124,
												"mutability": "mutable",
												"name": "",
												"nodeType": "VariableDeclaration",
												"overrides": null,
												"scope": 130,
												"src": "749:14:1",
												"stateVariable": false,
												"storageLocation": "calldata",
												"typeDescriptions": {
													"typeIdentifier": "t_bytes_calldata_ptr",
													"typeString": "bytes"
												},
												"typeName": {
													"id": 123,
													"name": "bytes",
													"nodeType": "ElementaryTypeName",
													"src": "749:5:1",
													"typeDescriptions": {
														"typeIdentifier": "t_bytes_storage_ptr",
														"typeString": "bytes"
													}
												},
												"value": null,
												"visibility": "internal"
											}
										],
										"src": "748:16:1"
									},
									"scope": 131,
									"src": "698:99:1",
									"stateMutability": "view",
									"virtual": true,
									"visibility": "internal"
								}
							],
							"scope": 132,
							"src": "564:235:1"
						}
					],
					"src": "33:767:1"
				},
				"id": 1
			},
			"@openzeppelin/contracts/utils/math/SafeMath.sol": {
				"ast": {
					"absolutePath": "@openzeppelin/contracts/utils/math/SafeMath.sol",
					"exportedSymbols": {
						"SafeMath": [
							518
						]
					},
					"id": 519,
					"license": "MIT",
					"nodeType": "SourceUnit",
					"nodes": [
						{
							"id": 133,
							"literals": [
								"solidity",
								">=",
								"0.6",
								".0",
								"<",
								"0.8",
								".0"
							],
							"nodeType": "PragmaDirective",
							"src": "33:31:2"
						},
						{
							"abstract": false,
							"baseContracts": [],
							"contractDependencies": [],
							"contractKind": "library",
							"documentation": {
								"id": 134,
								"nodeType": "StructuredDocumentation",
								"src": "66:563:2",
								"text": " @dev Wrappers over Solidity's arithmetic operations with added overflow\n checks.\n Arithmetic operations in Solidity wrap on overflow. This can easily result\n in bugs, because programmers usually assume that an overflow raises an\n error, which is the standard behavior in high level programming languages.\n `SafeMath` restores this intuition by reverting the transaction when an\n operation overflows.\n Using this library instead of the unchecked operations eliminates an entire\n class of bugs, so it's recommended to use it always."
							},
							"fullyImplemented": true,
							"id": 518,
							"linearizedBaseContracts": [
								518
							],
							"name": "SafeMath",
							"nodeType": "ContractDefinition",
							"nodes": [
								{
									"body": {
										"id": 164,
										"nodeType": "Block",
										"src": "865:98:2",
										"statements": [
											{
												"assignments": [
													147
												],
												"declarations": [
													{
														"constant": false,
														"id": 147,
														"mutability": "mutable",
														"name": "c",
														"nodeType": "VariableDeclaration",
														"overrides": null,
														"scope": 164,
														"src": "875:9:2",
														"stateVariable": false,
														"storageLocation": "default",
														"typeDescriptions": {
															"typeIdentifier": "t_uint256",
															"typeString": "uint256"
														},
														"typeName": {
															"id": 146,
															"name": "uint256",
															"nodeType": "ElementaryTypeName",
															"src": "875:7:2",
															"typeDescriptions": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														},
														"value": null,
														"visibility": "internal"
													}
												],
												"id": 151,
												"initialValue": {
													"argumentTypes": null,
													"commonType": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													},
													"id": 150,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"lValueRequested": false,
													"leftExpression": {
														"argumentTypes": null,
														"id": 148,
														"name": "a",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 137,
														"src": "887:1:2",
														"typeDescriptions": {
															"typeIdentifier": "t_uint256",
															"typeString": "uint256"
														}
													},
													"nodeType": "BinaryOperation",
													"operator": "+",
													"rightExpression": {
														"argumentTypes": null,
														"id": 149,
														"name": "b",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 139,
														"src": "891:1:2",
														"typeDescriptions": {
															"typeIdentifier": "t_uint256",
															"typeString": "uint256"
														}
													},
													"src": "887:5:2",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"nodeType": "VariableDeclarationStatement",
												"src": "875:17:2"
											},
											{
												"condition": {
													"argumentTypes": null,
													"commonType": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													},
													"id": 154,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"lValueRequested": false,
													"leftExpression": {
														"argumentTypes": null,
														"id": 152,
														"name": "c",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 147,
														"src": "906:1:2",
														"typeDescriptions": {
															"typeIdentifier": "t_uint256",
															"typeString": "uint256"
														}
													},
													"nodeType": "BinaryOperation",
													"operator": "<",
													"rightExpression": {
														"argumentTypes": null,
														"id": 153,
														"name": "a",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 137,
														"src": "910:1:2",
														"typeDescriptions": {
															"typeIdentifier": "t_uint256",
															"typeString": "uint256"
														}
													},
													"src": "906:5:2",
													"typeDescriptions": {
														"typeIdentifier": "t_bool",
														"typeString": "bool"
													}
												},
												"falseBody": null,
												"id": 159,
												"nodeType": "IfStatement",
												"src": "902:28:2",
												"trueBody": {
													"expression": {
														"argumentTypes": null,
														"components": [
															{
																"argumentTypes": null,
																"hexValue": "66616c7365",
																"id": 155,
																"isConstant": false,
																"isLValue": false,
																"isPure": true,
																"kind": "bool",
																"lValueRequested": false,
																"nodeType": "Literal",
																"src": "921:5:2",
																"subdenomination": null,
																"typeDescriptions": {
																	"typeIdentifier": "t_bool",
																	"typeString": "bool"
																},
																"value": "false"
															},
															{
																"argumentTypes": null,
																"hexValue": "30",
																"id": 156,
																"isConstant": false,
																"isLValue": false,
																"isPure": true,
																"kind": "number",
																"lValueRequested": false,
																"nodeType": "Literal",
																"src": "928:1:2",
																"subdenomination": null,
																"typeDescriptions": {
																	"typeIdentifier": "t_rational_0_by_1",
																	"typeString": "int_const 0"
																},
																"value": "0"
															}
														],
														"id": 157,
														"isConstant": false,
														"isInlineArray": false,
														"isLValue": false,
														"isPure": true,
														"lValueRequested": false,
														"nodeType": "TupleExpression",
														"src": "920:10:2",
														"typeDescriptions": {
															"typeIdentifier": "t_tuple$_t_bool_$_t_rational_0_by_1_$",
															"typeString": "tuple(bool,int_const 0)"
														}
													},
													"functionReturnParameters": 145,
													"id": 158,
													"nodeType": "Return",
													"src": "913:17:2"
												}
											},
											{
												"expression": {
													"argumentTypes": null,
													"components": [
														{
															"argumentTypes": null,
															"hexValue": "74727565",
															"id": 160,
															"isConstant": false,
															"isLValue": false,
															"isPure": true,
															"kind": "bool",
															"lValueRequested": false,
															"nodeType": "Literal",
															"src": "948:4:2",
															"subdenomination": null,
															"typeDescriptions": {
																"typeIdentifier": "t_bool",
																"typeString": "bool"
															},
															"value": "true"
														},
														{
															"argumentTypes": null,
															"id": 161,
															"name": "c",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 147,
															"src": "954:1:2",
															"typeDescriptions": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														}
													],
													"id": 162,
													"isConstant": false,
													"isInlineArray": false,
													"isLValue": false,
													"isPure": false,
													"lValueRequested": false,
													"nodeType": "TupleExpression",
													"src": "947:9:2",
													"typeDescriptions": {
														"typeIdentifier": "t_tuple$_t_bool_$_t_uint256_$",
														"typeString": "tuple(bool,uint256)"
													}
												},
												"functionReturnParameters": 145,
												"id": 163,
												"nodeType": "Return",
												"src": "940:16:2"
											}
										]
									},
									"documentation": {
										"id": 135,
										"nodeType": "StructuredDocumentation",
										"src": "653:131:2",
										"text": " @dev Returns the addition of two unsigned integers, with an overflow flag.\n _Available since v3.4._"
									},
									"id": 165,
									"implemented": true,
									"kind": "function",
									"modifiers": [],
									"name": "tryAdd",
									"nodeType": "FunctionDefinition",
									"overrides": null,
									"parameters": {
										"id": 140,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 137,
												"mutability": "mutable",
												"name": "a",
												"nodeType": "VariableDeclaration",
												"overrides": null,
												"scope": 165,
												"src": "805:9:2",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 136,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "805:7:2",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"value": null,
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 139,
												"mutability": "mutable",
												"name": "b",
												"nodeType": "VariableDeclaration",
												"overrides": null,
												"scope": 165,
												"src": "816:9:2",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 138,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "816:7:2",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"value": null,
												"visibility": "internal"
											}
										],
										"src": "804:22:2"
									},
									"returnParameters": {
										"id": 145,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 142,
												"mutability": "mutable",
												"name": "",
												"nodeType": "VariableDeclaration",
												"overrides": null,
												"scope": 165,
												"src": "850:4:2",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_bool",
													"typeString": "bool"
												},
												"typeName": {
													"id": 141,
													"name": "bool",
													"nodeType": "ElementaryTypeName",
													"src": "850:4:2",
													"typeDescriptions": {
														"typeIdentifier": "t_bool",
														"typeString": "bool"
													}
												},
												"value": null,
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 144,
												"mutability": "mutable",
												"name": "",
												"nodeType": "VariableDeclaration",
												"overrides": null,
												"scope": 165,
												"src": "856:7:2",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 143,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "856:7:2",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"value": null,
												"visibility": "internal"
											}
										],
										"src": "849:15:2"
									},
									"scope": 518,
									"src": "789:174:2",
									"stateMutability": "pure",
									"virtual": false,
									"visibility": "internal"
								},
								{
									"body": {
										"id": 191,
										"nodeType": "Block",
										"src": "1185:75:2",
										"statements": [
											{
												"condition": {
													"argumentTypes": null,
													"commonType": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													},
													"id": 179,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"lValueRequested": false,
													"leftExpression": {
														"argumentTypes": null,
														"id": 177,
														"name": "b",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 170,
														"src": "1199:1:2",
														"typeDescriptions": {
															"typeIdentifier": "t_uint256",
															"typeString": "uint256"
														}
													},
													"nodeType": "BinaryOperation",
													"operator": ">",
													"rightExpression": {
														"argumentTypes": null,
														"id": 178,
														"name": "a",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 168,
														"src": "1203:1:2",
														"typeDescriptions": {
															"typeIdentifier": "t_uint256",
															"typeString": "uint256"
														}
													},
													"src": "1199:5:2",
													"typeDescriptions": {
														"typeIdentifier": "t_bool",
														"typeString": "bool"
													}
												},
												"falseBody": null,
												"id": 184,
												"nodeType": "IfStatement",
												"src": "1195:28:2",
												"trueBody": {
													"expression": {
														"argumentTypes": null,
														"components": [
															{
																"argumentTypes": null,
																"hexValue": "66616c7365",
																"id": 180,
																"isConstant": false,
																"isLValue": false,
																"isPure": true,
																"kind": "bool",
																"lValueRequested": false,
																"nodeType": "Literal",
																"src": "1214:5:2",
																"subdenomination": null,
																"typeDescriptions": {
																	"typeIdentifier": "t_bool",
																	"typeString": "bool"
																},
																"value": "false"
															},
															{
																"argumentTypes": null,
																"hexValue": "30",
																"id": 181,
																"isConstant": false,
																"isLValue": false,
																"isPure": true,
																"kind": "number",
																"lValueRequested": false,
																"nodeType": "Literal",
																"src": "1221:1:2",
																"subdenomination": null,
																"typeDescriptions": {
																	"typeIdentifier": "t_rational_0_by_1",
																	"typeString": "int_const 0"
																},
																"value": "0"
															}
														],
														"id": 182,
														"isConstant": false,
														"isInlineArray": false,
														"isLValue": false,
														"isPure": true,
														"lValueRequested": false,
														"nodeType": "TupleExpression",
														"src": "1213:10:2",
														"typeDescriptions": {
															"typeIdentifier": "t_tuple$_t_bool_$_t_rational_0_by_1_$",
															"typeString": "tuple(bool,int_const 0)"
														}
													},
													"functionReturnParameters": 176,
													"id": 183,
													"nodeType": "Return",
													"src": "1206:17:2"
												}
											},
											{
												"expression": {
													"argumentTypes": null,
													"components": [
														{
															"argumentTypes": null,
															"hexValue": "74727565",
															"id": 185,
															"isConstant": false,
															"isLValue": false,
															"isPure": true,
															"kind": "bool",
															"lValueRequested": false,
															"nodeType": "Literal",
															"src": "1241:4:2",
															"subdenomination": null,
															"typeDescriptions": {
																"typeIdentifier": "t_bool",
																"typeString": "bool"
															},
															"value": "true"
														},
														{
															"argumentTypes": null,
															"commonType": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															},
															"id": 188,
															"isConstant": false,
															"isLValue": false,
															"isPure": false,
															"lValueRequested": false,
															"leftExpression": {
																"argumentTypes": null,
																"id": 186,
																"name": "a",
																"nodeType": "Identifier",
																"overloadedDeclarations": [],
																"referencedDeclaration": 168,
																"src": "1247:1:2",
																"typeDescriptions": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																}
															},
															"nodeType": "BinaryOperation",
															"operator": "-",
															"rightExpression": {
																"argumentTypes": null,
																"id": 187,
																"name": "b",
																"nodeType": "Identifier",
																"overloadedDeclarations": [],
																"referencedDeclaration": 170,
																"src": "1251:1:2",
																"typeDescriptions": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																}
															},
															"src": "1247:5:2",
															"typeDescriptions": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														}
													],
													"id": 189,
													"isConstant": false,
													"isInlineArray": false,
													"isLValue": false,
													"isPure": false,
													"lValueRequested": false,
													"nodeType": "TupleExpression",
													"src": "1240:13:2",
													"typeDescriptions": {
														"typeIdentifier": "t_tuple$_t_bool_$_t_uint256_$",
														"typeString": "tuple(bool,uint256)"
													}
												},
												"functionReturnParameters": 176,
												"id": 190,
												"nodeType": "Return",
												"src": "1233:20:2"
											}
										]
									},
									"documentation": {
										"id": 166,
										"nodeType": "StructuredDocumentation",
										"src": "969:135:2",
										"text": " @dev Returns the substraction of two unsigned integers, with an overflow flag.\n _Available since v3.4._"
									},
									"id": 192,
									"implemented": true,
									"kind": "function",
									"modifiers": [],
									"name": "trySub",
									"nodeType": "FunctionDefinition",
									"overrides": null,
									"parameters": {
										"id": 171,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 168,
												"mutability": "mutable",
												"name": "a",
												"nodeType": "VariableDeclaration",
												"overrides": null,
												"scope": 192,
												"src": "1125:9:2",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 167,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "1125:7:2",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"value": null,
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 170,
												"mutability": "mutable",
												"name": "b",
												"nodeType": "VariableDeclaration",
												"overrides": null,
												"scope": 192,
												"src": "1136:9:2",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 169,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "1136:7:2",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"value": null,
												"visibility": "internal"
											}
										],
										"src": "1124:22:2"
									},
									"returnParameters": {
										"id": 176,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 173,
												"mutability": "mutable",
												"name": "",
												"nodeType": "VariableDeclaration",
												"overrides": null,
												"scope": 192,
												"src": "1170:4:2",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_bool",
													"typeString": "bool"
												},
												"typeName": {
													"id": 172,
													"name": "bool",
													"nodeType": "ElementaryTypeName",
													"src": "1170:4:2",
													"typeDescriptions": {
														"typeIdentifier": "t_bool",
														"typeString": "bool"
													}
												},
												"value": null,
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 175,
												"mutability": "mutable",
												"name": "",
												"nodeType": "VariableDeclaration",
												"overrides": null,
												"scope": 192,
												"src": "1176:7:2",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 174,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "1176:7:2",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"value": null,
												"visibility": "internal"
											}
										],
										"src": "1169:15:2"
									},
									"scope": 518,
									"src": "1109:151:2",
									"stateMutability": "pure",
									"virtual": false,
									"visibility": "internal"
								},
								{
									"body": {
										"id": 232,
										"nodeType": "Block",
										"src": "1484:359:2",
										"statements": [
											{
												"condition": {
													"argumentTypes": null,
													"commonType": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													},
													"id": 206,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"lValueRequested": false,
													"leftExpression": {
														"argumentTypes": null,
														"id": 204,
														"name": "a",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 195,
														"src": "1716:1:2",
														"typeDescriptions": {
															"typeIdentifier": "t_uint256",
															"typeString": "uint256"
														}
													},
													"nodeType": "BinaryOperation",
													"operator": "==",
													"rightExpression": {
														"argumentTypes": null,
														"hexValue": "30",
														"id": 205,
														"isConstant": false,
														"isLValue": false,
														"isPure": true,
														"kind": "number",
														"lValueRequested": false,
														"nodeType": "Literal",
														"src": "1721:1:2",
														"subdenomination": null,
														"typeDescriptions": {
															"typeIdentifier": "t_rational_0_by_1",
															"typeString": "int_const 0"
														},
														"value": "0"
													},
													"src": "1716:6:2",
													"typeDescriptions": {
														"typeIdentifier": "t_bool",
														"typeString": "bool"
													}
												},
												"falseBody": null,
												"id": 211,
												"nodeType": "IfStatement",
												"src": "1712:28:2",
												"trueBody": {
													"expression": {
														"argumentTypes": null,
														"components": [
															{
																"argumentTypes": null,
																"hexValue": "74727565",
																"id": 207,
																"isConstant": false,
																"isLValue": false,
																"isPure": true,
																"kind": "bool",
																"lValueRequested": false,
																"nodeType": "Literal",
																"src": "1732:4:2",
																"subdenomination": null,
																"typeDescriptions": {
																	"typeIdentifier": "t_bool",
																	"typeString": "bool"
																},
																"value": "true"
															},
															{
																"argumentTypes": null,
																"hexValue": "30",
																"id": 208,
																"isConstant": false,
																"isLValue": false,
																"isPure": true,
																"kind": "number",
																"lValueRequested": false,
																"nodeType": "Literal",
																"src": "1738:1:2",
																"subdenomination": null,
																"typeDescriptions": {
																	"typeIdentifier": "t_rational_0_by_1",
																	"typeString": "int_const 0"
																},
																"value": "0"
															}
														],
														"id": 209,
														"isConstant": false,
														"isInlineArray": false,
														"isLValue": false,
														"isPure": true,
														"lValueRequested": false,
														"nodeType": "TupleExpression",
														"src": "1731:9:2",
														"typeDescriptions": {
															"typeIdentifier": "t_tuple$_t_bool_$_t_rational_0_by_1_$",
															"typeString": "tuple(bool,int_const 0)"
														}
													},
													"functionReturnParameters": 203,
													"id": 210,
													"nodeType": "Return",
													"src": "1724:16:2"
												}
											},
											{
												"assignments": [
													213
												],
												"declarations": [
													{
														"constant": false,
														"id": 213,
														"mutability": "mutable",
														"name": "c",
														"nodeType": "VariableDeclaration",
														"overrides": null,
														"scope": 232,
														"src": "1750:9:2",
														"stateVariable": false,
														"storageLocation": "default",
														"typeDescriptions": {
															"typeIdentifier": "t_uint256",
															"typeString": "uint256"
														},
														"typeName": {
															"id": 212,
															"name": "uint256",
															"nodeType": "ElementaryTypeName",
															"src": "1750:7:2",
															"typeDescriptions": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														},
														"value": null,
														"visibility": "internal"
													}
												],
												"id": 217,
												"initialValue": {
													"argumentTypes": null,
													"commonType": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													},
													"id": 216,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"lValueRequested": false,
													"leftExpression": {
														"argumentTypes": null,
														"id": 214,
														"name": "a",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 195,
														"src": "1762:1:2",
														"typeDescriptions": {
															"typeIdentifier": "t_uint256",
															"typeString": "uint256"
														}
													},
													"nodeType": "BinaryOperation",
													"operator": "*",
													"rightExpression": {
														"argumentTypes": null,
														"id": 215,
														"name": "b",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 197,
														"src": "1766:1:2",
														"typeDescriptions": {
															"typeIdentifier": "t_uint256",
															"typeString": "uint256"
														}
													},
													"src": "1762:5:2",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"nodeType": "VariableDeclarationStatement",
												"src": "1750:17:2"
											},
											{
												"condition": {
													"argumentTypes": null,
													"commonType": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													},
													"id": 222,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"lValueRequested": false,
													"leftExpression": {
														"argumentTypes": null,
														"commonType": {
															"typeIdentifier": "t_uint256",
															"typeString": "uint256"
														},
														"id": 220,
														"isConstant": false,
														"isLValue": false,
														"isPure": false,
														"lValueRequested": false,
														"leftExpression": {
															"argumentTypes": null,
															"id": 218,
															"name": "c",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 213,
															"src": "1781:1:2",
															"typeDescriptions": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														},
														"nodeType": "BinaryOperation",
														"operator": "/",
														"rightExpression": {
															"argumentTypes": null,
															"id": 219,
															"name": "a",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 195,
															"src": "1785:1:2",
															"typeDescriptions": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														},
														"src": "1781:5:2",
														"typeDescriptions": {
															"typeIdentifier": "t_uint256",
															"typeString": "uint256"
														}
													},
													"nodeType": "BinaryOperation",
													"operator": "!=",
													"rightExpression": {
														"argumentTypes": null,
														"id": 221,
														"name": "b",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 197,
														"src": "1790:1:2",
														"typeDescriptions": {
															"typeIdentifier": "t_uint256",
															"typeString": "uint256"
														}
													},
													"src": "1781:10:2",
													"typeDescriptions": {
														"typeIdentifier": "t_bool",
														"typeString": "bool"
													}
												},
												"falseBody": null,
												"id": 227,
												"nodeType": "IfStatement",
												"src": "1777:33:2",
												"trueBody": {
													"expression": {
														"argumentTypes": null,
														"components": [
															{
																"argumentTypes": null,
																"hexValue": "66616c7365",
																"id": 223,
																"isConstant": false,
																"isLValue": false,
																"isPure": true,
																"kind": "bool",
																"lValueRequested": false,
																"nodeType": "Literal",
																"src": "1801:5:2",
																"subdenomination": null,
																"typeDescriptions": {
																	"typeIdentifier": "t_bool",
																	"typeString": "bool"
																},
																"value": "false"
															},
															{
																"argumentTypes": null,
																"hexValue": "30",
																"id": 224,
																"isConstant": false,
																"isLValue": false,
																"isPure": true,
																"kind": "number",
																"lValueRequested": false,
																"nodeType": "Literal",
																"src": "1808:1:2",
																"subdenomination": null,
																"typeDescriptions": {
																	"typeIdentifier": "t_rational_0_by_1",
																	"typeString": "int_const 0"
																},
																"value": "0"
															}
														],
														"id": 225,
														"isConstant": false,
														"isInlineArray": false,
														"isLValue": false,
														"isPure": true,
														"lValueRequested": false,
														"nodeType": "TupleExpression",
														"src": "1800:10:2",
														"typeDescriptions": {
															"typeIdentifier": "t_tuple$_t_bool_$_t_rational_0_by_1_$",
															"typeString": "tuple(bool,int_const 0)"
														}
													},
													"functionReturnParameters": 203,
													"id": 226,
													"nodeType": "Return",
													"src": "1793:17:2"
												}
											},
											{
												"expression": {
													"argumentTypes": null,
													"components": [
														{
															"argumentTypes": null,
															"hexValue": "74727565",
															"id": 228,
															"isConstant": false,
															"isLValue": false,
															"isPure": true,
															"kind": "bool",
															"lValueRequested": false,
															"nodeType": "Literal",
															"src": "1828:4:2",
															"subdenomination": null,
															"typeDescriptions": {
																"typeIdentifier": "t_bool",
																"typeString": "bool"
															},
															"value": "true"
														},
														{
															"argumentTypes": null,
															"id": 229,
															"name": "c",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 213,
															"src": "1834:1:2",
															"typeDescriptions": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														}
													],
													"id": 230,
													"isConstant": false,
													"isInlineArray": false,
													"isLValue": false,
													"isPure": false,
													"lValueRequested": false,
													"nodeType": "TupleExpression",
													"src": "1827:9:2",
													"typeDescriptions": {
														"typeIdentifier": "t_tuple$_t_bool_$_t_uint256_$",
														"typeString": "tuple(bool,uint256)"
													}
												},
												"functionReturnParameters": 203,
												"id": 231,
												"nodeType": "Return",
												"src": "1820:16:2"
											}
										]
									},
									"documentation": {
										"id": 193,
										"nodeType": "StructuredDocumentation",
										"src": "1266:137:2",
										"text": " @dev Returns the multiplication of two unsigned integers, with an overflow flag.\n _Available since v3.4._"
									},
									"id": 233,
									"implemented": true,
									"kind": "function",
									"modifiers": [],
									"name": "tryMul",
									"nodeType": "FunctionDefinition",
									"overrides": null,
									"parameters": {
										"id": 198,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 195,
												"mutability": "mutable",
												"name": "a",
												"nodeType": "VariableDeclaration",
												"overrides": null,
												"scope": 233,
												"src": "1424:9:2",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 194,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "1424:7:2",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"value": null,
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 197,
												"mutability": "mutable",
												"name": "b",
												"nodeType": "VariableDeclaration",
												"overrides": null,
												"scope": 233,
												"src": "1435:9:2",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 196,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "1435:7:2",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"value": null,
												"visibility": "internal"
											}
										],
										"src": "1423:22:2"
									},
									"returnParameters": {
										"id": 203,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 200,
												"mutability": "mutable",
												"name": "",
												"nodeType": "VariableDeclaration",
												"overrides": null,
												"scope": 233,
												"src": "1469:4:2",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_bool",
													"typeString": "bool"
												},
												"typeName": {
													"id": 199,
													"name": "bool",
													"nodeType": "ElementaryTypeName",
													"src": "1469:4:2",
													"typeDescriptions": {
														"typeIdentifier": "t_bool",
														"typeString": "bool"
													}
												},
												"value": null,
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 202,
												"mutability": "mutable",
												"name": "",
												"nodeType": "VariableDeclaration",
												"overrides": null,
												"scope": 233,
												"src": "1475:7:2",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 201,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "1475:7:2",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"value": null,
												"visibility": "internal"
											}
										],
										"src": "1468:15:2"
									},
									"scope": 518,
									"src": "1408:435:2",
									"stateMutability": "pure",
									"virtual": false,
									"visibility": "internal"
								},
								{
									"body": {
										"id": 259,
										"nodeType": "Block",
										"src": "2068:76:2",
										"statements": [
											{
												"condition": {
													"argumentTypes": null,
													"commonType": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													},
													"id": 247,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"lValueRequested": false,
													"leftExpression": {
														"argumentTypes": null,
														"id": 245,
														"name": "b",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 238,
														"src": "2082:1:2",
														"typeDescriptions": {
															"typeIdentifier": "t_uint256",
															"typeString": "uint256"
														}
													},
													"nodeType": "BinaryOperation",
													"operator": "==",
													"rightExpression": {
														"argumentTypes": null,
														"hexValue": "30",
														"id": 246,
														"isConstant": false,
														"isLValue": false,
														"isPure": true,
														"kind": "number",
														"lValueRequested": false,
														"nodeType": "Literal",
														"src": "2087:1:2",
														"subdenomination": null,
														"typeDescriptions": {
															"typeIdentifier": "t_rational_0_by_1",
															"typeString": "int_const 0"
														},
														"value": "0"
													},
													"src": "2082:6:2",
													"typeDescriptions": {
														"typeIdentifier": "t_bool",
														"typeString": "bool"
													}
												},
												"falseBody": null,
												"id": 252,
												"nodeType": "IfStatement",
												"src": "2078:29:2",
												"trueBody": {
													"expression": {
														"argumentTypes": null,
														"components": [
															{
																"argumentTypes": null,
																"hexValue": "66616c7365",
																"id": 248,
																"isConstant": false,
																"isLValue": false,
																"isPure": true,
																"kind": "bool",
																"lValueRequested": false,
																"nodeType": "Literal",
																"src": "2098:5:2",
																"subdenomination": null,
																"typeDescriptions": {
																	"typeIdentifier": "t_bool",
																	"typeString": "bool"
																},
																"value": "false"
															},
															{
																"argumentTypes": null,
																"hexValue": "30",
																"id": 249,
																"isConstant": false,
																"isLValue": false,
																"isPure": true,
																"kind": "number",
																"lValueRequested": false,
																"nodeType": "Literal",
																"src": "2105:1:2",
																"subdenomination": null,
																"typeDescriptions": {
																	"typeIdentifier": "t_rational_0_by_1",
																	"typeString": "int_const 0"
																},
																"value": "0"
															}
														],
														"id": 250,
														"isConstant": false,
														"isInlineArray": false,
														"isLValue": false,
														"isPure": true,
														"lValueRequested": false,
														"nodeType": "TupleExpression",
														"src": "2097:10:2",
														"typeDescriptions": {
															"typeIdentifier": "t_tuple$_t_bool_$_t_rational_0_by_1_$",
															"typeString": "tuple(bool,int_const 0)"
														}
													},
													"functionReturnParameters": 244,
													"id": 251,
													"nodeType": "Return",
													"src": "2090:17:2"
												}
											},
											{
												"expression": {
													"argumentTypes": null,
													"components": [
														{
															"argumentTypes": null,
															"hexValue": "74727565",
															"id": 253,
															"isConstant": false,
															"isLValue": false,
															"isPure": true,
															"kind": "bool",
															"lValueRequested": false,
															"nodeType": "Literal",
															"src": "2125:4:2",
															"subdenomination": null,
															"typeDescriptions": {
																"typeIdentifier": "t_bool",
																"typeString": "bool"
															},
															"value": "true"
														},
														{
															"argumentTypes": null,
															"commonType": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															},
															"id": 256,
															"isConstant": false,
															"isLValue": false,
															"isPure": false,
															"lValueRequested": false,
															"leftExpression": {
																"argumentTypes": null,
																"id": 254,
																"name": "a",
																"nodeType": "Identifier",
																"overloadedDeclarations": [],
																"referencedDeclaration": 236,
																"src": "2131:1:2",
																"typeDescriptions": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																}
															},
															"nodeType": "BinaryOperation",
															"operator": "/",
															"rightExpression": {
																"argumentTypes": null,
																"id": 255,
																"name": "b",
																"nodeType": "Identifier",
																"overloadedDeclarations": [],
																"referencedDeclaration": 238,
																"src": "2135:1:2",
																"typeDescriptions": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																}
															},
															"src": "2131:5:2",
															"typeDescriptions": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														}
													],
													"id": 257,
													"isConstant": false,
													"isInlineArray": false,
													"isLValue": false,
													"isPure": false,
													"lValueRequested": false,
													"nodeType": "TupleExpression",
													"src": "2124:13:2",
													"typeDescriptions": {
														"typeIdentifier": "t_tuple$_t_bool_$_t_uint256_$",
														"typeString": "tuple(bool,uint256)"
													}
												},
												"functionReturnParameters": 244,
												"id": 258,
												"nodeType": "Return",
												"src": "2117:20:2"
											}
										]
									},
									"documentation": {
										"id": 234,
										"nodeType": "StructuredDocumentation",
										"src": "1849:138:2",
										"text": " @dev Returns the division of two unsigned integers, with a division by zero flag.\n _Available since v3.4._"
									},
									"id": 260,
									"implemented": true,
									"kind": "function",
									"modifiers": [],
									"name": "tryDiv",
									"nodeType": "FunctionDefinition",
									"overrides": null,
									"parameters": {
										"id": 239,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 236,
												"mutability": "mutable",
												"name": "a",
												"nodeType": "VariableDeclaration",
												"overrides": null,
												"scope": 260,
												"src": "2008:9:2",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 235,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "2008:7:2",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"value": null,
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 238,
												"mutability": "mutable",
												"name": "b",
												"nodeType": "VariableDeclaration",
												"overrides": null,
												"scope": 260,
												"src": "2019:9:2",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 237,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "2019:7:2",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"value": null,
												"visibility": "internal"
											}
										],
										"src": "2007:22:2"
									},
									"returnParameters": {
										"id": 244,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 241,
												"mutability": "mutable",
												"name": "",
												"nodeType": "VariableDeclaration",
												"overrides": null,
												"scope": 260,
												"src": "2053:4:2",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_bool",
													"typeString": "bool"
												},
												"typeName": {
													"id": 240,
													"name": "bool",
													"nodeType": "ElementaryTypeName",
													"src": "2053:4:2",
													"typeDescriptions": {
														"typeIdentifier": "t_bool",
														"typeString": "bool"
													}
												},
												"value": null,
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 243,
												"mutability": "mutable",
												"name": "",
												"nodeType": "VariableDeclaration",
												"overrides": null,
												"scope": 260,
												"src": "2059:7:2",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 242,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "2059:7:2",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"value": null,
												"visibility": "internal"
											}
										],
										"src": "2052:15:2"
									},
									"scope": 518,
									"src": "1992:152:2",
									"stateMutability": "pure",
									"virtual": false,
									"visibility": "internal"
								},
								{
									"body": {
										"id": 286,
										"nodeType": "Block",
										"src": "2379:76:2",
										"statements": [
											{
												"condition": {
													"argumentTypes": null,
													"commonType": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													},
													"id": 274,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"lValueRequested": false,
													"leftExpression": {
														"argumentTypes": null,
														"id": 272,
														"name": "b",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 265,
														"src": "2393:1:2",
														"typeDescriptions": {
															"typeIdentifier": "t_uint256",
															"typeString": "uint256"
														}
													},
													"nodeType": "BinaryOperation",
													"operator": "==",
													"rightExpression": {
														"argumentTypes": null,
														"hexValue": "30",
														"id": 273,
														"isConstant": false,
														"isLValue": false,
														"isPure": true,
														"kind": "number",
														"lValueRequested": false,
														"nodeType": "Literal",
														"src": "2398:1:2",
														"subdenomination": null,
														"typeDescriptions": {
															"typeIdentifier": "t_rational_0_by_1",
															"typeString": "int_const 0"
														},
														"value": "0"
													},
													"src": "2393:6:2",
													"typeDescriptions": {
														"typeIdentifier": "t_bool",
														"typeString": "bool"
													}
												},
												"falseBody": null,
												"id": 279,
												"nodeType": "IfStatement",
												"src": "2389:29:2",
												"trueBody": {
													"expression": {
														"argumentTypes": null,
														"components": [
															{
																"argumentTypes": null,
																"hexValue": "66616c7365",
																"id": 275,
																"isConstant": false,
																"isLValue": false,
																"isPure": true,
																"kind": "bool",
																"lValueRequested": false,
																"nodeType": "Literal",
																"src": "2409:5:2",
																"subdenomination": null,
																"typeDescriptions": {
																	"typeIdentifier": "t_bool",
																	"typeString": "bool"
																},
																"value": "false"
															},
															{
																"argumentTypes": null,
																"hexValue": "30",
																"id": 276,
																"isConstant": false,
																"isLValue": false,
																"isPure": true,
																"kind": "number",
																"lValueRequested": false,
																"nodeType": "Literal",
																"src": "2416:1:2",
																"subdenomination": null,
																"typeDescriptions": {
																	"typeIdentifier": "t_rational_0_by_1",
																	"typeString": "int_const 0"
																},
																"value": "0"
															}
														],
														"id": 277,
														"isConstant": false,
														"isInlineArray": false,
														"isLValue": false,
														"isPure": true,
														"lValueRequested": false,
														"nodeType": "TupleExpression",
														"src": "2408:10:2",
														"typeDescriptions": {
															"typeIdentifier": "t_tuple$_t_bool_$_t_rational_0_by_1_$",
															"typeString": "tuple(bool,int_const 0)"
														}
													},
													"functionReturnParameters": 271,
													"id": 278,
													"nodeType": "Return",
													"src": "2401:17:2"
												}
											},
											{
												"expression": {
													"argumentTypes": null,
													"components": [
														{
															"argumentTypes": null,
															"hexValue": "74727565",
															"id": 280,
															"isConstant": false,
															"isLValue": false,
															"isPure": true,
															"kind": "bool",
															"lValueRequested": false,
															"nodeType": "Literal",
															"src": "2436:4:2",
															"subdenomination": null,
															"typeDescriptions": {
																"typeIdentifier": "t_bool",
																"typeString": "bool"
															},
															"value": "true"
														},
														{
															"argumentTypes": null,
															"commonType": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															},
															"id": 283,
															"isConstant": false,
															"isLValue": false,
															"isPure": false,
															"lValueRequested": false,
															"leftExpression": {
																"argumentTypes": null,
																"id": 281,
																"name": "a",
																"nodeType": "Identifier",
																"overloadedDeclarations": [],
																"referencedDeclaration": 263,
																"src": "2442:1:2",
																"typeDescriptions": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																}
															},
															"nodeType": "BinaryOperation",
															"operator": "%",
															"rightExpression": {
																"argumentTypes": null,
																"id": 282,
																"name": "b",
																"nodeType": "Identifier",
																"overloadedDeclarations": [],
																"referencedDeclaration": 265,
																"src": "2446:1:2",
																"typeDescriptions": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																}
															},
															"src": "2442:5:2",
															"typeDescriptions": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														}
													],
													"id": 284,
													"isConstant": false,
													"isInlineArray": false,
													"isLValue": false,
													"isPure": false,
													"lValueRequested": false,
													"nodeType": "TupleExpression",
													"src": "2435:13:2",
													"typeDescriptions": {
														"typeIdentifier": "t_tuple$_t_bool_$_t_uint256_$",
														"typeString": "tuple(bool,uint256)"
													}
												},
												"functionReturnParameters": 271,
												"id": 285,
												"nodeType": "Return",
												"src": "2428:20:2"
											}
										]
									},
									"documentation": {
										"id": 261,
										"nodeType": "StructuredDocumentation",
										"src": "2150:148:2",
										"text": " @dev Returns the remainder of dividing two unsigned integers, with a division by zero flag.\n _Available since v3.4._"
									},
									"id": 287,
									"implemented": true,
									"kind": "function",
									"modifiers": [],
									"name": "tryMod",
									"nodeType": "FunctionDefinition",
									"overrides": null,
									"parameters": {
										"id": 266,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 263,
												"mutability": "mutable",
												"name": "a",
												"nodeType": "VariableDeclaration",
												"overrides": null,
												"scope": 287,
												"src": "2319:9:2",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 262,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "2319:7:2",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"value": null,
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 265,
												"mutability": "mutable",
												"name": "b",
												"nodeType": "VariableDeclaration",
												"overrides": null,
												"scope": 287,
												"src": "2330:9:2",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 264,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "2330:7:2",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"value": null,
												"visibility": "internal"
											}
										],
										"src": "2318:22:2"
									},
									"returnParameters": {
										"id": 271,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 268,
												"mutability": "mutable",
												"name": "",
												"nodeType": "VariableDeclaration",
												"overrides": null,
												"scope": 287,
												"src": "2364:4:2",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_bool",
													"typeString": "bool"
												},
												"typeName": {
													"id": 267,
													"name": "bool",
													"nodeType": "ElementaryTypeName",
													"src": "2364:4:2",
													"typeDescriptions": {
														"typeIdentifier": "t_bool",
														"typeString": "bool"
													}
												},
												"value": null,
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 270,
												"mutability": "mutable",
												"name": "",
												"nodeType": "VariableDeclaration",
												"overrides": null,
												"scope": 287,
												"src": "2370:7:2",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 269,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "2370:7:2",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"value": null,
												"visibility": "internal"
											}
										],
										"src": "2363:15:2"
									},
									"scope": 518,
									"src": "2303:152:2",
									"stateMutability": "pure",
									"virtual": false,
									"visibility": "internal"
								},
								{
									"body": {
										"id": 312,
										"nodeType": "Block",
										"src": "2757:108:2",
										"statements": [
											{
												"assignments": [
													298
												],
												"declarations": [
													{
														"constant": false,
														"id": 298,
														"mutability": "mutable",
														"name": "c",
														"nodeType": "VariableDeclaration",
														"overrides": null,
														"scope": 312,
														"src": "2767:9:2",
														"stateVariable": false,
														"storageLocation": "default",
														"typeDescriptions": {
															"typeIdentifier": "t_uint256",
															"typeString": "uint256"
														},
														"typeName": {
															"id": 297,
															"name": "uint256",
															"nodeType": "ElementaryTypeName",
															"src": "2767:7:2",
															"typeDescriptions": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														},
														"value": null,
														"visibility": "internal"
													}
												],
												"id": 302,
												"initialValue": {
													"argumentTypes": null,
													"commonType": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													},
													"id": 301,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"lValueRequested": false,
													"leftExpression": {
														"argumentTypes": null,
														"id": 299,
														"name": "a",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 290,
														"src": "2779:1:2",
														"typeDescriptions": {
															"typeIdentifier": "t_uint256",
															"typeString": "uint256"
														}
													},
													"nodeType": "BinaryOperation",
													"operator": "+",
													"rightExpression": {
														"argumentTypes": null,
														"id": 300,
														"name": "b",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 292,
														"src": "2783:1:2",
														"typeDescriptions": {
															"typeIdentifier": "t_uint256",
															"typeString": "uint256"
														}
													},
													"src": "2779:5:2",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"nodeType": "VariableDeclarationStatement",
												"src": "2767:17:2"
											},
											{
												"expression": {
													"argumentTypes": null,
													"arguments": [
														{
															"argumentTypes": null,
															"commonType": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															},
															"id": 306,
															"isConstant": false,
															"isLValue": false,
															"isPure": false,
															"lValueRequested": false,
															"leftExpression": {
																"argumentTypes": null,
																"id": 304,
																"name": "c",
																"nodeType": "Identifier",
																"overloadedDeclarations": [],
																"referencedDeclaration": 298,
																"src": "2802:1:2",
																"typeDescriptions": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																}
															},
															"nodeType": "BinaryOperation",
															"operator": ">=",
															"rightExpression": {
																"argumentTypes": null,
																"id": 305,
																"name": "a",
																"nodeType": "Identifier",
																"overloadedDeclarations": [],
																"referencedDeclaration": 290,
																"src": "2807:1:2",
																"typeDescriptions": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																}
															},
															"src": "2802:6:2",
															"typeDescriptions": {
																"typeIdentifier": "t_bool",
																"typeString": "bool"
															}
														},
														{
															"argumentTypes": null,
															"hexValue": "536166654d6174683a206164646974696f6e206f766572666c6f77",
															"id": 307,
															"isConstant": false,
															"isLValue": false,
															"isPure": true,
															"kind": "string",
															"lValueRequested": false,
															"nodeType": "Literal",
															"src": "2810:29:2",
															"subdenomination": null,
															"typeDescriptions": {
																"typeIdentifier": "t_stringliteral_30cc447bcc13b3e22b45cef0dd9b0b514842d836dd9b6eb384e20dedfb47723a",
																"typeString": "literal_string \"SafeMath: addition overflow\""
															},
															"value": "SafeMath: addition overflow"
														}
													],
													"expression": {
														"argumentTypes": [
															{
																"typeIdentifier": "t_bool",
																"typeString": "bool"
															},
															{
																"typeIdentifier": "t_stringliteral_30cc447bcc13b3e22b45cef0dd9b0b514842d836dd9b6eb384e20dedfb47723a",
																"typeString": "literal_string \"SafeMath: addition overflow\""
															}
														],
														"id": 303,
														"name": "require",
														"nodeType": "Identifier",
														"overloadedDeclarations": [
															-18,
															-18
														],
														"referencedDeclaration": -18,
														"src": "2794:7:2",
														"typeDescriptions": {
															"typeIdentifier": "t_function_require_pure$_t_bool_$_t_string_memory_ptr_$returns$__$",
															"typeString": "function (bool,string memory) pure"
														}
													},
													"id": 308,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"kind": "functionCall",
													"lValueRequested": false,
													"names": [],
													"nodeType": "FunctionCall",
													"src": "2794:46:2",
													"tryCall": false,
													"typeDescriptions": {
														"typeIdentifier": "t_tuple$__$",
														"typeString": "tuple()"
													}
												},
												"id": 309,
												"nodeType": "ExpressionStatement",
												"src": "2794:46:2"
											},
											{
												"expression": {
													"argumentTypes": null,
													"id": 310,
													"name": "c",
													"nodeType": "Identifier",
													"overloadedDeclarations": [],
													"referencedDeclaration": 298,
													"src": "2857:1:2",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"functionReturnParameters": 296,
												"id": 311,
												"nodeType": "Return",
												"src": "2850:8:2"
											}
										]
									},
									"documentation": {
										"id": 288,
										"nodeType": "StructuredDocumentation",
										"src": "2461:224:2",
										"text": " @dev Returns the addition of two unsigned integers, reverting on\n overflow.\n Counterpart to Solidity's `+` operator.\n Requirements:\n - Addition cannot overflow."
									},
									"id": 313,
									"implemented": true,
									"kind": "function",
									"modifiers": [],
									"name": "add",
									"nodeType": "FunctionDefinition",
									"overrides": null,
									"parameters": {
										"id": 293,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 290,
												"mutability": "mutable",
												"name": "a",
												"nodeType": "VariableDeclaration",
												"overrides": null,
												"scope": 313,
												"src": "2703:9:2",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 289,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "2703:7:2",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"value": null,
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 292,
												"mutability": "mutable",
												"name": "b",
												"nodeType": "VariableDeclaration",
												"overrides": null,
												"scope": 313,
												"src": "2714:9:2",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 291,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "2714:7:2",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"value": null,
												"visibility": "internal"
											}
										],
										"src": "2702:22:2"
									},
									"returnParameters": {
										"id": 296,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 295,
												"mutability": "mutable",
												"name": "",
												"nodeType": "VariableDeclaration",
												"overrides": null,
												"scope": 313,
												"src": "2748:7:2",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 294,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "2748:7:2",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"value": null,
												"visibility": "internal"
											}
										],
										"src": "2747:9:2"
									},
									"scope": 518,
									"src": "2690:175:2",
									"stateMutability": "pure",
									"virtual": false,
									"visibility": "internal"
								},
								{
									"body": {
										"id": 334,
										"nodeType": "Block",
										"src": "3203:88:2",
										"statements": [
											{
												"expression": {
													"argumentTypes": null,
													"arguments": [
														{
															"argumentTypes": null,
															"commonType": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															},
															"id": 326,
															"isConstant": false,
															"isLValue": false,
															"isPure": false,
															"lValueRequested": false,
															"leftExpression": {
																"argumentTypes": null,
																"id": 324,
																"name": "b",
																"nodeType": "Identifier",
																"overloadedDeclarations": [],
																"referencedDeclaration": 318,
																"src": "3221:1:2",
																"typeDescriptions": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																}
															},
															"nodeType": "BinaryOperation",
															"operator": "<=",
															"rightExpression": {
																"argumentTypes": null,
																"id": 325,
																"name": "a",
																"nodeType": "Identifier",
																"overloadedDeclarations": [],
																"referencedDeclaration": 316,
																"src": "3226:1:2",
																"typeDescriptions": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																}
															},
															"src": "3221:6:2",
															"typeDescriptions": {
																"typeIdentifier": "t_bool",
																"typeString": "bool"
															}
														},
														{
															"argumentTypes": null,
															"hexValue": "536166654d6174683a207375627472616374696f6e206f766572666c6f77",
															"id": 327,
															"isConstant": false,
															"isLValue": false,
															"isPure": true,
															"kind": "string",
															"lValueRequested": false,
															"nodeType": "Literal",
															"src": "3229:32:2",
															"subdenomination": null,
															"typeDescriptions": {
																"typeIdentifier": "t_stringliteral_50b058e9b5320e58880d88223c9801cd9eecdcf90323d5c2318bc1b6b916e862",
																"typeString": "literal_string \"SafeMath: subtraction overflow\""
															},
															"value": "SafeMath: subtraction overflow"
														}
													],
													"expression": {
														"argumentTypes": [
															{
																"typeIdentifier": "t_bool",
																"typeString": "bool"
															},
															{
																"typeIdentifier": "t_stringliteral_50b058e9b5320e58880d88223c9801cd9eecdcf90323d5c2318bc1b6b916e862",
																"typeString": "literal_string \"SafeMath: subtraction overflow\""
															}
														],
														"id": 323,
														"name": "require",
														"nodeType": "Identifier",
														"overloadedDeclarations": [
															-18,
															-18
														],
														"referencedDeclaration": -18,
														"src": "3213:7:2",
														"typeDescriptions": {
															"typeIdentifier": "t_function_require_pure$_t_bool_$_t_string_memory_ptr_$returns$__$",
															"typeString": "function (bool,string memory) pure"
														}
													},
													"id": 328,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"kind": "functionCall",
													"lValueRequested": false,
													"names": [],
													"nodeType": "FunctionCall",
													"src": "3213:49:2",
													"tryCall": false,
													"typeDescriptions": {
														"typeIdentifier": "t_tuple$__$",
														"typeString": "tuple()"
													}
												},
												"id": 329,
												"nodeType": "ExpressionStatement",
												"src": "3213:49:2"
											},
											{
												"expression": {
													"argumentTypes": null,
													"commonType": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													},
													"id": 332,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"lValueRequested": false,
													"leftExpression": {
														"argumentTypes": null,
														"id": 330,
														"name": "a",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 316,
														"src": "3279:1:2",
														"typeDescriptions": {
															"typeIdentifier": "t_uint256",
															"typeString": "uint256"
														}
													},
													"nodeType": "BinaryOperation",
													"operator": "-",
													"rightExpression": {
														"argumentTypes": null,
														"id": 331,
														"name": "b",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 318,
														"src": "3283:1:2",
														"typeDescriptions": {
															"typeIdentifier": "t_uint256",
															"typeString": "uint256"
														}
													},
													"src": "3279:5:2",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"functionReturnParameters": 322,
												"id": 333,
												"nodeType": "Return",
												"src": "3272:12:2"
											}
										]
									},
									"documentation": {
										"id": 314,
										"nodeType": "StructuredDocumentation",
										"src": "2871:260:2",
										"text": " @dev Returns the subtraction of two unsigned integers, reverting on\n overflow (when the result is negative).\n Counterpart to Solidity's `-` operator.\n Requirements:\n - Subtraction cannot overflow."
									},
									"id": 335,
									"implemented": true,
									"kind": "function",
									"modifiers": [],
									"name": "sub",
									"nodeType": "FunctionDefinition",
									"overrides": null,
									"parameters": {
										"id": 319,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 316,
												"mutability": "mutable",
												"name": "a",
												"nodeType": "VariableDeclaration",
												"overrides": null,
												"scope": 335,
												"src": "3149:9:2",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 315,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "3149:7:2",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"value": null,
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 318,
												"mutability": "mutable",
												"name": "b",
												"nodeType": "VariableDeclaration",
												"overrides": null,
												"scope": 335,
												"src": "3160:9:2",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 317,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "3160:7:2",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"value": null,
												"visibility": "internal"
											}
										],
										"src": "3148:22:2"
									},
									"returnParameters": {
										"id": 322,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 321,
												"mutability": "mutable",
												"name": "",
												"nodeType": "VariableDeclaration",
												"overrides": null,
												"scope": 335,
												"src": "3194:7:2",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 320,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "3194:7:2",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"value": null,
												"visibility": "internal"
											}
										],
										"src": "3193:9:2"
									},
									"scope": 518,
									"src": "3136:155:2",
									"stateMutability": "pure",
									"virtual": false,
									"visibility": "internal"
								},
								{
									"body": {
										"id": 368,
										"nodeType": "Block",
										"src": "3605:148:2",
										"statements": [
											{
												"condition": {
													"argumentTypes": null,
													"commonType": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													},
													"id": 347,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"lValueRequested": false,
													"leftExpression": {
														"argumentTypes": null,
														"id": 345,
														"name": "a",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 338,
														"src": "3619:1:2",
														"typeDescriptions": {
															"typeIdentifier": "t_uint256",
															"typeString": "uint256"
														}
													},
													"nodeType": "BinaryOperation",
													"operator": "==",
													"rightExpression": {
														"argumentTypes": null,
														"hexValue": "30",
														"id": 346,
														"isConstant": false,
														"isLValue": false,
														"isPure": true,
														"kind": "number",
														"lValueRequested": false,
														"nodeType": "Literal",
														"src": "3624:1:2",
														"subdenomination": null,
														"typeDescriptions": {
															"typeIdentifier": "t_rational_0_by_1",
															"typeString": "int_const 0"
														},
														"value": "0"
													},
													"src": "3619:6:2",
													"typeDescriptions": {
														"typeIdentifier": "t_bool",
														"typeString": "bool"
													}
												},
												"falseBody": null,
												"id": 350,
												"nodeType": "IfStatement",
												"src": "3615:20:2",
												"trueBody": {
													"expression": {
														"argumentTypes": null,
														"hexValue": "30",
														"id": 348,
														"isConstant": false,
														"isLValue": false,
														"isPure": true,
														"kind": "number",
														"lValueRequested": false,
														"nodeType": "Literal",
														"src": "3634:1:2",
														"subdenomination": null,
														"typeDescriptions": {
															"typeIdentifier": "t_rational_0_by_1",
															"typeString": "int_const 0"
														},
														"value": "0"
													},
													"functionReturnParameters": 344,
													"id": 349,
													"nodeType": "Return",
													"src": "3627:8:2"
												}
											},
											{
												"assignments": [
													352
												],
												"declarations": [
													{
														"constant": false,
														"id": 352,
														"mutability": "mutable",
														"name": "c",
														"nodeType": "VariableDeclaration",
														"overrides": null,
														"scope": 368,
														"src": "3645:9:2",
														"stateVariable": false,
														"storageLocation": "default",
														"typeDescriptions": {
															"typeIdentifier": "t_uint256",
															"typeString": "uint256"
														},
														"typeName": {
															"id": 351,
															"name": "uint256",
															"nodeType": "ElementaryTypeName",
															"src": "3645:7:2",
															"typeDescriptions": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														},
														"value": null,
														"visibility": "internal"
													}
												],
												"id": 356,
												"initialValue": {
													"argumentTypes": null,
													"commonType": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													},
													"id": 355,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"lValueRequested": false,
													"leftExpression": {
														"argumentTypes": null,
														"id": 353,
														"name": "a",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 338,
														"src": "3657:1:2",
														"typeDescriptions": {
															"typeIdentifier": "t_uint256",
															"typeString": "uint256"
														}
													},
													"nodeType": "BinaryOperation",
													"operator": "*",
													"rightExpression": {
														"argumentTypes": null,
														"id": 354,
														"name": "b",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 340,
														"src": "3661:1:2",
														"typeDescriptions": {
															"typeIdentifier": "t_uint256",
															"typeString": "uint256"
														}
													},
													"src": "3657:5:2",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"nodeType": "VariableDeclarationStatement",
												"src": "3645:17:2"
											},
											{
												"expression": {
													"argumentTypes": null,
													"arguments": [
														{
															"argumentTypes": null,
															"commonType": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															},
															"id": 362,
															"isConstant": false,
															"isLValue": false,
															"isPure": false,
															"lValueRequested": false,
															"leftExpression": {
																"argumentTypes": null,
																"commonType": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																},
																"id": 360,
																"isConstant": false,
																"isLValue": false,
																"isPure": false,
																"lValueRequested": false,
																"leftExpression": {
																	"argumentTypes": null,
																	"id": 358,
																	"name": "c",
																	"nodeType": "Identifier",
																	"overloadedDeclarations": [],
																	"referencedDeclaration": 352,
																	"src": "3680:1:2",
																	"typeDescriptions": {
																		"typeIdentifier": "t_uint256",
																		"typeString": "uint256"
																	}
																},
																"nodeType": "BinaryOperation",
																"operator": "/",
																"rightExpression": {
																	"argumentTypes": null,
																	"id": 359,
																	"name": "a",
																	"nodeType": "Identifier",
																	"overloadedDeclarations": [],
																	"referencedDeclaration": 338,
																	"src": "3684:1:2",
																	"typeDescriptions": {
																		"typeIdentifier": "t_uint256",
																		"typeString": "uint256"
																	}
																},
																"src": "3680:5:2",
																"typeDescriptions": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																}
															},
															"nodeType": "BinaryOperation",
															"operator": "==",
															"rightExpression": {
																"argumentTypes": null,
																"id": 361,
																"name": "b",
																"nodeType": "Identifier",
																"overloadedDeclarations": [],
																"referencedDeclaration": 340,
																"src": "3689:1:2",
																"typeDescriptions": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																}
															},
															"src": "3680:10:2",
															"typeDescriptions": {
																"typeIdentifier": "t_bool",
																"typeString": "bool"
															}
														},
														{
															"argumentTypes": null,
															"hexValue": "536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f77",
															"id": 363,
															"isConstant": false,
															"isLValue": false,
															"isPure": true,
															"kind": "string",
															"lValueRequested": false,
															"nodeType": "Literal",
															"src": "3692:35:2",
															"subdenomination": null,
															"typeDescriptions": {
																"typeIdentifier": "t_stringliteral_9113bb53c2876a3805b2c9242029423fc540a728243ce887ab24c82cf119fba3",
																"typeString": "literal_string \"SafeMath: multiplication overflow\""
															},
															"value": "SafeMath: multiplication overflow"
														}
													],
													"expression": {
														"argumentTypes": [
															{
																"typeIdentifier": "t_bool",
																"typeString": "bool"
															},
															{
																"typeIdentifier": "t_stringliteral_9113bb53c2876a3805b2c9242029423fc540a728243ce887ab24c82cf119fba3",
																"typeString": "literal_string \"SafeMath: multiplication overflow\""
															}
														],
														"id": 357,
														"name": "require",
														"nodeType": "Identifier",
														"overloadedDeclarations": [
															-18,
															-18
														],
														"referencedDeclaration": -18,
														"src": "3672:7:2",
														"typeDescriptions": {
															"typeIdentifier": "t_function_require_pure$_t_bool_$_t_string_memory_ptr_$returns$__$",
															"typeString": "function (bool,string memory) pure"
														}
													},
													"id": 364,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"kind": "functionCall",
													"lValueRequested": false,
													"names": [],
													"nodeType": "FunctionCall",
													"src": "3672:56:2",
													"tryCall": false,
													"typeDescriptions": {
														"typeIdentifier": "t_tuple$__$",
														"typeString": "tuple()"
													}
												},
												"id": 365,
												"nodeType": "ExpressionStatement",
												"src": "3672:56:2"
											},
											{
												"expression": {
													"argumentTypes": null,
													"id": 366,
													"name": "c",
													"nodeType": "Identifier",
													"overloadedDeclarations": [],
													"referencedDeclaration": 352,
													"src": "3745:1:2",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"functionReturnParameters": 344,
												"id": 367,
												"nodeType": "Return",
												"src": "3738:8:2"
											}
										]
									},
									"documentation": {
										"id": 336,
										"nodeType": "StructuredDocumentation",
										"src": "3297:236:2",
										"text": " @dev Returns the multiplication of two unsigned integers, reverting on\n overflow.\n Counterpart to Solidity's `*` operator.\n Requirements:\n - Multiplication cannot overflow."
									},
									"id": 369,
									"implemented": true,
									"kind": "function",
									"modifiers": [],
									"name": "mul",
									"nodeType": "FunctionDefinition",
									"overrides": null,
									"parameters": {
										"id": 341,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 338,
												"mutability": "mutable",
												"name": "a",
												"nodeType": "VariableDeclaration",
												"overrides": null,
												"scope": 369,
												"src": "3551:9:2",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 337,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "3551:7:2",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"value": null,
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 340,
												"mutability": "mutable",
												"name": "b",
												"nodeType": "VariableDeclaration",
												"overrides": null,
												"scope": 369,
												"src": "3562:9:2",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 339,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "3562:7:2",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"value": null,
												"visibility": "internal"
											}
										],
										"src": "3550:22:2"
									},
									"returnParameters": {
										"id": 344,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 343,
												"mutability": "mutable",
												"name": "",
												"nodeType": "VariableDeclaration",
												"overrides": null,
												"scope": 369,
												"src": "3596:7:2",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 342,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "3596:7:2",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"value": null,
												"visibility": "internal"
											}
										],
										"src": "3595:9:2"
									},
									"scope": 518,
									"src": "3538:215:2",
									"stateMutability": "pure",
									"virtual": false,
									"visibility": "internal"
								},
								{
									"body": {
										"id": 390,
										"nodeType": "Block",
										"src": "4284:83:2",
										"statements": [
											{
												"expression": {
													"argumentTypes": null,
													"arguments": [
														{
															"argumentTypes": null,
															"commonType": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															},
															"id": 382,
															"isConstant": false,
															"isLValue": false,
															"isPure": false,
															"lValueRequested": false,
															"leftExpression": {
																"argumentTypes": null,
																"id": 380,
																"name": "b",
																"nodeType": "Identifier",
																"overloadedDeclarations": [],
																"referencedDeclaration": 374,
																"src": "4302:1:2",
																"typeDescriptions": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																}
															},
															"nodeType": "BinaryOperation",
															"operator": ">",
															"rightExpression": {
																"argumentTypes": null,
																"hexValue": "30",
																"id": 381,
																"isConstant": false,
																"isLValue": false,
																"isPure": true,
																"kind": "number",
																"lValueRequested": false,
																"nodeType": "Literal",
																"src": "4306:1:2",
																"subdenomination": null,
																"typeDescriptions": {
																	"typeIdentifier": "t_rational_0_by_1",
																	"typeString": "int_const 0"
																},
																"value": "0"
															},
															"src": "4302:5:2",
															"typeDescriptions": {
																"typeIdentifier": "t_bool",
																"typeString": "bool"
															}
														},
														{
															"argumentTypes": null,
															"hexValue": "536166654d6174683a206469766973696f6e206279207a65726f",
															"id": 383,
															"isConstant": false,
															"isLValue": false,
															"isPure": true,
															"kind": "string",
															"lValueRequested": false,
															"nodeType": "Literal",
															"src": "4309:28:2",
															"subdenomination": null,
															"typeDescriptions": {
																"typeIdentifier": "t_stringliteral_5b7cc70dda4dc2143e5adb63bd5d1f349504f461dbdfd9bc76fac1f8ca6d019f",
																"typeString": "literal_string \"SafeMath: division by zero\""
															},
															"value": "SafeMath: division by zero"
														}
													],
													"expression": {
														"argumentTypes": [
															{
																"typeIdentifier": "t_bool",
																"typeString": "bool"
															},
															{
																"typeIdentifier": "t_stringliteral_5b7cc70dda4dc2143e5adb63bd5d1f349504f461dbdfd9bc76fac1f8ca6d019f",
																"typeString": "literal_string \"SafeMath: division by zero\""
															}
														],
														"id": 379,
														"name": "require",
														"nodeType": "Identifier",
														"overloadedDeclarations": [
															-18,
															-18
														],
														"referencedDeclaration": -18,
														"src": "4294:7:2",
														"typeDescriptions": {
															"typeIdentifier": "t_function_require_pure$_t_bool_$_t_string_memory_ptr_$returns$__$",
															"typeString": "function (bool,string memory) pure"
														}
													},
													"id": 384,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"kind": "functionCall",
													"lValueRequested": false,
													"names": [],
													"nodeType": "FunctionCall",
													"src": "4294:44:2",
													"tryCall": false,
													"typeDescriptions": {
														"typeIdentifier": "t_tuple$__$",
														"typeString": "tuple()"
													}
												},
												"id": 385,
												"nodeType": "ExpressionStatement",
												"src": "4294:44:2"
											},
											{
												"expression": {
													"argumentTypes": null,
													"commonType": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													},
													"id": 388,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"lValueRequested": false,
													"leftExpression": {
														"argumentTypes": null,
														"id": 386,
														"name": "a",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 372,
														"src": "4355:1:2",
														"typeDescriptions": {
															"typeIdentifier": "t_uint256",
															"typeString": "uint256"
														}
													},
													"nodeType": "BinaryOperation",
													"operator": "/",
													"rightExpression": {
														"argumentTypes": null,
														"id": 387,
														"name": "b",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 374,
														"src": "4359:1:2",
														"typeDescriptions": {
															"typeIdentifier": "t_uint256",
															"typeString": "uint256"
														}
													},
													"src": "4355:5:2",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"functionReturnParameters": 378,
												"id": 389,
												"nodeType": "Return",
												"src": "4348:12:2"
											}
										]
									},
									"documentation": {
										"id": 370,
										"nodeType": "StructuredDocumentation",
										"src": "3759:453:2",
										"text": " @dev Returns the integer division of two unsigned integers, reverting on\n division by zero. The result is rounded towards zero.\n Counterpart to Solidity's `/` operator. Note: this function uses a\n `revert` opcode (which leaves remaining gas untouched) while Solidity\n uses an invalid opcode to revert (consuming all remaining gas).\n Requirements:\n - The divisor cannot be zero."
									},
									"id": 391,
									"implemented": true,
									"kind": "function",
									"modifiers": [],
									"name": "div",
									"nodeType": "FunctionDefinition",
									"overrides": null,
									"parameters": {
										"id": 375,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 372,
												"mutability": "mutable",
												"name": "a",
												"nodeType": "VariableDeclaration",
												"overrides": null,
												"scope": 391,
												"src": "4230:9:2",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 371,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "4230:7:2",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"value": null,
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 374,
												"mutability": "mutable",
												"name": "b",
												"nodeType": "VariableDeclaration",
												"overrides": null,
												"scope": 391,
												"src": "4241:9:2",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 373,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "4241:7:2",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"value": null,
												"visibility": "internal"
											}
										],
										"src": "4229:22:2"
									},
									"returnParameters": {
										"id": 378,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 377,
												"mutability": "mutable",
												"name": "",
												"nodeType": "VariableDeclaration",
												"overrides": null,
												"scope": 391,
												"src": "4275:7:2",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 376,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "4275:7:2",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"value": null,
												"visibility": "internal"
											}
										],
										"src": "4274:9:2"
									},
									"scope": 518,
									"src": "4217:150:2",
									"stateMutability": "pure",
									"virtual": false,
									"visibility": "internal"
								},
								{
									"body": {
										"id": 412,
										"nodeType": "Block",
										"src": "4887:81:2",
										"statements": [
											{
												"expression": {
													"argumentTypes": null,
													"arguments": [
														{
															"argumentTypes": null,
															"commonType": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															},
															"id": 404,
															"isConstant": false,
															"isLValue": false,
															"isPure": false,
															"lValueRequested": false,
															"leftExpression": {
																"argumentTypes": null,
																"id": 402,
																"name": "b",
																"nodeType": "Identifier",
																"overloadedDeclarations": [],
																"referencedDeclaration": 396,
																"src": "4905:1:2",
																"typeDescriptions": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																}
															},
															"nodeType": "BinaryOperation",
															"operator": ">",
															"rightExpression": {
																"argumentTypes": null,
																"hexValue": "30",
																"id": 403,
																"isConstant": false,
																"isLValue": false,
																"isPure": true,
																"kind": "number",
																"lValueRequested": false,
																"nodeType": "Literal",
																"src": "4909:1:2",
																"subdenomination": null,
																"typeDescriptions": {
																	"typeIdentifier": "t_rational_0_by_1",
																	"typeString": "int_const 0"
																},
																"value": "0"
															},
															"src": "4905:5:2",
															"typeDescriptions": {
																"typeIdentifier": "t_bool",
																"typeString": "bool"
															}
														},
														{
															"argumentTypes": null,
															"hexValue": "536166654d6174683a206d6f64756c6f206279207a65726f",
															"id": 405,
															"isConstant": false,
															"isLValue": false,
															"isPure": true,
															"kind": "string",
															"lValueRequested": false,
															"nodeType": "Literal",
															"src": "4912:26:2",
															"subdenomination": null,
															"typeDescriptions": {
																"typeIdentifier": "t_stringliteral_726e51f7b81fce0a68f5f214f445e275313b20b1633f08ce954ee39abf8d7832",
																"typeString": "literal_string \"SafeMath: modulo by zero\""
															},
															"value": "SafeMath: modulo by zero"
														}
													],
													"expression": {
														"argumentTypes": [
															{
																"typeIdentifier": "t_bool",
																"typeString": "bool"
															},
															{
																"typeIdentifier": "t_stringliteral_726e51f7b81fce0a68f5f214f445e275313b20b1633f08ce954ee39abf8d7832",
																"typeString": "literal_string \"SafeMath: modulo by zero\""
															}
														],
														"id": 401,
														"name": "require",
														"nodeType": "Identifier",
														"overloadedDeclarations": [
															-18,
															-18
														],
														"referencedDeclaration": -18,
														"src": "4897:7:2",
														"typeDescriptions": {
															"typeIdentifier": "t_function_require_pure$_t_bool_$_t_string_memory_ptr_$returns$__$",
															"typeString": "function (bool,string memory) pure"
														}
													},
													"id": 406,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"kind": "functionCall",
													"lValueRequested": false,
													"names": [],
													"nodeType": "FunctionCall",
													"src": "4897:42:2",
													"tryCall": false,
													"typeDescriptions": {
														"typeIdentifier": "t_tuple$__$",
														"typeString": "tuple()"
													}
												},
												"id": 407,
												"nodeType": "ExpressionStatement",
												"src": "4897:42:2"
											},
											{
												"expression": {
													"argumentTypes": null,
													"commonType": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													},
													"id": 410,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"lValueRequested": false,
													"leftExpression": {
														"argumentTypes": null,
														"id": 408,
														"name": "a",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 394,
														"src": "4956:1:2",
														"typeDescriptions": {
															"typeIdentifier": "t_uint256",
															"typeString": "uint256"
														}
													},
													"nodeType": "BinaryOperation",
													"operator": "%",
													"rightExpression": {
														"argumentTypes": null,
														"id": 409,
														"name": "b",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 396,
														"src": "4960:1:2",
														"typeDescriptions": {
															"typeIdentifier": "t_uint256",
															"typeString": "uint256"
														}
													},
													"src": "4956:5:2",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"functionReturnParameters": 400,
												"id": 411,
												"nodeType": "Return",
												"src": "4949:12:2"
											}
										]
									},
									"documentation": {
										"id": 392,
										"nodeType": "StructuredDocumentation",
										"src": "4373:442:2",
										"text": " @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\n reverting when dividing by zero.\n Counterpart to Solidity's `%` operator. This function uses a `revert`\n opcode (which leaves remaining gas untouched) while Solidity uses an\n invalid opcode to revert (consuming all remaining gas).\n Requirements:\n - The divisor cannot be zero."
									},
									"id": 413,
									"implemented": true,
									"kind": "function",
									"modifiers": [],
									"name": "mod",
									"nodeType": "FunctionDefinition",
									"overrides": null,
									"parameters": {
										"id": 397,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 394,
												"mutability": "mutable",
												"name": "a",
												"nodeType": "VariableDeclaration",
												"overrides": null,
												"scope": 413,
												"src": "4833:9:2",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 393,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "4833:7:2",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"value": null,
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 396,
												"mutability": "mutable",
												"name": "b",
												"nodeType": "VariableDeclaration",
												"overrides": null,
												"scope": 413,
												"src": "4844:9:2",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 395,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "4844:7:2",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"value": null,
												"visibility": "internal"
											}
										],
										"src": "4832:22:2"
									},
									"returnParameters": {
										"id": 400,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 399,
												"mutability": "mutable",
												"name": "",
												"nodeType": "VariableDeclaration",
												"overrides": null,
												"scope": 413,
												"src": "4878:7:2",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 398,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "4878:7:2",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"value": null,
												"visibility": "internal"
											}
										],
										"src": "4877:9:2"
									},
									"scope": 518,
									"src": "4820:148:2",
									"stateMutability": "pure",
									"virtual": false,
									"visibility": "internal"
								},
								{
									"body": {
										"id": 436,
										"nodeType": "Block",
										"src": "5527:68:2",
										"statements": [
											{
												"expression": {
													"argumentTypes": null,
													"arguments": [
														{
															"argumentTypes": null,
															"commonType": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															},
															"id": 428,
															"isConstant": false,
															"isLValue": false,
															"isPure": false,
															"lValueRequested": false,
															"leftExpression": {
																"argumentTypes": null,
																"id": 426,
																"name": "b",
																"nodeType": "Identifier",
																"overloadedDeclarations": [],
																"referencedDeclaration": 418,
																"src": "5545:1:2",
																"typeDescriptions": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																}
															},
															"nodeType": "BinaryOperation",
															"operator": "<=",
															"rightExpression": {
																"argumentTypes": null,
																"id": 427,
																"name": "a",
																"nodeType": "Identifier",
																"overloadedDeclarations": [],
																"referencedDeclaration": 416,
																"src": "5550:1:2",
																"typeDescriptions": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																}
															},
															"src": "5545:6:2",
															"typeDescriptions": {
																"typeIdentifier": "t_bool",
																"typeString": "bool"
															}
														},
														{
															"argumentTypes": null,
															"id": 429,
															"name": "errorMessage",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 420,
															"src": "5553:12:2",
															"typeDescriptions": {
																"typeIdentifier": "t_string_memory_ptr",
																"typeString": "string memory"
															}
														}
													],
													"expression": {
														"argumentTypes": [
															{
																"typeIdentifier": "t_bool",
																"typeString": "bool"
															},
															{
																"typeIdentifier": "t_string_memory_ptr",
																"typeString": "string memory"
															}
														],
														"id": 425,
														"name": "require",
														"nodeType": "Identifier",
														"overloadedDeclarations": [
															-18,
															-18
														],
														"referencedDeclaration": -18,
														"src": "5537:7:2",
														"typeDescriptions": {
															"typeIdentifier": "t_function_require_pure$_t_bool_$_t_string_memory_ptr_$returns$__$",
															"typeString": "function (bool,string memory) pure"
														}
													},
													"id": 430,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"kind": "functionCall",
													"lValueRequested": false,
													"names": [],
													"nodeType": "FunctionCall",
													"src": "5537:29:2",
													"tryCall": false,
													"typeDescriptions": {
														"typeIdentifier": "t_tuple$__$",
														"typeString": "tuple()"
													}
												},
												"id": 431,
												"nodeType": "ExpressionStatement",
												"src": "5537:29:2"
											},
											{
												"expression": {
													"argumentTypes": null,
													"commonType": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													},
													"id": 434,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"lValueRequested": false,
													"leftExpression": {
														"argumentTypes": null,
														"id": 432,
														"name": "a",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 416,
														"src": "5583:1:2",
														"typeDescriptions": {
															"typeIdentifier": "t_uint256",
															"typeString": "uint256"
														}
													},
													"nodeType": "BinaryOperation",
													"operator": "-",
													"rightExpression": {
														"argumentTypes": null,
														"id": 433,
														"name": "b",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 418,
														"src": "5587:1:2",
														"typeDescriptions": {
															"typeIdentifier": "t_uint256",
															"typeString": "uint256"
														}
													},
													"src": "5583:5:2",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"functionReturnParameters": 424,
												"id": 435,
												"nodeType": "Return",
												"src": "5576:12:2"
											}
										]
									},
									"documentation": {
										"id": 414,
										"nodeType": "StructuredDocumentation",
										"src": "4974:453:2",
										"text": " @dev Returns the subtraction of two unsigned integers, reverting with custom message on\n overflow (when the result is negative).\n CAUTION: This function is deprecated because it requires allocating memory for the error\n message unnecessarily. For custom revert reasons use {trySub}.\n Counterpart to Solidity's `-` operator.\n Requirements:\n - Subtraction cannot overflow."
									},
									"id": 437,
									"implemented": true,
									"kind": "function",
									"modifiers": [],
									"name": "sub",
									"nodeType": "FunctionDefinition",
									"overrides": null,
									"parameters": {
										"id": 421,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 416,
												"mutability": "mutable",
												"name": "a",
												"nodeType": "VariableDeclaration",
												"overrides": null,
												"scope": 437,
												"src": "5445:9:2",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 415,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "5445:7:2",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"value": null,
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 418,
												"mutability": "mutable",
												"name": "b",
												"nodeType": "VariableDeclaration",
												"overrides": null,
												"scope": 437,
												"src": "5456:9:2",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 417,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "5456:7:2",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"value": null,
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 420,
												"mutability": "mutable",
												"name": "errorMessage",
												"nodeType": "VariableDeclaration",
												"overrides": null,
												"scope": 437,
												"src": "5467:26:2",
												"stateVariable": false,
												"storageLocation": "memory",
												"typeDescriptions": {
													"typeIdentifier": "t_string_memory_ptr",
													"typeString": "string"
												},
												"typeName": {
													"id": 419,
													"name": "string",
													"nodeType": "ElementaryTypeName",
													"src": "5467:6:2",
													"typeDescriptions": {
														"typeIdentifier": "t_string_storage_ptr",
														"typeString": "string"
													}
												},
												"value": null,
												"visibility": "internal"
											}
										],
										"src": "5444:50:2"
									},
									"returnParameters": {
										"id": 424,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 423,
												"mutability": "mutable",
												"name": "",
												"nodeType": "VariableDeclaration",
												"overrides": null,
												"scope": 437,
												"src": "5518:7:2",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 422,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "5518:7:2",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"value": null,
												"visibility": "internal"
											}
										],
										"src": "5517:9:2"
									},
									"scope": 518,
									"src": "5432:163:2",
									"stateMutability": "pure",
									"virtual": false,
									"visibility": "internal"
								},
								{
									"body": {
										"id": 468,
										"nodeType": "Block",
										"src": "5669:103:2",
										"statements": [
											{
												"assignments": [
													447
												],
												"declarations": [
													{
														"constant": false,
														"id": 447,
														"mutability": "mutable",
														"name": "c",
														"nodeType": "VariableDeclaration",
														"overrides": null,
														"scope": 468,
														"src": "5679:9:2",
														"stateVariable": false,
														"storageLocation": "default",
														"typeDescriptions": {
															"typeIdentifier": "t_uint256",
															"typeString": "uint256"
														},
														"typeName": {
															"id": 446,
															"name": "uint256",
															"nodeType": "ElementaryTypeName",
															"src": "5679:7:2",
															"typeDescriptions": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														},
														"value": null,
														"visibility": "internal"
													}
												],
												"id": 452,
												"initialValue": {
													"argumentTypes": null,
													"arguments": [
														{
															"argumentTypes": null,
															"id": 449,
															"name": "a",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 439,
															"src": "5695:1:2",
															"typeDescriptions": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														},
														{
															"argumentTypes": null,
															"id": 450,
															"name": "m",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 441,
															"src": "5698:1:2",
															"typeDescriptions": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														}
													],
													"expression": {
														"argumentTypes": [
															{
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															},
															{
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														],
														"id": 448,
														"name": "add",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 313,
														"src": "5691:3:2",
														"typeDescriptions": {
															"typeIdentifier": "t_function_internal_pure$_t_uint256_$_t_uint256_$returns$_t_uint256_$",
															"typeString": "function (uint256,uint256) pure returns (uint256)"
														}
													},
													"id": 451,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"kind": "functionCall",
													"lValueRequested": false,
													"names": [],
													"nodeType": "FunctionCall",
													"src": "5691:9:2",
													"tryCall": false,
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"nodeType": "VariableDeclarationStatement",
												"src": "5679:21:2"
											},
											{
												"assignments": [
													454
												],
												"declarations": [
													{
														"constant": false,
														"id": 454,
														"mutability": "mutable",
														"name": "d",
														"nodeType": "VariableDeclaration",
														"overrides": null,
														"scope": 468,
														"src": "5710:9:2",
														"stateVariable": false,
														"storageLocation": "default",
														"typeDescriptions": {
															"typeIdentifier": "t_uint256",
															"typeString": "uint256"
														},
														"typeName": {
															"id": 453,
															"name": "uint256",
															"nodeType": "ElementaryTypeName",
															"src": "5710:7:2",
															"typeDescriptions": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														},
														"value": null,
														"visibility": "internal"
													}
												],
												"id": 459,
												"initialValue": {
													"argumentTypes": null,
													"arguments": [
														{
															"argumentTypes": null,
															"id": 456,
															"name": "c",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 447,
															"src": "5726:1:2",
															"typeDescriptions": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														},
														{
															"argumentTypes": null,
															"hexValue": "31",
															"id": 457,
															"isConstant": false,
															"isLValue": false,
															"isPure": true,
															"kind": "number",
															"lValueRequested": false,
															"nodeType": "Literal",
															"src": "5729:1:2",
															"subdenomination": null,
															"typeDescriptions": {
																"typeIdentifier": "t_rational_1_by_1",
																"typeString": "int_const 1"
															},
															"value": "1"
														}
													],
													"expression": {
														"argumentTypes": [
															{
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															},
															{
																"typeIdentifier": "t_rational_1_by_1",
																"typeString": "int_const 1"
															}
														],
														"id": 455,
														"name": "sub",
														"nodeType": "Identifier",
														"overloadedDeclarations": [
															335,
															437
														],
														"referencedDeclaration": 335,
														"src": "5722:3:2",
														"typeDescriptions": {
															"typeIdentifier": "t_function_internal_pure$_t_uint256_$_t_uint256_$returns$_t_uint256_$",
															"typeString": "function (uint256,uint256) pure returns (uint256)"
														}
													},
													"id": 458,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"kind": "functionCall",
													"lValueRequested": false,
													"names": [],
													"nodeType": "FunctionCall",
													"src": "5722:9:2",
													"tryCall": false,
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"nodeType": "VariableDeclarationStatement",
												"src": "5710:21:2"
											},
											{
												"expression": {
													"argumentTypes": null,
													"arguments": [
														{
															"argumentTypes": null,
															"arguments": [
																{
																	"argumentTypes": null,
																	"id": 462,
																	"name": "d",
																	"nodeType": "Identifier",
																	"overloadedDeclarations": [],
																	"referencedDeclaration": 454,
																	"src": "5756:1:2",
																	"typeDescriptions": {
																		"typeIdentifier": "t_uint256",
																		"typeString": "uint256"
																	}
																},
																{
																	"argumentTypes": null,
																	"id": 463,
																	"name": "m",
																	"nodeType": "Identifier",
																	"overloadedDeclarations": [],
																	"referencedDeclaration": 441,
																	"src": "5759:1:2",
																	"typeDescriptions": {
																		"typeIdentifier": "t_uint256",
																		"typeString": "uint256"
																	}
																}
															],
															"expression": {
																"argumentTypes": [
																	{
																		"typeIdentifier": "t_uint256",
																		"typeString": "uint256"
																	},
																	{
																		"typeIdentifier": "t_uint256",
																		"typeString": "uint256"
																	}
																],
																"id": 461,
																"name": "div",
																"nodeType": "Identifier",
																"overloadedDeclarations": [
																	391,
																	493
																],
																"referencedDeclaration": 391,
																"src": "5752:3:2",
																"typeDescriptions": {
																	"typeIdentifier": "t_function_internal_pure$_t_uint256_$_t_uint256_$returns$_t_uint256_$",
																	"typeString": "function (uint256,uint256) pure returns (uint256)"
																}
															},
															"id": 464,
															"isConstant": false,
															"isLValue": false,
															"isPure": false,
															"kind": "functionCall",
															"lValueRequested": false,
															"names": [],
															"nodeType": "FunctionCall",
															"src": "5752:9:2",
															"tryCall": false,
															"typeDescriptions": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														},
														{
															"argumentTypes": null,
															"id": 465,
															"name": "m",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 441,
															"src": "5763:1:2",
															"typeDescriptions": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														}
													],
													"expression": {
														"argumentTypes": [
															{
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															},
															{
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														],
														"id": 460,
														"name": "mul",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 369,
														"src": "5748:3:2",
														"typeDescriptions": {
															"typeIdentifier": "t_function_internal_pure$_t_uint256_$_t_uint256_$returns$_t_uint256_$",
															"typeString": "function (uint256,uint256) pure returns (uint256)"
														}
													},
													"id": 466,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"kind": "functionCall",
													"lValueRequested": false,
													"names": [],
													"nodeType": "FunctionCall",
													"src": "5748:17:2",
													"tryCall": false,
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"functionReturnParameters": 445,
												"id": 467,
												"nodeType": "Return",
												"src": "5741:24:2"
											}
										]
									},
									"documentation": null,
									"id": 469,
									"implemented": true,
									"kind": "function",
									"modifiers": [],
									"name": "ceil",
									"nodeType": "FunctionDefinition",
									"overrides": null,
									"parameters": {
										"id": 442,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 439,
												"mutability": "mutable",
												"name": "a",
												"nodeType": "VariableDeclaration",
												"overrides": null,
												"scope": 469,
												"src": "5615:9:2",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 438,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "5615:7:2",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"value": null,
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 441,
												"mutability": "mutable",
												"name": "m",
												"nodeType": "VariableDeclaration",
												"overrides": null,
												"scope": 469,
												"src": "5626:9:2",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 440,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "5626:7:2",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"value": null,
												"visibility": "internal"
											}
										],
										"src": "5614:22:2"
									},
									"returnParameters": {
										"id": 445,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 444,
												"mutability": "mutable",
												"name": "",
												"nodeType": "VariableDeclaration",
												"overrides": null,
												"scope": 469,
												"src": "5660:7:2",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 443,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "5660:7:2",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"value": null,
												"visibility": "internal"
											}
										],
										"src": "5659:9:2"
									},
									"scope": 518,
									"src": "5601:171:2",
									"stateMutability": "pure",
									"virtual": false,
									"visibility": "internal"
								},
								{
									"body": {
										"id": 492,
										"nodeType": "Block",
										"src": "6524:67:2",
										"statements": [
											{
												"expression": {
													"argumentTypes": null,
													"arguments": [
														{
															"argumentTypes": null,
															"commonType": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															},
															"id": 484,
															"isConstant": false,
															"isLValue": false,
															"isPure": false,
															"lValueRequested": false,
															"leftExpression": {
																"argumentTypes": null,
																"id": 482,
																"name": "b",
																"nodeType": "Identifier",
																"overloadedDeclarations": [],
																"referencedDeclaration": 474,
																"src": "6542:1:2",
																"typeDescriptions": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																}
															},
															"nodeType": "BinaryOperation",
															"operator": ">",
															"rightExpression": {
																"argumentTypes": null,
																"hexValue": "30",
																"id": 483,
																"isConstant": false,
																"isLValue": false,
																"isPure": true,
																"kind": "number",
																"lValueRequested": false,
																"nodeType": "Literal",
																"src": "6546:1:2",
																"subdenomination": null,
																"typeDescriptions": {
																	"typeIdentifier": "t_rational_0_by_1",
																	"typeString": "int_const 0"
																},
																"value": "0"
															},
															"src": "6542:5:2",
															"typeDescriptions": {
																"typeIdentifier": "t_bool",
																"typeString": "bool"
															}
														},
														{
															"argumentTypes": null,
															"id": 485,
															"name": "errorMessage",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 476,
															"src": "6549:12:2",
															"typeDescriptions": {
																"typeIdentifier": "t_string_memory_ptr",
																"typeString": "string memory"
															}
														}
													],
													"expression": {
														"argumentTypes": [
															{
																"typeIdentifier": "t_bool",
																"typeString": "bool"
															},
															{
																"typeIdentifier": "t_string_memory_ptr",
																"typeString": "string memory"
															}
														],
														"id": 481,
														"name": "require",
														"nodeType": "Identifier",
														"overloadedDeclarations": [
															-18,
															-18
														],
														"referencedDeclaration": -18,
														"src": "6534:7:2",
														"typeDescriptions": {
															"typeIdentifier": "t_function_require_pure$_t_bool_$_t_string_memory_ptr_$returns$__$",
															"typeString": "function (bool,string memory) pure"
														}
													},
													"id": 486,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"kind": "functionCall",
													"lValueRequested": false,
													"names": [],
													"nodeType": "FunctionCall",
													"src": "6534:28:2",
													"tryCall": false,
													"typeDescriptions": {
														"typeIdentifier": "t_tuple$__$",
														"typeString": "tuple()"
													}
												},
												"id": 487,
												"nodeType": "ExpressionStatement",
												"src": "6534:28:2"
											},
											{
												"expression": {
													"argumentTypes": null,
													"commonType": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													},
													"id": 490,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"lValueRequested": false,
													"leftExpression": {
														"argumentTypes": null,
														"id": 488,
														"name": "a",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 472,
														"src": "6579:1:2",
														"typeDescriptions": {
															"typeIdentifier": "t_uint256",
															"typeString": "uint256"
														}
													},
													"nodeType": "BinaryOperation",
													"operator": "/",
													"rightExpression": {
														"argumentTypes": null,
														"id": 489,
														"name": "b",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 474,
														"src": "6583:1:2",
														"typeDescriptions": {
															"typeIdentifier": "t_uint256",
															"typeString": "uint256"
														}
													},
													"src": "6579:5:2",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"functionReturnParameters": 480,
												"id": 491,
												"nodeType": "Return",
												"src": "6572:12:2"
											}
										]
									},
									"documentation": {
										"id": 470,
										"nodeType": "StructuredDocumentation",
										"src": "5778:646:2",
										"text": " @dev Returns the integer division of two unsigned integers, reverting with custom message on\n division by zero. The result is rounded towards zero.\n CAUTION: This function is deprecated because it requires allocating memory for the error\n message unnecessarily. For custom revert reasons use {tryDiv}.\n Counterpart to Solidity's `/` operator. Note: this function uses a\n `revert` opcode (which leaves remaining gas untouched) while Solidity\n uses an invalid opcode to revert (consuming all remaining gas).\n Requirements:\n - The divisor cannot be zero."
									},
									"id": 493,
									"implemented": true,
									"kind": "function",
									"modifiers": [],
									"name": "div",
									"nodeType": "FunctionDefinition",
									"overrides": null,
									"parameters": {
										"id": 477,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 472,
												"mutability": "mutable",
												"name": "a",
												"nodeType": "VariableDeclaration",
												"overrides": null,
												"scope": 493,
												"src": "6442:9:2",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 471,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "6442:7:2",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"value": null,
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 474,
												"mutability": "mutable",
												"name": "b",
												"nodeType": "VariableDeclaration",
												"overrides": null,
												"scope": 493,
												"src": "6453:9:2",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 473,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "6453:7:2",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"value": null,
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 476,
												"mutability": "mutable",
												"name": "errorMessage",
												"nodeType": "VariableDeclaration",
												"overrides": null,
												"scope": 493,
												"src": "6464:26:2",
												"stateVariable": false,
												"storageLocation": "memory",
												"typeDescriptions": {
													"typeIdentifier": "t_string_memory_ptr",
													"typeString": "string"
												},
												"typeName": {
													"id": 475,
													"name": "string",
													"nodeType": "ElementaryTypeName",
													"src": "6464:6:2",
													"typeDescriptions": {
														"typeIdentifier": "t_string_storage_ptr",
														"typeString": "string"
													}
												},
												"value": null,
												"visibility": "internal"
											}
										],
										"src": "6441:50:2"
									},
									"returnParameters": {
										"id": 480,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 479,
												"mutability": "mutable",
												"name": "",
												"nodeType": "VariableDeclaration",
												"overrides": null,
												"scope": 493,
												"src": "6515:7:2",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 478,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "6515:7:2",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"value": null,
												"visibility": "internal"
											}
										],
										"src": "6514:9:2"
									},
									"scope": 518,
									"src": "6429:162:2",
									"stateMutability": "pure",
									"virtual": false,
									"visibility": "internal"
								},
								{
									"body": {
										"id": 516,
										"nodeType": "Block",
										"src": "7332:67:2",
										"statements": [
											{
												"expression": {
													"argumentTypes": null,
													"arguments": [
														{
															"argumentTypes": null,
															"commonType": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															},
															"id": 508,
															"isConstant": false,
															"isLValue": false,
															"isPure": false,
															"lValueRequested": false,
															"leftExpression": {
																"argumentTypes": null,
																"id": 506,
																"name": "b",
																"nodeType": "Identifier",
																"overloadedDeclarations": [],
																"referencedDeclaration": 498,
																"src": "7350:1:2",
																"typeDescriptions": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																}
															},
															"nodeType": "BinaryOperation",
															"operator": ">",
															"rightExpression": {
																"argumentTypes": null,
																"hexValue": "30",
																"id": 507,
																"isConstant": false,
																"isLValue": false,
																"isPure": true,
																"kind": "number",
																"lValueRequested": false,
																"nodeType": "Literal",
																"src": "7354:1:2",
																"subdenomination": null,
																"typeDescriptions": {
																	"typeIdentifier": "t_rational_0_by_1",
																	"typeString": "int_const 0"
																},
																"value": "0"
															},
															"src": "7350:5:2",
															"typeDescriptions": {
																"typeIdentifier": "t_bool",
																"typeString": "bool"
															}
														},
														{
															"argumentTypes": null,
															"id": 509,
															"name": "errorMessage",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 500,
															"src": "7357:12:2",
															"typeDescriptions": {
																"typeIdentifier": "t_string_memory_ptr",
																"typeString": "string memory"
															}
														}
													],
													"expression": {
														"argumentTypes": [
															{
																"typeIdentifier": "t_bool",
																"typeString": "bool"
															},
															{
																"typeIdentifier": "t_string_memory_ptr",
																"typeString": "string memory"
															}
														],
														"id": 505,
														"name": "require",
														"nodeType": "Identifier",
														"overloadedDeclarations": [
															-18,
															-18
														],
														"referencedDeclaration": -18,
														"src": "7342:7:2",
														"typeDescriptions": {
															"typeIdentifier": "t_function_require_pure$_t_bool_$_t_string_memory_ptr_$returns$__$",
															"typeString": "function (bool,string memory) pure"
														}
													},
													"id": 510,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"kind": "functionCall",
													"lValueRequested": false,
													"names": [],
													"nodeType": "FunctionCall",
													"src": "7342:28:2",
													"tryCall": false,
													"typeDescriptions": {
														"typeIdentifier": "t_tuple$__$",
														"typeString": "tuple()"
													}
												},
												"id": 511,
												"nodeType": "ExpressionStatement",
												"src": "7342:28:2"
											},
											{
												"expression": {
													"argumentTypes": null,
													"commonType": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													},
													"id": 514,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"lValueRequested": false,
													"leftExpression": {
														"argumentTypes": null,
														"id": 512,
														"name": "a",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 496,
														"src": "7387:1:2",
														"typeDescriptions": {
															"typeIdentifier": "t_uint256",
															"typeString": "uint256"
														}
													},
													"nodeType": "BinaryOperation",
													"operator": "%",
													"rightExpression": {
														"argumentTypes": null,
														"id": 513,
														"name": "b",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 498,
														"src": "7391:1:2",
														"typeDescriptions": {
															"typeIdentifier": "t_uint256",
															"typeString": "uint256"
														}
													},
													"src": "7387:5:2",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"functionReturnParameters": 504,
												"id": 515,
												"nodeType": "Return",
												"src": "7380:12:2"
											}
										]
									},
									"documentation": {
										"id": 494,
										"nodeType": "StructuredDocumentation",
										"src": "6597:635:2",
										"text": " @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\n reverting with custom message when dividing by zero.\n CAUTION: This function is deprecated because it requires allocating memory for the error\n message unnecessarily. For custom revert reasons use {tryMod}.\n Counterpart to Solidity's `%` operator. This function uses a `revert`\n opcode (which leaves remaining gas untouched) while Solidity uses an\n invalid opcode to revert (consuming all remaining gas).\n Requirements:\n - The divisor cannot be zero."
									},
									"id": 517,
									"implemented": true,
									"kind": "function",
									"modifiers": [],
									"name": "mod",
									"nodeType": "FunctionDefinition",
									"overrides": null,
									"parameters": {
										"id": 501,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 496,
												"mutability": "mutable",
												"name": "a",
												"nodeType": "VariableDeclaration",
												"overrides": null,
												"scope": 517,
												"src": "7250:9:2",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 495,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "7250:7:2",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"value": null,
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 498,
												"mutability": "mutable",
												"name": "b",
												"nodeType": "VariableDeclaration",
												"overrides": null,
												"scope": 517,
												"src": "7261:9:2",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 497,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "7261:7:2",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"value": null,
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 500,
												"mutability": "mutable",
												"name": "errorMessage",
												"nodeType": "VariableDeclaration",
												"overrides": null,
												"scope": 517,
												"src": "7272:26:2",
												"stateVariable": false,
												"storageLocation": "memory",
												"typeDescriptions": {
													"typeIdentifier": "t_string_memory_ptr",
													"typeString": "string"
												},
												"typeName": {
													"id": 499,
													"name": "string",
													"nodeType": "ElementaryTypeName",
													"src": "7272:6:2",
													"typeDescriptions": {
														"typeIdentifier": "t_string_storage_ptr",
														"typeString": "string"
													}
												},
												"value": null,
												"visibility": "internal"
											}
										],
										"src": "7249:50:2"
									},
									"returnParameters": {
										"id": 504,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 503,
												"mutability": "mutable",
												"name": "",
												"nodeType": "VariableDeclaration",
												"overrides": null,
												"scope": 517,
												"src": "7323:7:2",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 502,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "7323:7:2",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"value": null,
												"visibility": "internal"
											}
										],
										"src": "7322:9:2"
									},
									"scope": 518,
									"src": "7237:162:2",
									"stateMutability": "pure",
									"virtual": false,
									"visibility": "internal"
								}
							],
							"scope": 519,
							"src": "630:6771:2"
						}
					],
					"src": "33:7368:2"
				},
				"id": 2
			},
			"contracts/owner/Operator.sol": {
				"ast": {
					"absolutePath": "contracts/owner/Operator.sol",
					"exportedSymbols": {
						"Operator": [
							629
						]
					},
					"id": 630,
					"license": "MIT",
					"nodeType": "SourceUnit",
					"nodes": [
						{
							"id": 520,
							"literals": [
								"solidity",
								">=",
								"0.6",
								".0",
								"<",
								"0.8",
								".0"
							],
							"nodeType": "PragmaDirective",
							"src": "35:31:3"
						},
						{
							"absolutePath": "@openzeppelin/contracts/access/Ownable.sol",
							"file": "@openzeppelin/contracts/access/Ownable.sol",
							"id": 521,
							"nodeType": "ImportDirective",
							"scope": 630,
							"sourceUnit": 110,
							"src": "70:52:3",
							"symbolAliases": [],
							"unitAlias": ""
						},
						{
							"absolutePath": "@openzeppelin/contracts/utils/Context.sol",
							"file": "@openzeppelin/contracts/utils/Context.sol",
							"id": 522,
							"nodeType": "ImportDirective",
							"scope": 630,
							"sourceUnit": 132,
							"src": "124:51:3",
							"symbolAliases": [],
							"unitAlias": ""
						},
						{
							"abstract": true,
							"baseContracts": [
								{
									"arguments": null,
									"baseName": {
										"contractScope": null,
										"id": 523,
										"name": "Context",
										"nodeType": "UserDefinedTypeName",
										"referencedDeclaration": 131,
										"src": "209:7:3",
										"typeDescriptions": {
											"typeIdentifier": "t_contract$_Context_$131",
											"typeString": "contract Context"
										}
									},
									"id": 524,
									"nodeType": "InheritanceSpecifier",
									"src": "209:7:3"
								},
								{
									"arguments": null,
									"baseName": {
										"contractScope": null,
										"id": 525,
										"name": "Ownable",
										"nodeType": "UserDefinedTypeName",
										"referencedDeclaration": 109,
										"src": "218:7:3",
										"typeDescriptions": {
											"typeIdentifier": "t_contract$_Ownable_$109",
											"typeString": "contract Ownable"
										}
									},
									"id": 526,
									"nodeType": "InheritanceSpecifier",
									"src": "218:7:3"
								}
							],
							"contractDependencies": [
								109,
								131
							],
							"contractKind": "contract",
							"documentation": null,
							"fullyImplemented": true,
							"id": 629,
							"linearizedBaseContracts": [
								629,
								109,
								131
							],
							"name": "Operator",
							"nodeType": "ContractDefinition",
							"nodes": [
								{
									"constant": false,
									"id": 528,
									"mutability": "mutable",
									"name": "_operator",
									"nodeType": "VariableDeclaration",
									"overrides": null,
									"scope": 629,
									"src": "233:25:3",
									"stateVariable": true,
									"storageLocation": "default",
									"typeDescriptions": {
										"typeIdentifier": "t_address",
										"typeString": "address"
									},
									"typeName": {
										"id": 527,
										"name": "address",
										"nodeType": "ElementaryTypeName",
										"src": "233:7:3",
										"stateMutability": "nonpayable",
										"typeDescriptions": {
											"typeIdentifier": "t_address",
											"typeString": "address"
										}
									},
									"value": null,
									"visibility": "private"
								},
								{
									"anonymous": false,
									"documentation": null,
									"id": 534,
									"name": "OperatorTransferred",
									"nodeType": "EventDefinition",
									"parameters": {
										"id": 533,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 530,
												"indexed": true,
												"mutability": "mutable",
												"name": "previousOperator",
												"nodeType": "VariableDeclaration",
												"overrides": null,
												"scope": 534,
												"src": "303:32:3",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 529,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "303:7:3",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"value": null,
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 532,
												"indexed": true,
												"mutability": "mutable",
												"name": "newOperator",
												"nodeType": "VariableDeclaration",
												"overrides": null,
												"scope": 534,
												"src": "346:27:3",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 531,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "346:7:3",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"value": null,
												"visibility": "internal"
											}
										],
										"src": "292:88:3"
									},
									"src": "267:114:3"
								},
								{
									"body": {
										"id": 550,
										"nodeType": "Block",
										"src": "412:101:3",
										"statements": [
											{
												"expression": {
													"argumentTypes": null,
													"id": 540,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"lValueRequested": false,
													"leftHandSide": {
														"argumentTypes": null,
														"id": 537,
														"name": "_operator",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 528,
														"src": "423:9:3",
														"typeDescriptions": {
															"typeIdentifier": "t_address",
															"typeString": "address"
														}
													},
													"nodeType": "Assignment",
													"operator": "=",
													"rightHandSide": {
														"argumentTypes": null,
														"arguments": [],
														"expression": {
															"argumentTypes": [],
															"id": 538,
															"name": "_msgSender",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 121,
															"src": "435:10:3",
															"typeDescriptions": {
																"typeIdentifier": "t_function_internal_view$__$returns$_t_address_$",
																"typeString": "function () view returns (address)"
															}
														},
														"id": 539,
														"isConstant": false,
														"isLValue": false,
														"isPure": false,
														"kind": "functionCall",
														"lValueRequested": false,
														"names": [],
														"nodeType": "FunctionCall",
														"src": "435:12:3",
														"tryCall": false,
														"typeDescriptions": {
															"typeIdentifier": "t_address",
															"typeString": "address"
														}
													},
													"src": "423:24:3",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"id": 541,
												"nodeType": "ExpressionStatement",
												"src": "423:24:3"
											},
											{
												"eventCall": {
													"argumentTypes": null,
													"arguments": [
														{
															"argumentTypes": null,
															"arguments": [
																{
																	"argumentTypes": null,
																	"hexValue": "30",
																	"id": 545,
																	"isConstant": false,
																	"isLValue": false,
																	"isPure": true,
																	"kind": "number",
																	"lValueRequested": false,
																	"nodeType": "Literal",
																	"src": "491:1:3",
																	"subdenomination": null,
																	"typeDescriptions": {
																		"typeIdentifier": "t_rational_0_by_1",
																		"typeString": "int_const 0"
																	},
																	"value": "0"
																}
															],
															"expression": {
																"argumentTypes": [
																	{
																		"typeIdentifier": "t_rational_0_by_1",
																		"typeString": "int_const 0"
																	}
																],
																"id": 544,
																"isConstant": false,
																"isLValue": false,
																"isPure": true,
																"lValueRequested": false,
																"nodeType": "ElementaryTypeNameExpression",
																"src": "483:7:3",
																"typeDescriptions": {
																	"typeIdentifier": "t_type$_t_address_$",
																	"typeString": "type(address)"
																},
																"typeName": {
																	"id": 543,
																	"name": "address",
																	"nodeType": "ElementaryTypeName",
																	"src": "483:7:3",
																	"typeDescriptions": {
																		"typeIdentifier": null,
																		"typeString": null
																	}
																}
															},
															"id": 546,
															"isConstant": false,
															"isLValue": false,
															"isPure": true,
															"kind": "typeConversion",
															"lValueRequested": false,
															"names": [],
															"nodeType": "FunctionCall",
															"src": "483:10:3",
															"tryCall": false,
															"typeDescriptions": {
																"typeIdentifier": "t_address_payable",
																"typeString": "address payable"
															}
														},
														{
															"argumentTypes": null,
															"id": 547,
															"name": "_operator",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 528,
															"src": "495:9:3",
															"typeDescriptions": {
																"typeIdentifier": "t_address",
																"typeString": "address"
															}
														}
													],
													"expression": {
														"argumentTypes": [
															{
																"typeIdentifier": "t_address_payable",
																"typeString": "address payable"
															},
															{
																"typeIdentifier": "t_address",
																"typeString": "address"
															}
														],
														"id": 542,
														"name": "OperatorTransferred",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 534,
														"src": "463:19:3",
														"typeDescriptions": {
															"typeIdentifier": "t_function_event_nonpayable$_t_address_$_t_address_$returns$__$",
															"typeString": "function (address,address)"
														}
													},
													"id": 548,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"kind": "functionCall",
													"lValueRequested": false,
													"names": [],
													"nodeType": "FunctionCall",
													"src": "463:42:3",
													"tryCall": false,
													"typeDescriptions": {
														"typeIdentifier": "t_tuple$__$",
														"typeString": "tuple()"
													}
												},
												"id": 549,
												"nodeType": "EmitStatement",
												"src": "458:47:3"
											}
										]
									},
									"documentation": null,
									"id": 551,
									"implemented": true,
									"kind": "constructor",
									"modifiers": [],
									"name": "",
									"nodeType": "FunctionDefinition",
									"overrides": null,
									"parameters": {
										"id": 535,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "400:2:3"
									},
									"returnParameters": {
										"id": 536,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "412:0:3"
									},
									"scope": 629,
									"src": "389:124:3",
									"stateMutability": "nonpayable",
									"virtual": false,
									"visibility": "internal"
								},
								{
									"body": {
										"id": 558,
										"nodeType": "Block",
										"src": "571:35:3",
										"statements": [
											{
												"expression": {
													"argumentTypes": null,
													"id": 556,
													"name": "_operator",
													"nodeType": "Identifier",
													"overloadedDeclarations": [],
													"referencedDeclaration": 528,
													"src": "589:9:3",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"functionReturnParameters": 555,
												"id": 557,
												"nodeType": "Return",
												"src": "582:16:3"
											}
										]
									},
									"documentation": null,
									"functionSelector": "570ca735",
									"id": 559,
									"implemented": true,
									"kind": "function",
									"modifiers": [],
									"name": "operator",
									"nodeType": "FunctionDefinition",
									"overrides": null,
									"parameters": {
										"id": 552,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "538:2:3"
									},
									"returnParameters": {
										"id": 555,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 554,
												"mutability": "mutable",
												"name": "",
												"nodeType": "VariableDeclaration",
												"overrides": null,
												"scope": 559,
												"src": "562:7:3",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 553,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "562:7:3",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"value": null,
												"visibility": "internal"
											}
										],
										"src": "561:9:3"
									},
									"scope": 629,
									"src": "521:85:3",
									"stateMutability": "view",
									"virtual": false,
									"visibility": "public"
								},
								{
									"body": {
										"id": 570,
										"nodeType": "Block",
										"src": "638:140:3",
										"statements": [
											{
												"expression": {
													"argumentTypes": null,
													"arguments": [
														{
															"argumentTypes": null,
															"commonType": {
																"typeIdentifier": "t_address",
																"typeString": "address"
															},
															"id": 565,
															"isConstant": false,
															"isLValue": false,
															"isPure": false,
															"lValueRequested": false,
															"leftExpression": {
																"argumentTypes": null,
																"id": 562,
																"name": "_operator",
																"nodeType": "Identifier",
																"overloadedDeclarations": [],
																"referencedDeclaration": 528,
																"src": "671:9:3",
																"typeDescriptions": {
																	"typeIdentifier": "t_address",
																	"typeString": "address"
																}
															},
															"nodeType": "BinaryOperation",
															"operator": "==",
															"rightExpression": {
																"argumentTypes": null,
																"expression": {
																	"argumentTypes": null,
																	"id": 563,
																	"name": "msg",
																	"nodeType": "Identifier",
																	"overloadedDeclarations": [],
																	"referencedDeclaration": -15,
																	"src": "684:3:3",
																	"typeDescriptions": {
																		"typeIdentifier": "t_magic_message",
																		"typeString": "msg"
																	}
																},
																"id": 564,
																"isConstant": false,
																"isLValue": false,
																"isPure": false,
																"lValueRequested": false,
																"memberName": "sender",
																"nodeType": "MemberAccess",
																"referencedDeclaration": null,
																"src": "684:10:3",
																"typeDescriptions": {
																	"typeIdentifier": "t_address_payable",
																	"typeString": "address payable"
																}
															},
															"src": "671:23:3",
															"typeDescriptions": {
																"typeIdentifier": "t_bool",
																"typeString": "bool"
															}
														},
														{
															"argumentTypes": null,
															"hexValue": "6f70657261746f723a2063616c6c6572206973206e6f7420746865206f70657261746f72",
															"id": 566,
															"isConstant": false,
															"isLValue": false,
															"isPure": true,
															"kind": "string",
															"lValueRequested": false,
															"nodeType": "Literal",
															"src": "709:38:3",
															"subdenomination": null,
															"typeDescriptions": {
																"typeIdentifier": "t_stringliteral_a62bfdba5053072911b63b0f6325b0e83fcd28b5a847d97efdd966feb4daaafb",
																"typeString": "literal_string \"operator: caller is not the operator\""
															},
															"value": "operator: caller is not the operator"
														}
													],
													"expression": {
														"argumentTypes": [
															{
																"typeIdentifier": "t_bool",
																"typeString": "bool"
															},
															{
																"typeIdentifier": "t_stringliteral_a62bfdba5053072911b63b0f6325b0e83fcd28b5a847d97efdd966feb4daaafb",
																"typeString": "literal_string \"operator: caller is not the operator\""
															}
														],
														"id": 561,
														"name": "require",
														"nodeType": "Identifier",
														"overloadedDeclarations": [
															-18,
															-18
														],
														"referencedDeclaration": -18,
														"src": "649:7:3",
														"typeDescriptions": {
															"typeIdentifier": "t_function_require_pure$_t_bool_$_t_string_memory_ptr_$returns$__$",
															"typeString": "function (bool,string memory) pure"
														}
													},
													"id": 567,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"kind": "functionCall",
													"lValueRequested": false,
													"names": [],
													"nodeType": "FunctionCall",
													"src": "649:109:3",
													"tryCall": false,
													"typeDescriptions": {
														"typeIdentifier": "t_tuple$__$",
														"typeString": "tuple()"
													}
												},
												"id": 568,
												"nodeType": "ExpressionStatement",
												"src": "649:109:3"
											},
											{
												"id": 569,
												"nodeType": "PlaceholderStatement",
												"src": "769:1:3"
											}
										]
									},
									"documentation": null,
									"id": 571,
									"name": "onlyOperator",
									"nodeType": "ModifierDefinition",
									"overrides": null,
									"parameters": {
										"id": 560,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "635:2:3"
									},
									"src": "614:164:3",
									"virtual": false,
									"visibility": "internal"
								},
								{
									"body": {
										"id": 581,
										"nodeType": "Block",
										"src": "835:51:3",
										"statements": [
											{
												"expression": {
													"argumentTypes": null,
													"commonType": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													},
													"id": 579,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"lValueRequested": false,
													"leftExpression": {
														"argumentTypes": null,
														"arguments": [],
														"expression": {
															"argumentTypes": [],
															"id": 576,
															"name": "_msgSender",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 121,
															"src": "853:10:3",
															"typeDescriptions": {
																"typeIdentifier": "t_function_internal_view$__$returns$_t_address_$",
																"typeString": "function () view returns (address)"
															}
														},
														"id": 577,
														"isConstant": false,
														"isLValue": false,
														"isPure": false,
														"kind": "functionCall",
														"lValueRequested": false,
														"names": [],
														"nodeType": "FunctionCall",
														"src": "853:12:3",
														"tryCall": false,
														"typeDescriptions": {
															"typeIdentifier": "t_address",
															"typeString": "address"
														}
													},
													"nodeType": "BinaryOperation",
													"operator": "==",
													"rightExpression": {
														"argumentTypes": null,
														"id": 578,
														"name": "_operator",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 528,
														"src": "869:9:3",
														"typeDescriptions": {
															"typeIdentifier": "t_address",
															"typeString": "address"
														}
													},
													"src": "853:25:3",
													"typeDescriptions": {
														"typeIdentifier": "t_bool",
														"typeString": "bool"
													}
												},
												"functionReturnParameters": 575,
												"id": 580,
												"nodeType": "Return",
												"src": "846:32:3"
											}
										]
									},
									"documentation": null,
									"functionSelector": "4456eda2",
									"id": 582,
									"implemented": true,
									"kind": "function",
									"modifiers": [],
									"name": "isOperator",
									"nodeType": "FunctionDefinition",
									"overrides": null,
									"parameters": {
										"id": 572,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "805:2:3"
									},
									"returnParameters": {
										"id": 575,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 574,
												"mutability": "mutable",
												"name": "",
												"nodeType": "VariableDeclaration",
												"overrides": null,
												"scope": 582,
												"src": "829:4:3",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_bool",
													"typeString": "bool"
												},
												"typeName": {
													"id": 573,
													"name": "bool",
													"nodeType": "ElementaryTypeName",
													"src": "829:4:3",
													"typeDescriptions": {
														"typeIdentifier": "t_bool",
														"typeString": "bool"
													}
												},
												"value": null,
												"visibility": "internal"
											}
										],
										"src": "828:6:3"
									},
									"scope": 629,
									"src": "786:100:3",
									"stateMutability": "view",
									"virtual": false,
									"visibility": "public"
								},
								{
									"body": {
										"id": 593,
										"nodeType": "Block",
										"src": "959:50:3",
										"statements": [
											{
												"expression": {
													"argumentTypes": null,
													"arguments": [
														{
															"argumentTypes": null,
															"id": 590,
															"name": "newOperator_",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 584,
															"src": "988:12:3",
															"typeDescriptions": {
																"typeIdentifier": "t_address",
																"typeString": "address"
															}
														}
													],
													"expression": {
														"argumentTypes": [
															{
																"typeIdentifier": "t_address",
																"typeString": "address"
															}
														],
														"id": 589,
														"name": "_transferOperator",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 628,
														"src": "970:17:3",
														"typeDescriptions": {
															"typeIdentifier": "t_function_internal_nonpayable$_t_address_$returns$__$",
															"typeString": "function (address)"
														}
													},
													"id": 591,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"kind": "functionCall",
													"lValueRequested": false,
													"names": [],
													"nodeType": "FunctionCall",
													"src": "970:31:3",
													"tryCall": false,
													"typeDescriptions": {
														"typeIdentifier": "t_tuple$__$",
														"typeString": "tuple()"
													}
												},
												"id": 592,
												"nodeType": "ExpressionStatement",
												"src": "970:31:3"
											}
										]
									},
									"documentation": null,
									"functionSelector": "29605e77",
									"id": 594,
									"implemented": true,
									"kind": "function",
									"modifiers": [
										{
											"arguments": null,
											"id": 587,
											"modifierName": {
												"argumentTypes": null,
												"id": 586,
												"name": "onlyOwner",
												"nodeType": "Identifier",
												"overloadedDeclarations": [],
												"referencedDeclaration": 58,
												"src": "949:9:3",
												"typeDescriptions": {
													"typeIdentifier": "t_modifier$__$",
													"typeString": "modifier ()"
												}
											},
											"nodeType": "ModifierInvocation",
											"src": "949:9:3"
										}
									],
									"name": "transferOperator",
									"nodeType": "FunctionDefinition",
									"overrides": null,
									"parameters": {
										"id": 585,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 584,
												"mutability": "mutable",
												"name": "newOperator_",
												"nodeType": "VariableDeclaration",
												"overrides": null,
												"scope": 594,
												"src": "920:20:3",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 583,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "920:7:3",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"value": null,
												"visibility": "internal"
											}
										],
										"src": "919:22:3"
									},
									"returnParameters": {
										"id": 588,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "959:0:3"
									},
									"scope": 629,
									"src": "894:115:3",
									"stateMutability": "nonpayable",
									"virtual": false,
									"visibility": "public"
								},
								{
									"body": {
										"id": 627,
										"nodeType": "Block",
										"src": "1075:286:3",
										"statements": [
											{
												"expression": {
													"argumentTypes": null,
													"arguments": [
														{
															"argumentTypes": null,
															"commonType": {
																"typeIdentifier": "t_address",
																"typeString": "address"
															},
															"id": 605,
															"isConstant": false,
															"isLValue": false,
															"isPure": false,
															"lValueRequested": false,
															"leftExpression": {
																"argumentTypes": null,
																"id": 600,
																"name": "newOperator_",
																"nodeType": "Identifier",
																"overloadedDeclarations": [],
																"referencedDeclaration": 596,
																"src": "1108:12:3",
																"typeDescriptions": {
																	"typeIdentifier": "t_address",
																	"typeString": "address"
																}
															},
															"nodeType": "BinaryOperation",
															"operator": "!=",
															"rightExpression": {
																"argumentTypes": null,
																"arguments": [
																	{
																		"argumentTypes": null,
																		"hexValue": "30",
																		"id": 603,
																		"isConstant": false,
																		"isLValue": false,
																		"isPure": true,
																		"kind": "number",
																		"lValueRequested": false,
																		"nodeType": "Literal",
																		"src": "1132:1:3",
																		"subdenomination": null,
																		"typeDescriptions": {
																			"typeIdentifier": "t_rational_0_by_1",
																			"typeString": "int_const 0"
																		},
																		"value": "0"
																	}
																],
																"expression": {
																	"argumentTypes": [
																		{
																			"typeIdentifier": "t_rational_0_by_1",
																			"typeString": "int_const 0"
																		}
																	],
																	"id": 602,
																	"isConstant": false,
																	"isLValue": false,
																	"isPure": true,
																	"lValueRequested": false,
																	"nodeType": "ElementaryTypeNameExpression",
																	"src": "1124:7:3",
																	"typeDescriptions": {
																		"typeIdentifier": "t_type$_t_address_$",
																		"typeString": "type(address)"
																	},
																	"typeName": {
																		"id": 601,
																		"name": "address",
																		"nodeType": "ElementaryTypeName",
																		"src": "1124:7:3",
																		"typeDescriptions": {
																			"typeIdentifier": null,
																			"typeString": null
																		}
																	}
																},
																"id": 604,
																"isConstant": false,
																"isLValue": false,
																"isPure": true,
																"kind": "typeConversion",
																"lValueRequested": false,
																"names": [],
																"nodeType": "FunctionCall",
																"src": "1124:10:3",
																"tryCall": false,
																"typeDescriptions": {
																	"typeIdentifier": "t_address_payable",
																	"typeString": "address payable"
																}
															},
															"src": "1108:26:3",
															"typeDescriptions": {
																"typeIdentifier": "t_bool",
																"typeString": "bool"
															}
														},
														{
															"argumentTypes": null,
															"hexValue": "6f70657261746f723a207a65726f206164647265737320676976656e20666f72206e6577206f70657261746f72",
															"id": 606,
															"isConstant": false,
															"isLValue": false,
															"isPure": true,
															"kind": "string",
															"lValueRequested": false,
															"nodeType": "Literal",
															"src": "1149:47:3",
															"subdenomination": null,
															"typeDescriptions": {
																"typeIdentifier": "t_stringliteral_756508c1c0554725dd91ce0028667672a5318d736a5e4bcd98b6bc8fe98c3dc7",
																"typeString": "literal_string \"operator: zero address given for new operator\""
															},
															"value": "operator: zero address given for new operator"
														}
													],
													"expression": {
														"argumentTypes": [
															{
																"typeIdentifier": "t_bool",
																"typeString": "bool"
															},
															{
																"typeIdentifier": "t_stringliteral_756508c1c0554725dd91ce0028667672a5318d736a5e4bcd98b6bc8fe98c3dc7",
																"typeString": "literal_string \"operator: zero address given for new operator\""
															}
														],
														"id": 599,
														"name": "require",
														"nodeType": "Identifier",
														"overloadedDeclarations": [
															-18,
															-18
														],
														"referencedDeclaration": -18,
														"src": "1086:7:3",
														"typeDescriptions": {
															"typeIdentifier": "t_function_require_pure$_t_bool_$_t_string_memory_ptr_$returns$__$",
															"typeString": "function (bool,string memory) pure"
														}
													},
													"id": 607,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"kind": "functionCall",
													"lValueRequested": false,
													"names": [],
													"nodeType": "FunctionCall",
													"src": "1086:121:3",
													"tryCall": false,
													"typeDescriptions": {
														"typeIdentifier": "t_tuple$__$",
														"typeString": "tuple()"
													}
												},
												"id": 608,
												"nodeType": "ExpressionStatement",
												"src": "1086:121:3"
											},
											{
												"eventCall": {
													"argumentTypes": null,
													"arguments": [
														{
															"argumentTypes": null,
															"arguments": [
																{
																	"argumentTypes": null,
																	"hexValue": "30",
																	"id": 612,
																	"isConstant": false,
																	"isLValue": false,
																	"isPure": true,
																	"kind": "number",
																	"lValueRequested": false,
																	"nodeType": "Literal",
																	"src": "1251:1:3",
																	"subdenomination": null,
																	"typeDescriptions": {
																		"typeIdentifier": "t_rational_0_by_1",
																		"typeString": "int_const 0"
																	},
																	"value": "0"
																}
															],
															"expression": {
																"argumentTypes": [
																	{
																		"typeIdentifier": "t_rational_0_by_1",
																		"typeString": "int_const 0"
																	}
																],
																"id": 611,
																"isConstant": false,
																"isLValue": false,
																"isPure": true,
																"lValueRequested": false,
																"nodeType": "ElementaryTypeNameExpression",
																"src": "1243:7:3",
																"typeDescriptions": {
																	"typeIdentifier": "t_type$_t_address_$",
																	"typeString": "type(address)"
																},
																"typeName": {
																	"id": 610,
																	"name": "address",
																	"nodeType": "ElementaryTypeName",
																	"src": "1243:7:3",
																	"typeDescriptions": {
																		"typeIdentifier": null,
																		"typeString": null
																	}
																}
															},
															"id": 613,
															"isConstant": false,
															"isLValue": false,
															"isPure": true,
															"kind": "typeConversion",
															"lValueRequested": false,
															"names": [],
															"nodeType": "FunctionCall",
															"src": "1243:10:3",
															"tryCall": false,
															"typeDescriptions": {
																"typeIdentifier": "t_address_payable",
																"typeString": "address payable"
															}
														},
														{
															"argumentTypes": null,
															"id": 614,
															"name": "newOperator_",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 596,
															"src": "1255:12:3",
															"typeDescriptions": {
																"typeIdentifier": "t_address",
																"typeString": "address"
															}
														}
													],
													"expression": {
														"argumentTypes": [
															{
																"typeIdentifier": "t_address_payable",
																"typeString": "address payable"
															},
															{
																"typeIdentifier": "t_address",
																"typeString": "address"
															}
														],
														"id": 609,
														"name": "OperatorTransferred",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 534,
														"src": "1223:19:3",
														"typeDescriptions": {
															"typeIdentifier": "t_function_event_nonpayable$_t_address_$_t_address_$returns$__$",
															"typeString": "function (address,address)"
														}
													},
													"id": 615,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"kind": "functionCall",
													"lValueRequested": false,
													"names": [],
													"nodeType": "FunctionCall",
													"src": "1223:45:3",
													"tryCall": false,
													"typeDescriptions": {
														"typeIdentifier": "t_tuple$__$",
														"typeString": "tuple()"
													}
												},
												"id": 616,
												"nodeType": "EmitStatement",
												"src": "1218:50:3"
											},
											{
												"expression": {
													"argumentTypes": null,
													"arguments": [
														{
															"argumentTypes": null,
															"id": 620,
															"name": "newOperator_",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 596,
															"src": "1305:12:3",
															"typeDescriptions": {
																"typeIdentifier": "t_address",
																"typeString": "address"
															}
														}
													],
													"expression": {
														"argumentTypes": [
															{
																"typeIdentifier": "t_address",
																"typeString": "address"
															}
														],
														"expression": {
															"argumentTypes": null,
															"id": 617,
															"name": "Ownable",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 109,
															"src": "1279:7:3",
															"typeDescriptions": {
																"typeIdentifier": "t_type$_t_contract$_Ownable_$109_$",
																"typeString": "type(contract Ownable)"
															}
														},
														"id": 619,
														"isConstant": false,
														"isLValue": false,
														"isPure": false,
														"lValueRequested": false,
														"memberName": "transferOwnership",
														"nodeType": "MemberAccess",
														"referencedDeclaration": 108,
														"src": "1279:25:3",
														"typeDescriptions": {
															"typeIdentifier": "t_function_internal_nonpayable$_t_address_$returns$__$",
															"typeString": "function (address)"
														}
													},
													"id": 621,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"kind": "functionCall",
													"lValueRequested": false,
													"names": [],
													"nodeType": "FunctionCall",
													"src": "1279:39:3",
													"tryCall": false,
													"typeDescriptions": {
														"typeIdentifier": "t_tuple$__$",
														"typeString": "tuple()"
													}
												},
												"id": 622,
												"nodeType": "ExpressionStatement",
												"src": "1279:39:3"
											},
											{
												"expression": {
													"argumentTypes": null,
													"id": 625,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"lValueRequested": false,
													"leftHandSide": {
														"argumentTypes": null,
														"id": 623,
														"name": "_operator",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 528,
														"src": "1329:9:3",
														"typeDescriptions": {
															"typeIdentifier": "t_address",
															"typeString": "address"
														}
													},
													"nodeType": "Assignment",
													"operator": "=",
													"rightHandSide": {
														"argumentTypes": null,
														"id": 624,
														"name": "newOperator_",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 596,
														"src": "1341:12:3",
														"typeDescriptions": {
															"typeIdentifier": "t_address",
															"typeString": "address"
														}
													},
													"src": "1329:24:3",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"id": 626,
												"nodeType": "ExpressionStatement",
												"src": "1329:24:3"
											}
										]
									},
									"documentation": null,
									"id": 628,
									"implemented": true,
									"kind": "function",
									"modifiers": [],
									"name": "_transferOperator",
									"nodeType": "FunctionDefinition",
									"overrides": null,
									"parameters": {
										"id": 597,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 596,
												"mutability": "mutable",
												"name": "newOperator_",
												"nodeType": "VariableDeclaration",
												"overrides": null,
												"scope": 628,
												"src": "1044:20:3",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 595,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "1044:7:3",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"value": null,
												"visibility": "internal"
											}
										],
										"src": "1043:22:3"
									},
									"returnParameters": {
										"id": 598,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "1075:0:3"
									},
									"scope": 629,
									"src": "1017:344:3",
									"stateMutability": "nonpayable",
									"virtual": false,
									"visibility": "internal"
								}
							],
							"scope": 630,
							"src": "179:1185:3"
						}
					],
					"src": "35:1331:3"
				},
				"id": 3
			},
			"contracts/utils/Epoch.sol": {
				"ast": {
					"absolutePath": "contracts/utils/Epoch.sol",
					"exportedSymbols": {
						"Epoch": [
							812
						]
					},
					"id": 813,
					"license": "MIT",
					"nodeType": "SourceUnit",
					"nodes": [
						{
							"id": 631,
							"literals": [
								"solidity",
								">=",
								"0.6",
								".0",
								"<",
								"0.8",
								".0"
							],
							"nodeType": "PragmaDirective",
							"src": "35:31:4"
						},
						{
							"absolutePath": "@openzeppelin/contracts/utils/math/SafeMath.sol",
							"file": "@openzeppelin/contracts/utils/math/SafeMath.sol",
							"id": 632,
							"nodeType": "ImportDirective",
							"scope": 813,
							"sourceUnit": 519,
							"src": "70:57:4",
							"symbolAliases": [],
							"unitAlias": ""
						},
						{
							"absolutePath": "contracts/owner/Operator.sol",
							"file": "../owner/Operator.sol",
							"id": 633,
							"nodeType": "ImportDirective",
							"scope": 813,
							"sourceUnit": 630,
							"src": "129:31:4",
							"symbolAliases": [],
							"unitAlias": ""
						},
						{
							"abstract": false,
							"baseContracts": [
								{
									"arguments": null,
									"baseName": {
										"contractScope": null,
										"id": 634,
										"name": "Operator",
										"nodeType": "UserDefinedTypeName",
										"referencedDeclaration": 629,
										"src": "182:8:4",
										"typeDescriptions": {
											"typeIdentifier": "t_contract$_Operator_$629",
											"typeString": "contract Operator"
										}
									},
									"id": 635,
									"nodeType": "InheritanceSpecifier",
									"src": "182:8:4"
								}
							],
							"contractDependencies": [
								109,
								131,
								629
							],
							"contractKind": "contract",
							"documentation": null,
							"fullyImplemented": true,
							"id": 812,
							"linearizedBaseContracts": [
								812,
								629,
								109,
								131
							],
							"name": "Epoch",
							"nodeType": "ContractDefinition",
							"nodes": [
								{
									"id": 638,
									"libraryName": {
										"contractScope": null,
										"id": 636,
										"name": "SafeMath",
										"nodeType": "UserDefinedTypeName",
										"referencedDeclaration": 518,
										"src": "204:8:4",
										"typeDescriptions": {
											"typeIdentifier": "t_contract$_SafeMath_$518",
											"typeString": "library SafeMath"
										}
									},
									"nodeType": "UsingForDirective",
									"src": "198:27:4",
									"typeName": {
										"id": 637,
										"name": "uint256",
										"nodeType": "ElementaryTypeName",
										"src": "217:7:4",
										"typeDescriptions": {
											"typeIdentifier": "t_uint256",
											"typeString": "uint256"
										}
									}
								},
								{
									"constant": false,
									"id": 640,
									"mutability": "mutable",
									"name": "period",
									"nodeType": "VariableDeclaration",
									"overrides": null,
									"scope": 812,
									"src": "233:22:4",
									"stateVariable": true,
									"storageLocation": "default",
									"typeDescriptions": {
										"typeIdentifier": "t_uint256",
										"typeString": "uint256"
									},
									"typeName": {
										"id": 639,
										"name": "uint256",
										"nodeType": "ElementaryTypeName",
										"src": "233:7:4",
										"typeDescriptions": {
											"typeIdentifier": "t_uint256",
											"typeString": "uint256"
										}
									},
									"value": null,
									"visibility": "private"
								},
								{
									"constant": false,
									"id": 642,
									"mutability": "mutable",
									"name": "startTime",
									"nodeType": "VariableDeclaration",
									"overrides": null,
									"scope": 812,
									"src": "262:25:4",
									"stateVariable": true,
									"storageLocation": "default",
									"typeDescriptions": {
										"typeIdentifier": "t_uint256",
										"typeString": "uint256"
									},
									"typeName": {
										"id": 641,
										"name": "uint256",
										"nodeType": "ElementaryTypeName",
										"src": "262:7:4",
										"typeDescriptions": {
											"typeIdentifier": "t_uint256",
											"typeString": "uint256"
										}
									},
									"value": null,
									"visibility": "private"
								},
								{
									"constant": false,
									"id": 644,
									"mutability": "mutable",
									"name": "lastEpochTime",
									"nodeType": "VariableDeclaration",
									"overrides": null,
									"scope": 812,
									"src": "294:29:4",
									"stateVariable": true,
									"storageLocation": "default",
									"typeDescriptions": {
										"typeIdentifier": "t_uint256",
										"typeString": "uint256"
									},
									"typeName": {
										"id": 643,
										"name": "uint256",
										"nodeType": "ElementaryTypeName",
										"src": "294:7:4",
										"typeDescriptions": {
											"typeIdentifier": "t_uint256",
											"typeString": "uint256"
										}
									},
									"value": null,
									"visibility": "private"
								},
								{
									"constant": false,
									"id": 646,
									"mutability": "mutable",
									"name": "epoch",
									"nodeType": "VariableDeclaration",
									"overrides": null,
									"scope": 812,
									"src": "330:21:4",
									"stateVariable": true,
									"storageLocation": "default",
									"typeDescriptions": {
										"typeIdentifier": "t_uint256",
										"typeString": "uint256"
									},
									"typeName": {
										"id": 645,
										"name": "uint256",
										"nodeType": "ElementaryTypeName",
										"src": "330:7:4",
										"typeDescriptions": {
											"typeIdentifier": "t_uint256",
											"typeString": "uint256"
										}
									},
									"value": null,
									"visibility": "private"
								},
								{
									"body": {
										"id": 674,
										"nodeType": "Block",
										"src": "518:146:4",
										"statements": [
											{
												"expression": {
													"argumentTypes": null,
													"id": 657,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"lValueRequested": false,
													"leftHandSide": {
														"argumentTypes": null,
														"id": 655,
														"name": "period",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 640,
														"src": "529:6:4",
														"typeDescriptions": {
															"typeIdentifier": "t_uint256",
															"typeString": "uint256"
														}
													},
													"nodeType": "Assignment",
													"operator": "=",
													"rightHandSide": {
														"argumentTypes": null,
														"id": 656,
														"name": "_period",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 648,
														"src": "538:7:4",
														"typeDescriptions": {
															"typeIdentifier": "t_uint256",
															"typeString": "uint256"
														}
													},
													"src": "529:16:4",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"id": 658,
												"nodeType": "ExpressionStatement",
												"src": "529:16:4"
											},
											{
												"expression": {
													"argumentTypes": null,
													"id": 661,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"lValueRequested": false,
													"leftHandSide": {
														"argumentTypes": null,
														"id": 659,
														"name": "startTime",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 642,
														"src": "556:9:4",
														"typeDescriptions": {
															"typeIdentifier": "t_uint256",
															"typeString": "uint256"
														}
													},
													"nodeType": "Assignment",
													"operator": "=",
													"rightHandSide": {
														"argumentTypes": null,
														"id": 660,
														"name": "_startTime",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 650,
														"src": "568:10:4",
														"typeDescriptions": {
															"typeIdentifier": "t_uint256",
															"typeString": "uint256"
														}
													},
													"src": "556:22:4",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"id": 662,
												"nodeType": "ExpressionStatement",
												"src": "556:22:4"
											},
											{
												"expression": {
													"argumentTypes": null,
													"id": 665,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"lValueRequested": false,
													"leftHandSide": {
														"argumentTypes": null,
														"id": 663,
														"name": "epoch",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 646,
														"src": "589:5:4",
														"typeDescriptions": {
															"typeIdentifier": "t_uint256",
															"typeString": "uint256"
														}
													},
													"nodeType": "Assignment",
													"operator": "=",
													"rightHandSide": {
														"argumentTypes": null,
														"id": 664,
														"name": "_startEpoch",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 652,
														"src": "597:11:4",
														"typeDescriptions": {
															"typeIdentifier": "t_uint256",
															"typeString": "uint256"
														}
													},
													"src": "589:19:4",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"id": 666,
												"nodeType": "ExpressionStatement",
												"src": "589:19:4"
											},
											{
												"expression": {
													"argumentTypes": null,
													"id": 672,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"lValueRequested": false,
													"leftHandSide": {
														"argumentTypes": null,
														"id": 667,
														"name": "lastEpochTime",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 644,
														"src": "619:13:4",
														"typeDescriptions": {
															"typeIdentifier": "t_uint256",
															"typeString": "uint256"
														}
													},
													"nodeType": "Assignment",
													"operator": "=",
													"rightHandSide": {
														"argumentTypes": null,
														"arguments": [
															{
																"argumentTypes": null,
																"id": 670,
																"name": "period",
																"nodeType": "Identifier",
																"overloadedDeclarations": [],
																"referencedDeclaration": 640,
																"src": "649:6:4",
																"typeDescriptions": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																}
															}
														],
														"expression": {
															"argumentTypes": [
																{
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																}
															],
															"expression": {
																"argumentTypes": null,
																"id": 668,
																"name": "startTime",
																"nodeType": "Identifier",
																"overloadedDeclarations": [],
																"referencedDeclaration": 642,
																"src": "635:9:4",
																"typeDescriptions": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																}
															},
															"id": 669,
															"isConstant": false,
															"isLValue": false,
															"isPure": false,
															"lValueRequested": false,
															"memberName": "sub",
															"nodeType": "MemberAccess",
															"referencedDeclaration": 335,
															"src": "635:13:4",
															"typeDescriptions": {
																"typeIdentifier": "t_function_internal_pure$_t_uint256_$_t_uint256_$returns$_t_uint256_$bound_to$_t_uint256_$",
																"typeString": "function (uint256,uint256) pure returns (uint256)"
															}
														},
														"id": 671,
														"isConstant": false,
														"isLValue": false,
														"isPure": false,
														"kind": "functionCall",
														"lValueRequested": false,
														"names": [],
														"nodeType": "FunctionCall",
														"src": "635:21:4",
														"tryCall": false,
														"typeDescriptions": {
															"typeIdentifier": "t_uint256",
															"typeString": "uint256"
														}
													},
													"src": "619:37:4",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"id": 673,
												"nodeType": "ExpressionStatement",
												"src": "619:37:4"
											}
										]
									},
									"documentation": null,
									"id": 675,
									"implemented": true,
									"kind": "constructor",
									"modifiers": [],
									"name": "",
									"nodeType": "FunctionDefinition",
									"overrides": null,
									"parameters": {
										"id": 653,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 648,
												"mutability": "mutable",
												"name": "_period",
												"nodeType": "VariableDeclaration",
												"overrides": null,
												"scope": 675,
												"src": "429:15:4",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 647,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "429:7:4",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"value": null,
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 650,
												"mutability": "mutable",
												"name": "_startTime",
												"nodeType": "VariableDeclaration",
												"overrides": null,
												"scope": 675,
												"src": "455:18:4",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 649,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "455:7:4",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"value": null,
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 652,
												"mutability": "mutable",
												"name": "_startEpoch",
												"nodeType": "VariableDeclaration",
												"overrides": null,
												"scope": 675,
												"src": "484:19:4",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 651,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "484:7:4",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"value": null,
												"visibility": "internal"
											}
										],
										"src": "418:92:4"
									},
									"returnParameters": {
										"id": 654,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "518:0:4"
									},
									"scope": 812,
									"src": "407:257:4",
									"stateMutability": "nonpayable",
									"virtual": false,
									"visibility": "public"
								},
								{
									"body": {
										"id": 686,
										"nodeType": "Block",
										"src": "740:96:4",
										"statements": [
											{
												"expression": {
													"argumentTypes": null,
													"arguments": [
														{
															"argumentTypes": null,
															"commonType": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															},
															"id": 681,
															"isConstant": false,
															"isLValue": false,
															"isPure": false,
															"lValueRequested": false,
															"leftExpression": {
																"argumentTypes": null,
																"expression": {
																	"argumentTypes": null,
																	"id": 678,
																	"name": "block",
																	"nodeType": "Identifier",
																	"overloadedDeclarations": [],
																	"referencedDeclaration": -4,
																	"src": "759:5:4",
																	"typeDescriptions": {
																		"typeIdentifier": "t_magic_block",
																		"typeString": "block"
																	}
																},
																"id": 679,
																"isConstant": false,
																"isLValue": false,
																"isPure": false,
																"lValueRequested": false,
																"memberName": "timestamp",
																"nodeType": "MemberAccess",
																"referencedDeclaration": null,
																"src": "759:15:4",
																"typeDescriptions": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																}
															},
															"nodeType": "BinaryOperation",
															"operator": ">=",
															"rightExpression": {
																"argumentTypes": null,
																"id": 680,
																"name": "startTime",
																"nodeType": "Identifier",
																"overloadedDeclarations": [],
																"referencedDeclaration": 642,
																"src": "778:9:4",
																"typeDescriptions": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																}
															},
															"src": "759:28:4",
															"typeDescriptions": {
																"typeIdentifier": "t_bool",
																"typeString": "bool"
															}
														},
														{
															"argumentTypes": null,
															"hexValue": "45706f63683a206e6f74207374617274656420796574",
															"id": 682,
															"isConstant": false,
															"isLValue": false,
															"isPure": true,
															"kind": "string",
															"lValueRequested": false,
															"nodeType": "Literal",
															"src": "789:24:4",
															"subdenomination": null,
															"typeDescriptions": {
																"typeIdentifier": "t_stringliteral_8e8a438152c291035ba61c330518809ea8d48dc6b10ff12642cf5e0b2970a563",
																"typeString": "literal_string \"Epoch: not started yet\""
															},
															"value": "Epoch: not started yet"
														}
													],
													"expression": {
														"argumentTypes": [
															{
																"typeIdentifier": "t_bool",
																"typeString": "bool"
															},
															{
																"typeIdentifier": "t_stringliteral_8e8a438152c291035ba61c330518809ea8d48dc6b10ff12642cf5e0b2970a563",
																"typeString": "literal_string \"Epoch: not started yet\""
															}
														],
														"id": 677,
														"name": "require",
														"nodeType": "Identifier",
														"overloadedDeclarations": [
															-18,
															-18
														],
														"referencedDeclaration": -18,
														"src": "751:7:4",
														"typeDescriptions": {
															"typeIdentifier": "t_function_require_pure$_t_bool_$_t_string_memory_ptr_$returns$__$",
															"typeString": "function (bool,string memory) pure"
														}
													},
													"id": 683,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"kind": "functionCall",
													"lValueRequested": false,
													"names": [],
													"nodeType": "FunctionCall",
													"src": "751:63:4",
													"tryCall": false,
													"typeDescriptions": {
														"typeIdentifier": "t_tuple$__$",
														"typeString": "tuple()"
													}
												},
												"id": 684,
												"nodeType": "ExpressionStatement",
												"src": "751:63:4"
											},
											{
												"id": 685,
												"nodeType": "PlaceholderStatement",
												"src": "827:1:4"
											}
										]
									},
									"documentation": null,
									"id": 687,
									"name": "checkStartTime",
									"nodeType": "ModifierDefinition",
									"overrides": null,
									"parameters": {
										"id": 676,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "740:0:4"
									},
									"src": "716:120:4",
									"virtual": false,
									"visibility": "internal"
								},
								{
									"body": {
										"id": 732,
										"nodeType": "Block",
										"src": "864:499:4",
										"statements": [
											{
												"assignments": [
													690
												],
												"declarations": [
													{
														"constant": false,
														"id": 690,
														"mutability": "mutable",
														"name": "_nextEpochPoint",
														"nodeType": "VariableDeclaration",
														"overrides": null,
														"scope": 732,
														"src": "875:23:4",
														"stateVariable": false,
														"storageLocation": "default",
														"typeDescriptions": {
															"typeIdentifier": "t_uint256",
															"typeString": "uint256"
														},
														"typeName": {
															"id": 689,
															"name": "uint256",
															"nodeType": "ElementaryTypeName",
															"src": "875:7:4",
															"typeDescriptions": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														},
														"value": null,
														"visibility": "internal"
													}
												],
												"id": 693,
												"initialValue": {
													"argumentTypes": null,
													"arguments": [],
													"expression": {
														"argumentTypes": [],
														"id": 691,
														"name": "nextEpochPoint",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 776,
														"src": "901:14:4",
														"typeDescriptions": {
															"typeIdentifier": "t_function_internal_view$__$returns$_t_uint256_$",
															"typeString": "function () view returns (uint256)"
														}
													},
													"id": 692,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"kind": "functionCall",
													"lValueRequested": false,
													"names": [],
													"nodeType": "FunctionCall",
													"src": "901:16:4",
													"tryCall": false,
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"nodeType": "VariableDeclarationStatement",
												"src": "875:42:4"
											},
											{
												"condition": {
													"argumentTypes": null,
													"commonType": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													},
													"id": 697,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"lValueRequested": false,
													"leftExpression": {
														"argumentTypes": null,
														"expression": {
															"argumentTypes": null,
															"id": 694,
															"name": "block",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": -4,
															"src": "932:5:4",
															"typeDescriptions": {
																"typeIdentifier": "t_magic_block",
																"typeString": "block"
															}
														},
														"id": 695,
														"isConstant": false,
														"isLValue": false,
														"isPure": false,
														"lValueRequested": false,
														"memberName": "timestamp",
														"nodeType": "MemberAccess",
														"referencedDeclaration": null,
														"src": "932:15:4",
														"typeDescriptions": {
															"typeIdentifier": "t_uint256",
															"typeString": "uint256"
														}
													},
													"nodeType": "BinaryOperation",
													"operator": "<",
													"rightExpression": {
														"argumentTypes": null,
														"id": 696,
														"name": "_nextEpochPoint",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 690,
														"src": "950:15:4",
														"typeDescriptions": {
															"typeIdentifier": "t_uint256",
															"typeString": "uint256"
														}
													},
													"src": "932:33:4",
													"typeDescriptions": {
														"typeIdentifier": "t_bool",
														"typeString": "bool"
													}
												},
												"falseBody": {
													"id": 730,
													"nodeType": "Block",
													"src": "1095:261:4",
													"statements": [
														{
															"id": 709,
															"nodeType": "PlaceholderStatement",
															"src": "1110:1:4"
														},
														{
															"body": {
																"id": 728,
																"nodeType": "Block",
																"src": "1137:208:4",
																"statements": [
																	{
																		"expression": {
																			"argumentTypes": null,
																			"id": 712,
																			"isConstant": false,
																			"isLValue": false,
																			"isPure": false,
																			"lValueRequested": false,
																			"leftHandSide": {
																				"argumentTypes": null,
																				"id": 710,
																				"name": "lastEpochTime",
																				"nodeType": "Identifier",
																				"overloadedDeclarations": [],
																				"referencedDeclaration": 644,
																				"src": "1156:13:4",
																				"typeDescriptions": {
																					"typeIdentifier": "t_uint256",
																					"typeString": "uint256"
																				}
																			},
																			"nodeType": "Assignment",
																			"operator": "=",
																			"rightHandSide": {
																				"argumentTypes": null,
																				"id": 711,
																				"name": "_nextEpochPoint",
																				"nodeType": "Identifier",
																				"overloadedDeclarations": [],
																				"referencedDeclaration": 690,
																				"src": "1172:15:4",
																				"typeDescriptions": {
																					"typeIdentifier": "t_uint256",
																					"typeString": "uint256"
																				}
																			},
																			"src": "1156:31:4",
																			"typeDescriptions": {
																				"typeIdentifier": "t_uint256",
																				"typeString": "uint256"
																			}
																		},
																		"id": 713,
																		"nodeType": "ExpressionStatement",
																		"src": "1156:31:4"
																	},
																	{
																		"expression": {
																			"argumentTypes": null,
																			"id": 715,
																			"isConstant": false,
																			"isLValue": false,
																			"isPure": false,
																			"lValueRequested": false,
																			"nodeType": "UnaryOperation",
																			"operator": "++",
																			"prefix": true,
																			"src": "1206:7:4",
																			"subExpression": {
																				"argumentTypes": null,
																				"id": 714,
																				"name": "epoch",
																				"nodeType": "Identifier",
																				"overloadedDeclarations": [],
																				"referencedDeclaration": 646,
																				"src": "1208:5:4",
																				"typeDescriptions": {
																					"typeIdentifier": "t_uint256",
																					"typeString": "uint256"
																				}
																			},
																			"typeDescriptions": {
																				"typeIdentifier": "t_uint256",
																				"typeString": "uint256"
																			}
																		},
																		"id": 716,
																		"nodeType": "ExpressionStatement",
																		"src": "1206:7:4"
																	},
																	{
																		"expression": {
																			"argumentTypes": null,
																			"id": 720,
																			"isConstant": false,
																			"isLValue": false,
																			"isPure": false,
																			"lValueRequested": false,
																			"leftHandSide": {
																				"argumentTypes": null,
																				"id": 717,
																				"name": "_nextEpochPoint",
																				"nodeType": "Identifier",
																				"overloadedDeclarations": [],
																				"referencedDeclaration": 690,
																				"src": "1232:15:4",
																				"typeDescriptions": {
																					"typeIdentifier": "t_uint256",
																					"typeString": "uint256"
																				}
																			},
																			"nodeType": "Assignment",
																			"operator": "=",
																			"rightHandSide": {
																				"argumentTypes": null,
																				"arguments": [],
																				"expression": {
																					"argumentTypes": [],
																					"id": 718,
																					"name": "nextEpochPoint",
																					"nodeType": "Identifier",
																					"overloadedDeclarations": [],
																					"referencedDeclaration": 776,
																					"src": "1250:14:4",
																					"typeDescriptions": {
																						"typeIdentifier": "t_function_internal_view$__$returns$_t_uint256_$",
																						"typeString": "function () view returns (uint256)"
																					}
																				},
																				"id": 719,
																				"isConstant": false,
																				"isLValue": false,
																				"isPure": false,
																				"kind": "functionCall",
																				"lValueRequested": false,
																				"names": [],
																				"nodeType": "FunctionCall",
																				"src": "1250:16:4",
																				"tryCall": false,
																				"typeDescriptions": {
																					"typeIdentifier": "t_uint256",
																					"typeString": "uint256"
																				}
																			},
																			"src": "1232:34:4",
																			"typeDescriptions": {
																				"typeIdentifier": "t_uint256",
																				"typeString": "uint256"
																			}
																		},
																		"id": 721,
																		"nodeType": "ExpressionStatement",
																		"src": "1232:34:4"
																	},
																	{
																		"condition": {
																			"argumentTypes": null,
																			"commonType": {
																				"typeIdentifier": "t_uint256",
																				"typeString": "uint256"
																			},
																			"id": 725,
																			"isConstant": false,
																			"isLValue": false,
																			"isPure": false,
																			"lValueRequested": false,
																			"leftExpression": {
																				"argumentTypes": null,
																				"expression": {
																					"argumentTypes": null,
																					"id": 722,
																					"name": "block",
																					"nodeType": "Identifier",
																					"overloadedDeclarations": [],
																					"referencedDeclaration": -4,
																					"src": "1289:5:4",
																					"typeDescriptions": {
																						"typeIdentifier": "t_magic_block",
																						"typeString": "block"
																					}
																				},
																				"id": 723,
																				"isConstant": false,
																				"isLValue": false,
																				"isPure": false,
																				"lValueRequested": false,
																				"memberName": "timestamp",
																				"nodeType": "MemberAccess",
																				"referencedDeclaration": null,
																				"src": "1289:15:4",
																				"typeDescriptions": {
																					"typeIdentifier": "t_uint256",
																					"typeString": "uint256"
																				}
																			},
																			"nodeType": "BinaryOperation",
																			"operator": "<",
																			"rightExpression": {
																				"argumentTypes": null,
																				"id": 724,
																				"name": "_nextEpochPoint",
																				"nodeType": "Identifier",
																				"overloadedDeclarations": [],
																				"referencedDeclaration": 690,
																				"src": "1307:15:4",
																				"typeDescriptions": {
																					"typeIdentifier": "t_uint256",
																					"typeString": "uint256"
																				}
																			},
																			"src": "1289:33:4",
																			"typeDescriptions": {
																				"typeIdentifier": "t_bool",
																				"typeString": "bool"
																			}
																		},
																		"falseBody": null,
																		"id": 727,
																		"nodeType": "IfStatement",
																		"src": "1285:44:4",
																		"trueBody": {
																			"id": 726,
																			"nodeType": "Break",
																			"src": "1324:5:4"
																		}
																	}
																]
															},
															"condition": null,
															"id": 729,
															"initializationExpression": null,
															"loopExpression": null,
															"nodeType": "ForStatement",
															"src": "1128:217:4"
														}
													]
												},
												"id": 731,
												"nodeType": "IfStatement",
												"src": "928:428:4",
												"trueBody": {
													"id": 708,
													"nodeType": "Block",
													"src": "967:122:4",
													"statements": [
														{
															"expression": {
																"argumentTypes": null,
																"arguments": [
																	{
																		"argumentTypes": null,
																		"commonType": {
																			"typeIdentifier": "t_address",
																			"typeString": "address"
																		},
																		"id": 703,
																		"isConstant": false,
																		"isLValue": false,
																		"isPure": false,
																		"lValueRequested": false,
																		"leftExpression": {
																			"argumentTypes": null,
																			"expression": {
																				"argumentTypes": null,
																				"id": 699,
																				"name": "msg",
																				"nodeType": "Identifier",
																				"overloadedDeclarations": [],
																				"referencedDeclaration": -15,
																				"src": "990:3:4",
																				"typeDescriptions": {
																					"typeIdentifier": "t_magic_message",
																					"typeString": "msg"
																				}
																			},
																			"id": 700,
																			"isConstant": false,
																			"isLValue": false,
																			"isPure": false,
																			"lValueRequested": false,
																			"memberName": "sender",
																			"nodeType": "MemberAccess",
																			"referencedDeclaration": null,
																			"src": "990:10:4",
																			"typeDescriptions": {
																				"typeIdentifier": "t_address_payable",
																				"typeString": "address payable"
																			}
																		},
																		"nodeType": "BinaryOperation",
																		"operator": "==",
																		"rightExpression": {
																			"argumentTypes": null,
																			"arguments": [],
																			"expression": {
																				"argumentTypes": [],
																				"id": 701,
																				"name": "operator",
																				"nodeType": "Identifier",
																				"overloadedDeclarations": [],
																				"referencedDeclaration": 559,
																				"src": "1004:8:4",
																				"typeDescriptions": {
																					"typeIdentifier": "t_function_internal_view$__$returns$_t_address_$",
																					"typeString": "function () view returns (address)"
																				}
																			},
																			"id": 702,
																			"isConstant": false,
																			"isLValue": false,
																			"isPure": false,
																			"kind": "functionCall",
																			"lValueRequested": false,
																			"names": [],
																			"nodeType": "FunctionCall",
																			"src": "1004:10:4",
																			"tryCall": false,
																			"typeDescriptions": {
																				"typeIdentifier": "t_address",
																				"typeString": "address"
																			}
																		},
																		"src": "990:24:4",
																		"typeDescriptions": {
																			"typeIdentifier": "t_bool",
																			"typeString": "bool"
																		}
																	},
																	{
																		"argumentTypes": null,
																		"hexValue": "45706f63683a206f6e6c79206f70657261746f7220616c6c6f77656420666f72207072652d65706f6368",
																		"id": 704,
																		"isConstant": false,
																		"isLValue": false,
																		"isPure": true,
																		"kind": "string",
																		"lValueRequested": false,
																		"nodeType": "Literal",
																		"src": "1016:44:4",
																		"subdenomination": null,
																		"typeDescriptions": {
																			"typeIdentifier": "t_stringliteral_65a6ac0f2af75fb814b785c3791499fb69ad80803315c516d32b2031635daab8",
																			"typeString": "literal_string \"Epoch: only operator allowed for pre-epoch\""
																		},
																		"value": "Epoch: only operator allowed for pre-epoch"
																	}
																],
																"expression": {
																	"argumentTypes": [
																		{
																			"typeIdentifier": "t_bool",
																			"typeString": "bool"
																		},
																		{
																			"typeIdentifier": "t_stringliteral_65a6ac0f2af75fb814b785c3791499fb69ad80803315c516d32b2031635daab8",
																			"typeString": "literal_string \"Epoch: only operator allowed for pre-epoch\""
																		}
																	],
																	"id": 698,
																	"name": "require",
																	"nodeType": "Identifier",
																	"overloadedDeclarations": [
																		-18,
																		-18
																	],
																	"referencedDeclaration": -18,
																	"src": "982:7:4",
																	"typeDescriptions": {
																		"typeIdentifier": "t_function_require_pure$_t_bool_$_t_string_memory_ptr_$returns$__$",
																		"typeString": "function (bool,string memory) pure"
																	}
																},
																"id": 705,
																"isConstant": false,
																"isLValue": false,
																"isPure": false,
																"kind": "functionCall",
																"lValueRequested": false,
																"names": [],
																"nodeType": "FunctionCall",
																"src": "982:79:4",
																"tryCall": false,
																"typeDescriptions": {
																	"typeIdentifier": "t_tuple$__$",
																	"typeString": "tuple()"
																}
															},
															"id": 706,
															"nodeType": "ExpressionStatement",
															"src": "982:79:4"
														},
														{
															"id": 707,
															"nodeType": "PlaceholderStatement",
															"src": "1076:1:4"
														}
													]
												}
											}
										]
									},
									"documentation": null,
									"id": 733,
									"name": "checkEpoch",
									"nodeType": "ModifierDefinition",
									"overrides": null,
									"parameters": {
										"id": 688,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "864:0:4"
									},
									"src": "844:519:4",
									"virtual": false,
									"visibility": "internal"
								},
								{
									"body": {
										"id": 740,
										"nodeType": "Block",
										"src": "1478:31:4",
										"statements": [
											{
												"expression": {
													"argumentTypes": null,
													"id": 738,
													"name": "epoch",
													"nodeType": "Identifier",
													"overloadedDeclarations": [],
													"referencedDeclaration": 646,
													"src": "1496:5:4",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"functionReturnParameters": 737,
												"id": 739,
												"nodeType": "Return",
												"src": "1489:12:4"
											}
										]
									},
									"documentation": null,
									"functionSelector": "b97dd9e2",
									"id": 741,
									"implemented": true,
									"kind": "function",
									"modifiers": [],
									"name": "getCurrentEpoch",
									"nodeType": "FunctionDefinition",
									"overrides": null,
									"parameters": {
										"id": 734,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "1445:2:4"
									},
									"returnParameters": {
										"id": 737,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 736,
												"mutability": "mutable",
												"name": "",
												"nodeType": "VariableDeclaration",
												"overrides": null,
												"scope": 741,
												"src": "1469:7:4",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 735,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "1469:7:4",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"value": null,
												"visibility": "internal"
											}
										],
										"src": "1468:9:4"
									},
									"scope": 812,
									"src": "1421:88:4",
									"stateMutability": "view",
									"virtual": false,
									"visibility": "public"
								},
								{
									"body": {
										"id": 748,
										"nodeType": "Block",
										"src": "1568:32:4",
										"statements": [
											{
												"expression": {
													"argumentTypes": null,
													"id": 746,
													"name": "period",
													"nodeType": "Identifier",
													"overloadedDeclarations": [],
													"referencedDeclaration": 640,
													"src": "1586:6:4",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"functionReturnParameters": 745,
												"id": 747,
												"nodeType": "Return",
												"src": "1579:13:4"
											}
										]
									},
									"documentation": null,
									"functionSelector": "1ed24195",
									"id": 749,
									"implemented": true,
									"kind": "function",
									"modifiers": [],
									"name": "getPeriod",
									"nodeType": "FunctionDefinition",
									"overrides": null,
									"parameters": {
										"id": 742,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "1535:2:4"
									},
									"returnParameters": {
										"id": 745,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 744,
												"mutability": "mutable",
												"name": "",
												"nodeType": "VariableDeclaration",
												"overrides": null,
												"scope": 749,
												"src": "1559:7:4",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 743,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "1559:7:4",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"value": null,
												"visibility": "internal"
											}
										],
										"src": "1558:9:4"
									},
									"scope": 812,
									"src": "1517:83:4",
									"stateMutability": "view",
									"virtual": false,
									"visibility": "public"
								},
								{
									"body": {
										"id": 756,
										"nodeType": "Block",
										"src": "1662:35:4",
										"statements": [
											{
												"expression": {
													"argumentTypes": null,
													"id": 754,
													"name": "startTime",
													"nodeType": "Identifier",
													"overloadedDeclarations": [],
													"referencedDeclaration": 642,
													"src": "1680:9:4",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"functionReturnParameters": 753,
												"id": 755,
												"nodeType": "Return",
												"src": "1673:16:4"
											}
										]
									},
									"documentation": null,
									"functionSelector": "c828371e",
									"id": 757,
									"implemented": true,
									"kind": "function",
									"modifiers": [],
									"name": "getStartTime",
									"nodeType": "FunctionDefinition",
									"overrides": null,
									"parameters": {
										"id": 750,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "1629:2:4"
									},
									"returnParameters": {
										"id": 753,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 752,
												"mutability": "mutable",
												"name": "",
												"nodeType": "VariableDeclaration",
												"overrides": null,
												"scope": 757,
												"src": "1653:7:4",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 751,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "1653:7:4",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"value": null,
												"visibility": "internal"
											}
										],
										"src": "1652:9:4"
									},
									"scope": 812,
									"src": "1608:89:4",
									"stateMutability": "view",
									"virtual": false,
									"visibility": "public"
								},
								{
									"body": {
										"id": 764,
										"nodeType": "Block",
										"src": "1763:39:4",
										"statements": [
											{
												"expression": {
													"argumentTypes": null,
													"id": 762,
													"name": "lastEpochTime",
													"nodeType": "Identifier",
													"overloadedDeclarations": [],
													"referencedDeclaration": 644,
													"src": "1781:13:4",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"functionReturnParameters": 761,
												"id": 763,
												"nodeType": "Return",
												"src": "1774:20:4"
											}
										]
									},
									"documentation": null,
									"functionSelector": "ba522458",
									"id": 765,
									"implemented": true,
									"kind": "function",
									"modifiers": [],
									"name": "getLastEpochTime",
									"nodeType": "FunctionDefinition",
									"overrides": null,
									"parameters": {
										"id": 758,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "1730:2:4"
									},
									"returnParameters": {
										"id": 761,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 760,
												"mutability": "mutable",
												"name": "",
												"nodeType": "VariableDeclaration",
												"overrides": null,
												"scope": 765,
												"src": "1754:7:4",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 759,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "1754:7:4",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"value": null,
												"visibility": "internal"
											}
										],
										"src": "1753:9:4"
									},
									"scope": 812,
									"src": "1705:97:4",
									"stateMutability": "view",
									"virtual": false,
									"visibility": "public"
								},
								{
									"body": {
										"id": 775,
										"nodeType": "Block",
										"src": "1866:51:4",
										"statements": [
											{
												"expression": {
													"argumentTypes": null,
													"arguments": [
														{
															"argumentTypes": null,
															"id": 772,
															"name": "period",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 640,
															"src": "1902:6:4",
															"typeDescriptions": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														}
													],
													"expression": {
														"argumentTypes": [
															{
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														],
														"expression": {
															"argumentTypes": null,
															"id": 770,
															"name": "lastEpochTime",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 644,
															"src": "1884:13:4",
															"typeDescriptions": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														},
														"id": 771,
														"isConstant": false,
														"isLValue": false,
														"isPure": false,
														"lValueRequested": false,
														"memberName": "add",
														"nodeType": "MemberAccess",
														"referencedDeclaration": 313,
														"src": "1884:17:4",
														"typeDescriptions": {
															"typeIdentifier": "t_function_internal_pure$_t_uint256_$_t_uint256_$returns$_t_uint256_$bound_to$_t_uint256_$",
															"typeString": "function (uint256,uint256) pure returns (uint256)"
														}
													},
													"id": 773,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"kind": "functionCall",
													"lValueRequested": false,
													"names": [],
													"nodeType": "FunctionCall",
													"src": "1884:25:4",
													"tryCall": false,
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"functionReturnParameters": 769,
												"id": 774,
												"nodeType": "Return",
												"src": "1877:32:4"
											}
										]
									},
									"documentation": null,
									"functionSelector": "c5967c26",
									"id": 776,
									"implemented": true,
									"kind": "function",
									"modifiers": [],
									"name": "nextEpochPoint",
									"nodeType": "FunctionDefinition",
									"overrides": null,
									"parameters": {
										"id": 766,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "1833:2:4"
									},
									"returnParameters": {
										"id": 769,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 768,
												"mutability": "mutable",
												"name": "",
												"nodeType": "VariableDeclaration",
												"overrides": null,
												"scope": 776,
												"src": "1857:7:4",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 767,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "1857:7:4",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"value": null,
												"visibility": "internal"
											}
										],
										"src": "1856:9:4"
									},
									"scope": 812,
									"src": "1810:107:4",
									"stateMutability": "view",
									"virtual": false,
									"visibility": "public"
								},
								{
									"body": {
										"id": 798,
										"nodeType": "Block",
										"src": "2029:121:4",
										"statements": [
											{
												"expression": {
													"argumentTypes": null,
													"arguments": [
														{
															"argumentTypes": null,
															"commonType": {
																"typeIdentifier": "t_bool",
																"typeString": "bool"
															},
															"id": 790,
															"isConstant": false,
															"isLValue": false,
															"isPure": false,
															"lValueRequested": false,
															"leftExpression": {
																"argumentTypes": null,
																"commonType": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																},
																"id": 786,
																"isConstant": false,
																"isLValue": false,
																"isPure": false,
																"lValueRequested": false,
																"leftExpression": {
																	"argumentTypes": null,
																	"id": 784,
																	"name": "_period",
																	"nodeType": "Identifier",
																	"overloadedDeclarations": [],
																	"referencedDeclaration": 778,
																	"src": "2048:7:4",
																	"typeDescriptions": {
																		"typeIdentifier": "t_uint256",
																		"typeString": "uint256"
																	}
																},
																"nodeType": "BinaryOperation",
																"operator": ">=",
																"rightExpression": {
																	"argumentTypes": null,
																	"hexValue": "31",
																	"id": 785,
																	"isConstant": false,
																	"isLValue": false,
																	"isPure": true,
																	"kind": "number",
																	"lValueRequested": false,
																	"nodeType": "Literal",
																	"src": "2059:7:4",
																	"subdenomination": "hours",
																	"typeDescriptions": {
																		"typeIdentifier": "t_rational_3600_by_1",
																		"typeString": "int_const 3600"
																	},
																	"value": "1"
																},
																"src": "2048:18:4",
																"typeDescriptions": {
																	"typeIdentifier": "t_bool",
																	"typeString": "bool"
																}
															},
															"nodeType": "BinaryOperation",
															"operator": "&&",
															"rightExpression": {
																"argumentTypes": null,
																"commonType": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																},
																"id": 789,
																"isConstant": false,
																"isLValue": false,
																"isPure": false,
																"lValueRequested": false,
																"leftExpression": {
																	"argumentTypes": null,
																	"id": 787,
																	"name": "_period",
																	"nodeType": "Identifier",
																	"overloadedDeclarations": [],
																	"referencedDeclaration": 778,
																	"src": "2070:7:4",
																	"typeDescriptions": {
																		"typeIdentifier": "t_uint256",
																		"typeString": "uint256"
																	}
																},
																"nodeType": "BinaryOperation",
																"operator": "<=",
																"rightExpression": {
																	"argumentTypes": null,
																	"hexValue": "3438",
																	"id": 788,
																	"isConstant": false,
																	"isLValue": false,
																	"isPure": true,
																	"kind": "number",
																	"lValueRequested": false,
																	"nodeType": "Literal",
																	"src": "2081:8:4",
																	"subdenomination": "hours",
																	"typeDescriptions": {
																		"typeIdentifier": "t_rational_172800_by_1",
																		"typeString": "int_const 172800"
																	},
																	"value": "48"
																},
																"src": "2070:19:4",
																"typeDescriptions": {
																	"typeIdentifier": "t_bool",
																	"typeString": "bool"
																}
															},
															"src": "2048:41:4",
															"typeDescriptions": {
																"typeIdentifier": "t_bool",
																"typeString": "bool"
															}
														},
														{
															"argumentTypes": null,
															"hexValue": "5f706572696f643a206f7574206f662072616e6765",
															"id": 791,
															"isConstant": false,
															"isLValue": false,
															"isPure": true,
															"kind": "string",
															"lValueRequested": false,
															"nodeType": "Literal",
															"src": "2091:23:4",
															"subdenomination": null,
															"typeDescriptions": {
																"typeIdentifier": "t_stringliteral_65fee9e3ad73c8f8a722ab2afca3a7b253b971e560818703253b13d3ac9523a5",
																"typeString": "literal_string \"_period: out of range\""
															},
															"value": "_period: out of range"
														}
													],
													"expression": {
														"argumentTypes": [
															{
																"typeIdentifier": "t_bool",
																"typeString": "bool"
															},
															{
																"typeIdentifier": "t_stringliteral_65fee9e3ad73c8f8a722ab2afca3a7b253b971e560818703253b13d3ac9523a5",
																"typeString": "literal_string \"_period: out of range\""
															}
														],
														"id": 783,
														"name": "require",
														"nodeType": "Identifier",
														"overloadedDeclarations": [
															-18,
															-18
														],
														"referencedDeclaration": -18,
														"src": "2040:7:4",
														"typeDescriptions": {
															"typeIdentifier": "t_function_require_pure$_t_bool_$_t_string_memory_ptr_$returns$__$",
															"typeString": "function (bool,string memory) pure"
														}
													},
													"id": 792,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"kind": "functionCall",
													"lValueRequested": false,
													"names": [],
													"nodeType": "FunctionCall",
													"src": "2040:75:4",
													"tryCall": false,
													"typeDescriptions": {
														"typeIdentifier": "t_tuple$__$",
														"typeString": "tuple()"
													}
												},
												"id": 793,
												"nodeType": "ExpressionStatement",
												"src": "2040:75:4"
											},
											{
												"expression": {
													"argumentTypes": null,
													"id": 796,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"lValueRequested": false,
													"leftHandSide": {
														"argumentTypes": null,
														"id": 794,
														"name": "period",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 640,
														"src": "2126:6:4",
														"typeDescriptions": {
															"typeIdentifier": "t_uint256",
															"typeString": "uint256"
														}
													},
													"nodeType": "Assignment",
													"operator": "=",
													"rightHandSide": {
														"argumentTypes": null,
														"id": 795,
														"name": "_period",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 778,
														"src": "2135:7:4",
														"typeDescriptions": {
															"typeIdentifier": "t_uint256",
															"typeString": "uint256"
														}
													},
													"src": "2126:16:4",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"id": 797,
												"nodeType": "ExpressionStatement",
												"src": "2126:16:4"
											}
										]
									},
									"documentation": null,
									"functionSelector": "0f3a9f65",
									"id": 799,
									"implemented": true,
									"kind": "function",
									"modifiers": [
										{
											"arguments": null,
											"id": 781,
											"modifierName": {
												"argumentTypes": null,
												"id": 780,
												"name": "onlyOperator",
												"nodeType": "Identifier",
												"overloadedDeclarations": [],
												"referencedDeclaration": 571,
												"src": "2016:12:4",
												"typeDescriptions": {
													"typeIdentifier": "t_modifier$__$",
													"typeString": "modifier ()"
												}
											},
											"nodeType": "ModifierInvocation",
											"src": "2016:12:4"
										}
									],
									"name": "setPeriod",
									"nodeType": "FunctionDefinition",
									"overrides": null,
									"parameters": {
										"id": 779,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 778,
												"mutability": "mutable",
												"name": "_period",
												"nodeType": "VariableDeclaration",
												"overrides": null,
												"scope": 799,
												"src": "1990:15:4",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 777,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "1990:7:4",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"value": null,
												"visibility": "internal"
											}
										],
										"src": "1989:17:4"
									},
									"returnParameters": {
										"id": 782,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "2029:0:4"
									},
									"scope": 812,
									"src": "1971:179:4",
									"stateMutability": "nonpayable",
									"virtual": false,
									"visibility": "external"
								},
								{
									"body": {
										"id": 810,
										"nodeType": "Block",
										"src": "2214:33:4",
										"statements": [
											{
												"expression": {
													"argumentTypes": null,
													"id": 808,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"lValueRequested": false,
													"leftHandSide": {
														"argumentTypes": null,
														"id": 806,
														"name": "epoch",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 646,
														"src": "2225:5:4",
														"typeDescriptions": {
															"typeIdentifier": "t_uint256",
															"typeString": "uint256"
														}
													},
													"nodeType": "Assignment",
													"operator": "=",
													"rightHandSide": {
														"argumentTypes": null,
														"id": 807,
														"name": "_epoch",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 801,
														"src": "2233:6:4",
														"typeDescriptions": {
															"typeIdentifier": "t_uint256",
															"typeString": "uint256"
														}
													},
													"src": "2225:14:4",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"id": 809,
												"nodeType": "ExpressionStatement",
												"src": "2225:14:4"
											}
										]
									},
									"documentation": null,
									"functionSelector": "0ceb2cef",
									"id": 811,
									"implemented": true,
									"kind": "function",
									"modifiers": [
										{
											"arguments": null,
											"id": 804,
											"modifierName": {
												"argumentTypes": null,
												"id": 803,
												"name": "onlyOperator",
												"nodeType": "Identifier",
												"overloadedDeclarations": [],
												"referencedDeclaration": 571,
												"src": "2201:12:4",
												"typeDescriptions": {
													"typeIdentifier": "t_modifier$__$",
													"typeString": "modifier ()"
												}
											},
											"nodeType": "ModifierInvocation",
											"src": "2201:12:4"
										}
									],
									"name": "setEpoch",
									"nodeType": "FunctionDefinition",
									"overrides": null,
									"parameters": {
										"id": 802,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 801,
												"mutability": "mutable",
												"name": "_epoch",
												"nodeType": "VariableDeclaration",
												"overrides": null,
												"scope": 811,
												"src": "2176:14:4",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 800,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "2176:7:4",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"value": null,
												"visibility": "internal"
											}
										],
										"src": "2175:16:4"
									},
									"returnParameters": {
										"id": 805,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "2214:0:4"
									},
									"scope": 812,
									"src": "2158:89:4",
									"stateMutability": "nonpayable",
									"virtual": false,
									"visibility": "external"
								}
							],
							"scope": 813,
							"src": "164:2086:4"
						}
					],
					"src": "35:2217:4"
				},
				"id": 4
			}
		}
	}
}